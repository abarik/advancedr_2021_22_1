[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"Welcome second book R Fundamentals series! second book takes manipulation tabular data create modern graphics R. ’ll primarily using capabilities set packages called tidyverse within book. book aimed beginners R understand basics (check Basic R).","code":""},{"path":"warm-up-exercise.html","id":"warm-up-exercise","chapter":"2 Warm-up exercise","heading":"2 Warm-up exercise","text":"Loftus, S. C. (2021). Basic Statistics R: Reaching Decisions Data. Retrieved https://books.google.hu/books?id=vTASEAAAQBAJ","code":""},{"path":"warm-up-exercise.html","id":"data-structures","chapter":"2 Warm-up exercise","heading":"2.1 Data structures","text":"","code":""},{"path":"warm-up-exercise.html","id":"problems","chapter":"2 Warm-up exercise","heading":"2.1.1 Problems","text":"Consider following set attributes American Film Institute’s top-five movies ever 2007 list.code use create vector named Movie values Citizen Kane, Godfather, Casablanca, Raging Bull, Singing Rain? (Hints: object <- c(), Working character R)code use create vector — giving year movies Problem 1 made — named Year values 1941, 1972, 1942, 1980, 1952?code use create vector — giving run times minutes movies Problem 1 — named RunTime values 119, 177, 102, 129, 103?code use find run times movies hours save vector called RunTimeHours? (Hints: Numeric tranformation)code use create data frame named MovieInfo containing vectors created Problem 1, Problem 2, Problem 3? (Hints: data.frame())","code":""},{"path":"warm-up-exercise.html","id":"manipulation","chapter":"2 Warm-up exercise","heading":"2.2 Manipulation","text":"","code":""},{"path":"warm-up-exercise.html","id":"problems-1","chapter":"2 Warm-up exercise","heading":"2.2.1 Problems","text":"Suppose following data frame named colleges (download ):code use select first, third, tenth, twelfth entries TopSalary vector Colleges data frame? (Hints: Indexing [] operator)code use select elements MedianSalary vector TopSalary greater $400,000? (Hints: d$MedianSalary[d$TopSalary>400000])code use select rows data frame colleges less equal 1000 employees? (Hints: d[condition, ])code use select sample 5 colleges data frame (14 rows)? (Hints: d[sample(x = 1:14, size = 5, replace = F),])Suppose following data frame named Countries (download ):use select rows data frame GDP per capita less 10000 Asia region?code use select sample three nations data frame (10 rows)?code use select nations saw population percent increase greater 1.5%?Suppose following data frame named Olympics (download ):code use select rows data frame host nation also medal leader?code use select rows data frame number competitors per event greater 35?code use select rows data frame number competing nations Winter Olympics least 80?","code":""},{"path":"warm-up-exercise.html","id":"packages","chapter":"2 Warm-up exercise","heading":"2.3 Packages","text":"","code":""},{"path":"warm-up-exercise.html","id":"problems-2","chapter":"2 Warm-up exercise","heading":"2.3.1 Problems","text":"Install Ecdat package. (Hints: install.packages())Say previously installed Ecdat library R wanted call library access datasets . code use call library? (Hints: library())Say wanted call dataset Diamond Ecdat library. code use load dataset R? (Hints: data())","code":""},{"path":"warm-up-exercise.html","id":"frequency-and-numerical-exploratory-analyses","chapter":"2 Warm-up exercise","heading":"2.4 Frequency and numerical exploratory analyses","text":"","code":""},{"path":"warm-up-exercise.html","id":"problems-3","chapter":"2 Warm-up exercise","heading":"2.4.1 Problems","text":"Load leuk dataset MASS library. dataset survival times (time), white blood cell count (wbc), presence morphologic characteristic white blood cells (ag).Generate frequency table presence morphologic characteristic.Find median mean survival time.Find range, IQR, variance, standard deviation white blood cell count.Find correlation white blood cell count survival time.Load survey dataset MASS library. dataset contains survey responses class college students.Create contingency table whether student smoked (Smoke) student’s exercise regimen (Exer). (Hints: table(), DescTools::Desc())Find mean median student’s heart rate (Pulse). (Hints: summary(), DescTools::Desc(), psych::describe())Find range, IQR, variance, standard deviation student age (Age).Find correlation span student’s writing hand (Wr.Hnd) nonwriting hand (NW.Hnd). (Hints: cor(), DescTools::Desc())Load Housing dataset Ecdat library. dataset looks variables affect sales price houses.Create contingency table whether house recreation room (recroom) whether house full basement (fullbase).Find mean median house’s lot size (lotsize).Find range, IQR, variance, standard deviation sales price (price).Find correlation sales price house (price) number bedrooms (bedrooms).","code":""},{"path":"warm-up-exercise.html","id":"graphical-exploratory-analyses","chapter":"2 Warm-up exercise","heading":"2.5 Graphical exploratory analyses","text":"Load Star dataset Ecdat library. dataset looks affect class sizes student learning.Generate scatterplot student’s math score tmathssk reading score treadssk. (Hints: plot(), ggplot() + geom_point())Generate histogram years teaching experience totexpk. (Hints: hist(), ggplot() + geom_histogram())Create new variable Star dataset called totalscore sum student’s math score tmathssk reading score treadssk. (Hints: tranformation)Generate boxplot student’s total score totalscore split class size type classk. (Hints: boxplot(), ggplot() + geom_boxplot())Load survey dataset MASS library. dataset contains survey responses class college students.Generate scatterplot student’s height Height writing hand span Wr.Hnd.Generate histogram student age Age.Generate boxplot student’s heart rate Pulse split student’s exercise regimen Exer.","code":""},{"path":"rmarkdown.html","id":"rmarkdown","chapter":"3 RMarkdown","heading":"3 RMarkdown","text":"RMarkdown framework RStudio easily combining code, data, text interactive charts reports slide decks. RMarkdown based Markdown.","code":""},{"path":"rmarkdown.html","id":"markdown","chapter":"3 RMarkdown","heading":"3.1 Markdown","text":"Markdown markup language. extremely simple markup language, popular Web application. Markdown used format text GitHub, Reddit, Stack Exchange, Trello, RMarkdown.\nMarkap laguages allow authors annotate content. content anything reports websites. HTML widely used markup language.Markdown created John Gruber Aaron Swartz 2004. Markup designed human reader easily parse content.can download example Markdown file illustrate markdown syntax:HeadingsParagraphsLine BreaksEmphasis (Bold, Italic)BlockquotesLists (Ordered, Unordered)CodeHorizontal RulesLinksImagesTablesFootnotesDefinition ListsIt’s important note Markdown comes many different flavors (versions). several lightweight markup languages supersets Markdown. include Gruber’s basic syntax build upon adding additional elements.Many popular Markdown applications use one following lightweight markup languages:CommonMarkCommonMarkGitHub Flavored Markdown (GFM)GitHub Flavored Markdown (GFM)Markdown ExtraMarkdown ExtraMultiMarkdownMultiMarkdownR Markdown - PandocR Markdown - PandocIf familiar Markdown yet, prefer writing Markdown code, RStudio v1.4 included experimental visual editor Markdown documents, feels similar traditional WYSIWYG editors like Word. can find full documentation RStudio Visual R Markdown. visual editor, can visually edit almost Markdown elements supported Pandoc, section headers, figures, tables, footnotes, .Additional resources Markdown:Markdown Cheat Sheet\nquick reference Markdown syntax.Basic Syntax\nMarkdown elements outlined John Gruber’s design document.Extended Syntax\nAdvanced features build basic Markdown syntax.","code":""},{"path":"rmarkdown.html","id":"rmarkdown-1","chapter":"3 RMarkdown","heading":"3.2 RMarkdown","text":"R Markdown understands Pandoc’s Markdown, version Markdown features. Pandoc guide provides extensive resource formatting options.Rmarkdown files plain text files contain information necessary RStudio generate output files, using rmarkdown knitr package. three distinct parts document, fact, written different language.file header tells rmarkdown package type file create. case, HTML document. ’s worth noting header written YAML.text document written Pandoc flavored Markdown.R code want include evaluate document contained within code chunks. delimited pairs three back ticks. Note back ticks actually part Pandoc Markdown syntax. beauty RMarkdown. allows us combine text, images, code, output together huge variety different output formats create rich reports presentations.use RMarkdown need R package available CRAN, called rmarkdown need install use. install way install R package, function install.packages(). rmarkdown package developed folks RStudio. Therefore, RStudio application designed document editor RMarkdown. R Markdown files extension .Rmd. ’s impossible use R Markdown without RStudio, RStudio makes real delight use. rmarkdown package collection many different tools work together convert RMarkdown files, HTML, PDF, Microsoft Word documents, many file types.therefore two components R Markdown: .Rmd file, contains content, rmarkdown package passes .Rmd file generates specify output files.basic workflow structure RMarkdown document shown Figure 3.1, highlighting steps (arrows) intermediate files created producing output. whole process implemented via function rmarkdown::render(). stage explained detail .\nFigure 3.1: diagram illustrating R Markdown document converted final output document.\n","code":""},{"path":"rmarkdown.html","id":"code-chunks","chapter":"3 RMarkdown","heading":"3.3 Code Chunks","text":"run blocks code RMarkdown, use code chunks. Insert new code chunk :Command + Option + Mac, Ctrl + Alt + Linux Windows.Another option “Insert” drop-Icon toolbar selecting R.recommend learning shortcut save time! ’ll insert new code chunk R Markdown Guide moment.","code":""},{"path":"rmarkdown.html","id":"running-code","chapter":"3 RMarkdown","heading":"3.3.1 Running Code","text":"RStudio provides many options running code chunks “Run” drop-tab toolbar.running code chunks often good idea restart R session start clean environment. Command + Shift + F10 Mac Control + Shift + F10 Linux Windows.save time, ’s worth learning shortcuts run code:Run chunks current chunk Command + Option + P Mac, Ctrl + Alt + P Linux Windows.Run current chunk Command + Option + C Command + Shift + Enter Mac. Linux Windows, use Ctrl + Alt + C Ctrl + Shift + Enter run current chunk.Run next chunk Command + Option + N Mac, Ctrl + Alt + N Linux Windows.Run chunks Command + Option + R Command + + Enter Mac. Linux Windows, use Ctrl + Alt + R Ctrl + + Enter run chunks.","code":""},{"path":"rmarkdown.html","id":"control-behavior-with-code-chunk-options","chapter":"3 RMarkdown","heading":"3.3.2 Control Behavior with Code Chunk Options","text":"One great things R Markdown many options control chunk code evaluated presented. allows build presentations reports ground — including code, plots, tables, images — presenting essential information intended audience. example, can include plot results without showing code used generate .Mastering code chunk options essential becoming proficient RMarkdown user. best way learn chunk options try need reports, don’t worry memorizing now. key chunk options learn:echo = FALSE: show code output, run code produce outputs, plots, warnings messages. code chunk generate plot image example .eval = FALSE: Show code, evaluate .fig.show = \"hide\": Hide plots.results = \"hide\": Hides printed output.include = FALSE: Run code, suppress output. helpful setup code.message = FALSE: Prevent packages printing messages load. also suppress messages generated functions.warning = FALSE: Prevent packages functions displaying warnings.","code":""},{"path":"rmarkdown.html","id":"navigating-sections-and-code-chunks","chapter":"3 RMarkdown","heading":"3.3.3 Navigating Sections and Code Chunks","text":"Naming code chunks useful long documents many chunks. R code chunks, name chunk like : {r my_boring_chunk_name}.named code chunks, can navigate chunks navigator included bottom R Markdown window pane. can also make plots easy identify name can used sections document. navigator also useful quickly jumping another section document.","code":""},{"path":"rmarkdown.html","id":"table-formatting","chapter":"3 RMarkdown","heading":"3.3.4 Table Formatting","text":"Tables R Markdown displayed see R console default. improve aesthetics table RMarkdown document, use function knitr::kable(). ’s example:Table 3.1: First Rows Cars DatasetThere many packages creating tables R Markdown.","code":"\nknitr::kable(head(cars), caption = \"The First Few Rows of the Cars Dataset\")"},{"path":"rmarkdown.html","id":"inline-code","chapter":"3 RMarkdown","heading":"3.4 Inline Code","text":"Directly embed R code R Markdown document inline code. useful want include information data written summary. ’ll add examples inline code R Markdown Guide illustrate works.Use inline code r add code evaluate within backticks. example, ’s can summarize number rows number columns cars dataset ’s built-R:example highlights ’s possible reduce errors reports summarizing information programmatically. alter dataset change number rows columns, need rerun code accurate result. much better trying remember document need update results, determining new numbers, manually changing results. RMarkdown powerful can save time improve quality accuracy reports.","code":"\n## Inline Code\n\nThe `cars` dataset contains 50 rows and 2 columns."},{"path":"rmarkdown.html","id":"output-format-options","chapter":"3 RMarkdown","heading":"3.5 Output Format Options","text":"Now solid understanding format RMarkdown document, let’s discuss format options. Format options apply entire document specified YAML header. R Markdown supports many types output formats.metadata specified YAML header controls output. single RMarkdown document can support many output formats. two types output formats rmarkdown package: documents, presentations. available formats listed :beamer_presentationbeamer_presentationcontext_documentcontext_documentgithub_documentgithub_documenthtml_documenthtml_documentioslides_presentationioslides_presentationlatex_documentlatex_documentmd_documentmd_documentodt_documentodt_documentpdf_documentpdf_documentpowerpoint_presentationpowerpoint_presentationrtf_documentrtf_documentslidy_presentationslidy_presentationword_documentword_documentMore details https://bookdown.org/yihui/rmarkdown/documents.html#documents https://bookdown.org/yihui/rmarkdown/presentations.html#presentations. output formats provided extension packages. output format names YAML metadata Rmd file, need include package name format extension package, e.g.,format rmarkdown package, need rmarkdown:: prefix (although hurt).packages provide even output formats:bookdown package, https://github.com/rstudio/bookdown, makes easy write books, like one. learn , read Authoring Books R Markdown, Yihui Xie, , course, written bookdown. Visit <http://www.bookdown.org> see bookdown books written wider R community.bookdown package, https://github.com/rstudio/bookdown, makes easy write books, like one. learn , read Authoring Books R Markdown, Yihui Xie, , course, written bookdown. Visit <http://www.bookdown.org> see bookdown books written wider R community.prettydoc package, https://github.com/yixuan/prettydoc/, provides lightweight document formats range attractive themes.prettydoc package, https://github.com/yixuan/prettydoc/, provides lightweight document formats range attractive themes.rticles package, https://github.com/rstudio/rticles, compiles selection formats tailored specific scientific journals.rticles package, https://github.com/rstudio/rticles, compiles selection formats tailored specific scientific journals.See http://rmarkdown.rstudio.com/formats.html list even formats. Also see R Markdown Theme Gallery.","code":"output: tufte::tufte_html"},{"path":"rmarkdown.html","id":"further-topics-and-links","chapter":"3 RMarkdown","heading":"3.6 Further topics and links","text":"Word documentshttps://bookdown.org/yihui/rmarkdown-cookbook/word.htmlhttps://rmarkdown.rstudio.com/articles_docx.htmlBibliographyhttps://bookdown.org/yihui/rmarkdown-cookbook/bibliography.htmlCitation Style Language - Style RepositoryCross-referencing within documentshttps://bookdown.org/yihui/rmarkdown-cookbook/cross-ref.htmlCreate diagramshttps://bookdown.org/yihui/rmarkdown-cookbook/diagrams.html","code":""},{"path":"rmarkdown.html","id":"additional-resources","chapter":"3 RMarkdown","heading":"3.7 Additional Resources","text":"R Markdown Cookbook\ncomprehensive free online book contains almost everything need know RMarkdown.RMarkdown ScientistsRStudio Articles RMarkdown\nRStudio published -depth articles using RMarkdown.R Data Science\nHadley Wickham provides great overview authoring RMarkdown.R Markdown: Definitive Guide\ncontains large number technical details, may serve better reference book textbook.Online lesson RStudioR Markdown Cheatsheet. RStudio published numerous cheatsheets working R, including detailed cheatsheet using R Markdown! R Markdown cheatsheet can accessed within RStudio selecting Help > Cheatsheets > R Markdown Cheat Sheet.","code":""},{"path":"advanced-data-manipulation.html","id":"advanced-data-manipulation","chapter":"4 Advanced data manipulation","heading":"4 Advanced data manipulation","text":"chapter focuses exclusively advanced data manipulation. therefore assume basic level comfort data manipulation.","code":""},{"path":"advanced-data-manipulation.html","id":"br-import","chapter":"4 Advanced data manipulation","heading":"4.1 Importing data","text":"data used analysis found outside world needs imported R. Data comes different formats.Delimited text files common way transferring data systems general. files store tabular data using special characters (known delimiters) indicate rows columns. delimiters include commas, tabs, space, semicolons (;), pipes (|), etc. function read.table() used read delimited text files. accepts argument, file path file returns output data frame.Delimited text files common way transferring data systems general. files store tabular data using special characters (known delimiters) indicate rows columns. delimiters include commas, tabs, space, semicolons (;), pipes (|), etc. function read.table() used read delimited text files. accepts argument, file path file returns output data frame.Binary files complex plain text files accessing information binary files requires use special software. examples binary files frequently see include Microsoft Excel spreadsheets, SAS data sets, Stata data sets, SPSS data set. foreign package contains functions may used import SAS data sets Stata data sets, installed default install R computer. can use readxl package import Microsoft Excel files, haven package import SAS Stata data sets. aren’t going use packages chapter. Instead, ’re going use best rio package import data examples .Binary files complex plain text files accessing information binary files requires use special software. examples binary files frequently see include Microsoft Excel spreadsheets, SAS data sets, Stata data sets, SPSS data set. foreign package contains functions may used import SAS data sets Stata data sets, installed default install R computer. can use readxl package import Microsoft Excel files, haven package import SAS Stata data sets. aren’t going use packages chapter. Instead, ’re going use best rio package import data examples .","code":"\n# Description of gapminder:\n# help(gapminder, package = \"gapminder\")\n\n# importing the gapminder dataset - Delimited text files - ANSI (CP1250)\ngapminder_cp1250 <- read.table(file = \"data/gapminder_ext_CP1250.txt\", header = T, sep = \"\\t\", dec = \",\", quote = \"\\\"\", fileEncoding = \"latin2\")\n\n# importing the gapminder dataset - Delimited text files - UTF-8\ngapminder_utf8 <- read.table(file = \"data/gapminder_ext_UTF-8.txt\", header = T, sep = \"\\t\", dec = \",\", quote = \"\\\"\", fileEncoding = \"UTF-8\")\n\n# importing the gapminder dataset - Binary files\nlibrary(rio)\ngapminder_xlsx <- import(file = \"data/gapminder_ext.xlsx\")\n\n# checking class\nclass(gapminder_xlsx)\n#> [1] \"data.frame\""},{"path":"advanced-data-manipulation.html","id":"import-files-directly-from-the-web","chapter":"4 Advanced data manipulation","heading":"4.1.1 Import files directly from the web","text":"functions read.table() rio::import() accept URL place dataset downloads dataset directly.","code":"\n# NCHS - Death rates and life expectancy at birth: \n# https://data.cdc.gov/NCHS/NCHS-Death-rates-and-life-expectancy-at-birth/w9j2-ggv5\n\n# storing URL\ndata_url <- 'https://data.cdc.gov/api/views/w9j2-ggv5/rows.csv?accessType=DOWNLOAD'\n\n# reading in data from the URL - Delimited text file\nlife_expectancy <- read.table(data_url, header = T, sep = \",\", dec = \".\")\n\nhead(life_expectancy, 3)\n#>   Year      Race        Sex Average.Life.Expectancy..Years.\n#> 1 1900 All Races Both Sexes                            47.3\n#> 2 1901 All Races Both Sexes                            49.1\n#> 3 1902 All Races Both Sexes                            51.5\n#>   Age.adjusted.Death.Rate\n#> 1                  2518.0\n#> 2                  2473.1\n#> 3                  2301.3\nnrow(life_expectancy)\n#> [1] 1071\n\n\n# Description of Potthoff-Roy data: \n# help(potthoffroy, package = \"mice\")\n\n# storing URL\ndata_url <- \"https://raw.github.com/abarik/rdata/master/r_alapok/pothoff2.xlsx\"\nlibrary(rio)\npothoff <- import(file = data_url)\nstr(pothoff)\n#> 'data.frame':    108 obs. of  5 variables:\n#>  $ person: num  1 1 1 1 2 2 2 2 3 3 ...\n#>  $ sex   : chr  \"F\" \"F\" \"F\" \"F\" ...\n#>  $ age   : num  8 10 12 14 8 10 12 14 8 10 ...\n#>  $ y     : num  21 20 21.5 23 21 21.5 24 25.5 20.5 24 ...\n#>  $ agefac: num  8 10 12 14 8 10 12 14 8 10 ..."},{"path":"advanced-data-manipulation.html","id":"br-export","chapter":"4 Advanced data manipulation","heading":"4.2 Exporting data","text":"function write.table() used export data delimited text file. function rio::export() used export data worksheets Excel file (binary file). type binary file depend extension given file name.","code":"\n# exporting the gapminder dataset - Delimited text files - ANSI (CP1250)\nwrite.table(x = gapminder_xlsx, file = \"output/data/gapminder_CP1250.csv\", quote = F, sep = \";\", dec = \",\", row.names = F, fileEncoding = \"latin2\")\n\n# exporting the gapminder dataset - Delimited text files - UTF-8\nwrite.table(x = gapminder_xlsx, file = \"output/data/gapminder_UTF-8.csv\", quote = F, sep = \";\", dec = \",\", row.names = F, fileEncoding = \"UTF-8\")\n\n# exporting the gapminder dataset - Binary files\nlibrary(rio)\nexport(x = gapminder_xlsx, file = \"output/data/gapminder.xlsx\", overwrite = T)\nexport(x = gapminder_xlsx, file = \"output/data/gapminder.sav\")"},{"path":"advanced-data-manipulation.html","id":"br-inspect","chapter":"4 Advanced data manipulation","heading":"4.3 Inspecting a data frame","text":"use following functions inspect data frame:dim() returns dimensionsnrow() returns number rowsncol() returns number columnsstr() returns column names data types plus first valueshead() returns first six rows default can changed using argument ntail() returns last six rows default can changed using argument n","code":"\ndim(gapminder_xlsx)\n#> [1] 1704    8\nnrow(gapminder_xlsx)\n#> [1] 1704\nncol(gapminder_xlsx)\n#> [1] 8\nstr(gapminder_xlsx)\n#> 'data.frame':    1704 obs. of  8 variables:\n#>  $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n#>  $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n#>  $ year         : num  1952 1957 1962 1967 1972 ...\n#>  $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n#>  $ pop          : num  8425333 9240934 10267083 11537966 13079460 ...\n#>  $ gdpPercap    : num  779 821 853 836 740 ...\n#>  $ country_hun  : chr  \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" ...\n#>  $ continent_hun: chr  \"Ázsia\" \"Ázsia\" \"Ázsia\" \"Ázsia\" ...\nhead(gapminder_xlsx)\n#>       country continent year lifeExp      pop gdpPercap\n#> 1 Afghanistan      Asia 1952  28.801  8425333  779.4453\n#> 2 Afghanistan      Asia 1957  30.332  9240934  820.8530\n#> 3 Afghanistan      Asia 1962  31.997 10267083  853.1007\n#> 4 Afghanistan      Asia 1967  34.020 11537966  836.1971\n#> 5 Afghanistan      Asia 1972  36.088 13079460  739.9811\n#> 6 Afghanistan      Asia 1977  38.438 14880372  786.1134\n#>   country_hun continent_hun\n#> 1 Afganisztán         Ázsia\n#> 2 Afganisztán         Ázsia\n#> 3 Afganisztán         Ázsia\n#> 4 Afganisztán         Ázsia\n#> 5 Afganisztán         Ázsia\n#> 6 Afganisztán         Ázsia\ntail(gapminder_xlsx, n = 4)\n#>       country continent year lifeExp      pop gdpPercap\n#> 1701 Zimbabwe    Africa 1992  60.377 10704340  693.4208\n#> 1702 Zimbabwe    Africa 1997  46.809 11404948  792.4500\n#> 1703 Zimbabwe    Africa 2002  39.989 11926563  672.0386\n#> 1704 Zimbabwe    Africa 2007  43.487 12311143  469.7093\n#>      country_hun continent_hun\n#> 1701    Zimbabwe        Afrika\n#> 1702    Zimbabwe        Afrika\n#> 1703    Zimbabwe        Afrika\n#> 1704    Zimbabwe        Afrika"},{"path":"advanced-data-manipulation.html","id":"manipulating-columns","chapter":"4 Advanced data manipulation","heading":"4.4 Manipulating Columns","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"changing-column-type","chapter":"4 Advanced data manipulation","heading":"4.4.1 Changing column type","text":"importing data, column types can changed assigning new data types .","code":"\nstr(gapminder_xlsx)\n#> 'data.frame':    1704 obs. of  8 variables:\n#>  $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n#>  $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n#>  $ year         : num  1952 1957 1962 1967 1972 ...\n#>  $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n#>  $ pop          : num  8425333 9240934 10267083 11537966 13079460 ...\n#>  $ gdpPercap    : num  779 821 853 836 740 ...\n#>  $ country_hun  : chr  \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" ...\n#>  $ continent_hun: chr  \"Ázsia\" \"Ázsia\" \"Ázsia\" \"Ázsia\" ...\n\n# changing column type\ngapminder_xlsx$country <- factor(gapminder_xlsx$country)\ngapminder_xlsx$continent <- factor(gapminder_xlsx$continent)\ngapminder_xlsx$country_hun <- factor(gapminder_xlsx$country_hun)\ngapminder_xlsx$continent_hun <- factor(gapminder_xlsx$continent_hun)\n\nstr(gapminder_xlsx)\n#> 'data.frame':    1704 obs. of  8 variables:\n#>  $ country      : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n#>  $ continent    : Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n#>  $ year         : num  1952 1957 1962 1967 1972 ...\n#>  $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n#>  $ pop          : num  8425333 9240934 10267083 11537966 13079460 ...\n#>  $ gdpPercap    : num  779 821 853 836 740 ...\n#>  $ country_hun  : Factor w/ 142 levels \"Afganisztán\",..: 1 1 1 1 1 1 1 1 1 1 ...\n#>  $ continent_hun: Factor w/ 5 levels \"Afrika\",\"Amerika\",..: 3 3 3 3 3 3 3 3 3 3 ..."},{"path":"advanced-data-manipulation.html","id":"br-col-names","chapter":"4 Advanced data manipulation","heading":"4.4.2 Renaming columns","text":"importing data, columns can renamed assigning new names .","code":"\nnames(gapminder_utf8)\n#> [1] \"country\"       \"continent\"     \"year\"         \n#> [4] \"lifeExp\"       \"pop\"           \"gdpPercap\"    \n#> [7] \"country_hun\"   \"continent_hun\"\nnames(gapminder_utf8)[1] <- \"orszag\"\nnames(gapminder_utf8)[2] <- \"kontinens\"\nnames(gapminder_utf8)\n#> [1] \"orszag\"        \"kontinens\"     \"year\"         \n#> [4] \"lifeExp\"       \"pop\"           \"gdpPercap\"    \n#> [7] \"country_hun\"   \"continent_hun\"\n\nnames(gapminder_utf8)\n#> [1] \"orszag\"        \"kontinens\"     \"year\"         \n#> [4] \"lifeExp\"       \"pop\"           \"gdpPercap\"    \n#> [7] \"country_hun\"   \"continent_hun\"\nnames(gapminder_utf8)[7:8] <- c(\"orszag_hun\", \"kontinens_hun\")\nnames(gapminder_utf8)\n#> [1] \"orszag\"        \"kontinens\"     \"year\"         \n#> [4] \"lifeExp\"       \"pop\"           \"gdpPercap\"    \n#> [7] \"orszag_hun\"    \"kontinens_hun\""},{"path":"advanced-data-manipulation.html","id":"br-changing","chapter":"4 Advanced data manipulation","heading":"4.4.3 Insert and derive new columns","text":"","code":"\n# Here's a data set of 1,000 most popular movies on IMDB in the last 10 years. \n# https://www.kaggle.com/PromptCloudHQ/imdb-data/version/1\nmov <- read.table(file = \"data/IMDB-Movie-Data.csv\", header = T, sep = \",\", dec = \".\", fileEncoding = \"UTF-8\", quote = \"\\\"\",\n                  comment.char = \"\")\nstr(mov)\n#> 'data.frame':    1000 obs. of  12 variables:\n#>  $ Rank              : int  1 2 3 4 5 6 7 8 9 10 ...\n#>  $ Title             : chr  \"Guardians of the Galaxy\" \"Prometheus\" \"Split\" \"Sing\" ...\n#>  $ Genre             : chr  \"Action,Adventure,Sci-Fi\" \"Adventure,Mystery,Sci-Fi\" \"Horror,Thriller\" \"Animation,Comedy,Family\" ...\n#>  $ Description       : chr  \"A group of intergalactic criminals are forced to work together to stop a fanatical warrior from taking control \"| __truncated__ \"Following clues to the origin of mankind, a team finds a structure on a distant moon, but they soon realize the\"| __truncated__ \"Three girls are kidnapped by a man with a diagnosed 23 distinct personalities. They must try to escape before t\"| __truncated__ \"In a city of humanoid animals, a hustling theater impresario's attempt to save his theater with a singing compe\"| __truncated__ ...\n#>  $ Director          : chr  \"James Gunn\" \"Ridley Scott\" \"M. Night Shyamalan\" \"Christophe Lourdelet\" ...\n#>  $ Actors            : chr  \"Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana\" \"Noomi Rapace, Logan Marshall-Green, Michael Fassbender, Charlize Theron\" \"James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula\" \"Matthew McConaughey,Reese Witherspoon, Seth MacFarlane, Scarlett Johansson\" ...\n#>  $ Year              : int  2014 2012 2016 2016 2016 2016 2016 2016 2016 2016 ...\n#>  $ Runtime..Minutes. : int  121 124 117 108 123 103 128 89 141 116 ...\n#>  $ Rating            : num  8.1 7 7.3 7.2 6.2 6.1 8.3 6.4 7.1 7 ...\n#>  $ Votes             : int  757074 485820 157606 60545 393727 56036 258682 2490 7188 192177 ...\n#>  $ Revenue..Millions.: num  333 126 138 270 325 ...\n#>  $ Metascore         : int  76 65 62 59 40 42 93 71 78 41 ...\nnames(mov) <- c('Rank', 'Title', 'Genre', 'Description', 'Director', 'Actors', 'Year', \n                'Runtime', 'Rating', 'Votes', 'Revenue', 'Metascore')"},{"path":"advanced-data-manipulation.html","id":"inserting-a-new-column","chapter":"4 Advanced data manipulation","heading":"4.4.3.1 Inserting a new column","text":"insert new column, index data frame new column name assign values.","code":"\n# adding a new column known as example\nmovies <- mov[,c(2, 7, 11, 12)]\nset.seed(123)\nmovies$Example <- sample(x = 1000)\nhead(movies)\n#>                     Title Year Revenue Metascore Example\n#> 1 Guardians of the Galaxy 2014  333.13        76     415\n#> 2              Prometheus 2012  126.46        65     463\n#> 3                   Split 2016  138.12        62     179\n#> 4                    Sing 2016  270.32        59     526\n#> 5           Suicide Squad 2016  325.02        40     195\n#> 6          The Great Wall 2016   45.13        42     938"},{"path":"advanced-data-manipulation.html","id":"duplicating-a-column","chapter":"4 Advanced data manipulation","heading":"4.4.3.2 Duplicating a column","text":"Duplicating column like inserting new one. simply select assign new name.","code":"\nmovies <- mov[, c(2, 7, 11, 12)]\nmovies$Metascore.2 <- movies$Metascore\nhead(movies)\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n#> 4                    Sing 2016  270.32        59\n#> 5           Suicide Squad 2016  325.02        40\n#> 6          The Great Wall 2016   45.13        42\n#>   Metascore.2\n#> 1          76\n#> 2          65\n#> 3          62\n#> 4          59\n#> 5          40\n#> 6          42"},{"path":"advanced-data-manipulation.html","id":"deriving-a-new-column-from-an-existing-one","chapter":"4 Advanced data manipulation","heading":"4.4.3.3 Deriving a new column from an existing one","text":"","code":"\nmovies <- mov[, c(2, 7, 9, 12)]\nmovies$Movie.Class <- \ncut(movies$Rating, \n    breaks = c(0, 5.5, 6.5, 7, 7.5, 10), \n    labels = c(\"Very Low\", \"Low\", \"Moderate\", \"High\", \"Very High\"))\nhead(movies)\n#>                     Title Year Rating Metascore Movie.Class\n#> 1 Guardians of the Galaxy 2014    8.1        76   Very High\n#> 2              Prometheus 2012    7.0        65    Moderate\n#> 3                   Split 2016    7.3        62        High\n#> 4                    Sing 2016    7.2        59        High\n#> 5           Suicide Squad 2016    6.2        40         Low\n#> 6          The Great Wall 2016    6.1        42         Low\n\n# plotting the new column\nplot(movies$Movie.Class)"},{"path":"advanced-data-manipulation.html","id":"deriving-a-new-column-from-a-calculation","chapter":"4 Advanced data manipulation","heading":"4.4.3.4 Deriving a new column from a calculation","text":"","code":"\nmovies <- mov[, c(2, 5, 7, 8, 11)]\nmovies$Rev.Run <- round(movies$Revenue/movies$Runtime, 2)\nhead(movies)\n#>                     Title             Director Year Runtime\n#> 1 Guardians of the Galaxy           James Gunn 2014     121\n#> 2              Prometheus         Ridley Scott 2012     124\n#> 3                   Split   M. Night Shyamalan 2016     117\n#> 4                    Sing Christophe Lourdelet 2016     108\n#> 5           Suicide Squad           David Ayer 2016     123\n#> 6          The Great Wall          Yimou Zhang 2016     103\n#>   Revenue Rev.Run\n#> 1  333.13    2.75\n#> 2  126.46    1.02\n#> 3  138.12    1.18\n#> 4  270.32    2.50\n#> 5  325.02    2.64\n#> 6   45.13    0.44"},{"path":"advanced-data-manipulation.html","id":"updating-a-column","chapter":"4 Advanced data manipulation","heading":"4.4.3.5 Updating a column","text":"","code":"\nmovies <- mov[,c(2, 5, 7, 9, 11, 12)]\nmovies$Director <- toupper(movies$Director)\nmovies$Title <- tolower(movies$Title)\nhead(movies)\n#>                     Title             Director Year Rating\n#> 1 guardians of the galaxy           JAMES GUNN 2014    8.1\n#> 2              prometheus         RIDLEY SCOTT 2012    7.0\n#> 3                   split   M. NIGHT SHYAMALAN 2016    7.3\n#> 4                    sing CHRISTOPHE LOURDELET 2016    7.2\n#> 5           suicide squad           DAVID AYER 2016    6.2\n#> 6          the great wall          YIMOU ZHANG 2016    6.1\n#>   Revenue Metascore\n#> 1  333.13        76\n#> 2  126.46        65\n#> 3  138.12        62\n#> 4  270.32        59\n#> 5  325.02        40\n#> 6   45.13        42"},{"path":"advanced-data-manipulation.html","id":"sorting-and-ranking","chapter":"4 Advanced data manipulation","heading":"4.4.4 Sorting and ranking","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"br-sort","chapter":"4 Advanced data manipulation","heading":"4.4.4.1 Sorting a data frame","text":"order() function used sort data frame. takes column returns indices ascending order. reverse , use decreasing = TRUE. indices sorted, used index data frame. function order() also works character columns well multiple columns.default, NA values appear end sorted column, can changed setting na.last = FALSE appear first.","code":"\n# sorting by revenue\nmovies <- mov[, c(2, 7, 11, 12)]\nmovies_ordered <- movies[order(movies$Revenue),]\nhead(movies_ordered)\n#>                Title Year Revenue Metascore\n#> 232 A Kind of Murder 2016    0.00        50\n#> 28        Dead Awake 2016    0.01        NA\n#> 69         Wakefield 2016    0.01        61\n#> 322         Lovesong 2016    0.01        74\n#> 678      Love, Rosie 2014    0.01        44\n#> 962  Into the Forest 2015    0.01        59\ntail(movies_ordered)\n#>                              Title Year Revenue Metascore\n#> 977                    Dark Places 2015      NA        39\n#> 978                  Amateur Night 2016      NA        38\n#> 979 It's Only the End of the World 2016      NA        48\n#> 989                        Martyrs 2008      NA        89\n#> 996           Secret in Their Eyes 2015      NA        45\n#> 999                   Search Party 2014      NA        22\n\n# sort decreasing\nmovies_ordered <- movies[order(movies$Revenue, decreasing = T),]\nhead(movies_ordered)\n#>                                         Title Year Revenue\n#> 51 Star Wars: Episode VII - The Force Awakens 2015  936.63\n#> 88                                     Avatar 2009  760.51\n#> 86                             Jurassic World 2015  652.18\n#> 77                               The Avengers 2012  623.28\n#> 55                            The Dark Knight 2008  533.32\n#> 13                                  Rogue One 2016  532.17\n#>    Metascore\n#> 51        81\n#> 88        83\n#> 86        59\n#> 77        69\n#> 55        82\n#> 13        65\ntail(movies_ordered)\n#>                              Title Year Revenue Metascore\n#> 977                    Dark Places 2015      NA        39\n#> 978                  Amateur Night 2016      NA        38\n#> 979 It's Only the End of the World 2016      NA        48\n#> 989                        Martyrs 2008      NA        89\n#> 996           Secret in Their Eyes 2015      NA        45\n#> 999                   Search Party 2014      NA        22\n\n# sort decreasing using the negative sign\nmovies_ordered <- movies[order(-movies$Revenue),]\nhead(movies_ordered)\n#>                                         Title Year Revenue\n#> 51 Star Wars: Episode VII - The Force Awakens 2015  936.63\n#> 88                                     Avatar 2009  760.51\n#> 86                             Jurassic World 2015  652.18\n#> 77                               The Avengers 2012  623.28\n#> 55                            The Dark Knight 2008  533.32\n#> 13                                  Rogue One 2016  532.17\n#>    Metascore\n#> 51        81\n#> 88        83\n#> 86        59\n#> 77        69\n#> 55        82\n#> 13        65\ntail(movies_ordered)\n#>                              Title Year Revenue Metascore\n#> 977                    Dark Places 2015      NA        39\n#> 978                  Amateur Night 2016      NA        38\n#> 979 It's Only the End of the World 2016      NA        48\n#> 989                        Martyrs 2008      NA        89\n#> 996           Secret in Their Eyes 2015      NA        45\n#> 999                   Search Party 2014      NA        22\n# placing NA at the beginning\nmovies_ordered <- movies[order(movies$Revenue, na.last = FALSE),]\nhead(movies_ordered)\n#>                      Title Year Revenue Metascore\n#> 8                 Mindhorn 2016      NA        71\n#> 23          Hounds of Love 2016      NA        72\n#> 26         Paris pieds nus 2016      NA        NA\n#> 40               5- 25- 77 2007      NA        NA\n#> 43 Don't Fuck in the Woods 2016      NA        NA\n#> 48                  Fallen 2016      NA        NA\ntail(movies_ordered)\n#>                                         Title Year Revenue\n#> 13                                  Rogue One 2016  532.17\n#> 55                            The Dark Knight 2008  533.32\n#> 77                               The Avengers 2012  623.28\n#> 86                             Jurassic World 2015  652.18\n#> 88                                     Avatar 2009  760.51\n#> 51 Star Wars: Episode VII - The Force Awakens 2015  936.63\n#>    Metascore\n#> 13        65\n#> 55        82\n#> 77        69\n#> 86        59\n#> 88        83\n#> 51        81\n\n# sorting on multiple columns\nmovies_ordered <- movies[order(movies$Metascore, movies$Revenue, decreasing = T),]\nhead(movies_ordered, 10)\n#>                     Title Year Revenue Metascore\n#> 657               Boyhood 2014   25.36       100\n#> 42              Moonlight 2016   27.85        99\n#> 231       Pan's Labyrinth 2006   37.62        98\n#> 510               Gravity 2013  274.08        96\n#> 490           Ratatouille 2007  206.44        96\n#> 112      12 Years a Slave 2013   56.67        96\n#> 22  Manchester by the Sea 2016   47.70        96\n#> 325    The Social Network 2010   96.92        95\n#> 407      Zero Dark Thirty 2012   95.72        95\n#> 502                 Carol 2015    0.25        95"},{"path":"advanced-data-manipulation.html","id":"ranking","chapter":"4 Advanced data manipulation","heading":"4.4.4.2 Ranking","text":"function rank() ranks column values. ascending order can reversed placing negative sign front ranking column decreasing argument case order() function.decreasing argument rank(), hence chance performing decreasing rank use negative sign.","code":"\n# returning ranks by revenue\nrank(movies$Revenue)[1:10]\n#>  [1] 841 678 702 819 839 419 724 873 182 623\n\n# adding a rank to the data frame\nmovies <- mov[, c(2, 7, 11, 12)]\nmovies$Ranking <- rank(movies$Revenue)\nhead(movies)\n#>                     Title Year Revenue Metascore Ranking\n#> 1 Guardians of the Galaxy 2014  333.13        76     841\n#> 2              Prometheus 2012  126.46        65     678\n#> 3                   Split 2016  138.12        62     702\n#> 4                    Sing 2016  270.32        59     819\n#> 5           Suicide Squad 2016  325.02        40     839\n#> 6          The Great Wall 2016   45.13        42     419\n\n# sorting by rank\nmovies <- mov[, c(2, 7, 11, 12)]\nmovies$Ranking <- rank(movies$Revenue)\nmovies <- movies[order(movies$Ranking), ]\nhead(movies)\n#>                Title Year Revenue Metascore Ranking\n#> 232 A Kind of Murder 2016    0.00        50       1\n#> 28        Dead Awake 2016    0.01        NA       4\n#> 69         Wakefield 2016    0.01        61       4\n#> 322         Lovesong 2016    0.01        74       4\n#> 678      Love, Rosie 2014    0.01        44       4\n#> 962  Into the Forest 2015    0.01        59       4\n\n# placing NA values at the beginning\nmovies <- mov[, c(2, 7, 11, 12)]\nmovies$Ranking <- rank(movies$Revenue, na.last = F)\nmovies <- movies[order(movies$Ranking), ]\nhead(movies)\n#>                      Title Year Revenue Metascore Ranking\n#> 8                 Mindhorn 2016      NA        71       1\n#> 23          Hounds of Love 2016      NA        72       2\n#> 26         Paris pieds nus 2016      NA        NA       3\n#> 40               5- 25- 77 2007      NA        NA       4\n#> 43 Don't Fuck in the Woods 2016      NA        NA       5\n#> 48                  Fallen 2016      NA        NA       6\n# performing a decreasing rank\nmovies <- mov[, c(2, 7, 8, 11)]\nmovies$Ranking <- rank(-movies$Revenue)\nmovies <- movies[order(movies$Ranking), ]\nhead(movies)\n#>                                         Title Year Runtime\n#> 51 Star Wars: Episode VII - The Force Awakens 2015     136\n#> 88                                     Avatar 2009     162\n#> 86                             Jurassic World 2015     124\n#> 77                               The Avengers 2012     143\n#> 55                            The Dark Knight 2008     152\n#> 13                                  Rogue One 2016     133\n#>    Revenue Ranking\n#> 51  936.63       1\n#> 88  760.51       2\n#> 86  652.18       3\n#> 77  623.28       4\n#> 55  533.32       5\n#> 13  532.17       6"},{"path":"advanced-data-manipulation.html","id":"splitting-and-merging-columns","chapter":"4 Advanced data manipulation","heading":"4.4.5 Splitting and Merging columns","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"splitting-columns","chapter":"4 Advanced data manipulation","heading":"4.4.5.1 Splitting columns","text":"split data frame, followingselect column concerned pass function strsplit() together string split . return listusing function .call('rbind', dfs) convert list data framerename columns new data framefinally using cbind(), combine new data frame original one","code":"\n# Airports are ranked by travellers and experts based on various measures.\n# https://www.kaggle.com/jonahmary17/airports\n\n# reading data\nbusiestAirports <- read.table(file = \"data/busiestAirports.csv\", \n                              header = T, \n                              sep=\",\", \n                              dec = \".\", \n                              quote = \"\\\"\")\n\nbusiestAirports <- busiestAirports[-c(1, 2, 3, 4, 8)]\nhead(busiestAirports, 3)\n#>   code.iata.icao.                 location\n#> 1        ATL/KATL         Atlanta, Georgia\n#> 2        PEK/ZBAA Chaoyang-Shunyi, Beijing\n#> 3        DXB/OMDB           Garhoud, Dubai\n#>                country\n#> 1        United States\n#> 2                China\n#> 3 United Arab Emirates\n\n# splitting column\nstrsplit(busiestAirports$code.iata.icao.,'/')[1:3]\n#> [[1]]\n#> [1] \"ATL\"  \"KATL\"\n#> \n#> [[2]]\n#> [1] \"PEK\"  \"ZBAA\"\n#> \n#> [[3]]\n#> [1] \"DXB\"  \"OMDB\"\n\n# converting to a data frame\niata_icao <- \ndata.frame(do.call('rbind', strsplit(busiestAirports$code.iata.icao., '/')))\nhead(iata_icao, 3)\n#>    X1   X2\n#> 1 ATL KATL\n#> 2 PEK ZBAA\n#> 3 DXB OMDB\n\n# renaming columns\nnames(iata_icao) <- c('iata', 'icao')\nhead(iata_icao, 3)\n#>   iata icao\n#> 1  ATL KATL\n#> 2  PEK ZBAA\n#> 3  DXB OMDB\n\n# combining both data frames\nbusiest_Airports <- cbind(busiestAirports[-1], iata_icao)\nhead(busiest_Airports)\n#>                   location              country iata icao\n#> 1         Atlanta, Georgia        United States  ATL KATL\n#> 2 Chaoyang-Shunyi, Beijing                China  PEK ZBAA\n#> 3           Garhoud, Dubai United Arab Emirates  DXB OMDB\n#> 4  Los Angeles, California        United States  LAX KLAX\n#> 5               Ota, Tokyo                Japan  HND RJTT\n#> 6        Chicago, Illinois        United States  ORD KORD"},{"path":"advanced-data-manipulation.html","id":"merging-columns","chapter":"4 Advanced data manipulation","heading":"4.4.5.2 Merging columns","text":"function paste() used merge columns.","code":"\n# merging iata and icao into iata_icao\nbusiest_Airports$iata_icao <- \npaste(busiest_Airports$iata, busiest_Airports$icao, sep = '-')\nhead(busiest_Airports)\n#>                   location              country iata icao\n#> 1         Atlanta, Georgia        United States  ATL KATL\n#> 2 Chaoyang-Shunyi, Beijing                China  PEK ZBAA\n#> 3           Garhoud, Dubai United Arab Emirates  DXB OMDB\n#> 4  Los Angeles, California        United States  LAX KLAX\n#> 5               Ota, Tokyo                Japan  HND RJTT\n#> 6        Chicago, Illinois        United States  ORD KORD\n#>   iata_icao\n#> 1  ATL-KATL\n#> 2  PEK-ZBAA\n#> 3  DXB-OMDB\n#> 4  LAX-KLAX\n#> 5  HND-RJTT\n#> 6  ORD-KORD"},{"path":"advanced-data-manipulation.html","id":"br-filter-cols","chapter":"4 Advanced data manipulation","heading":"4.5 Selecting columns","text":"function subset() [ used select columns.","code":"\nhead(gapminder_cp1250[, c(1, 3)])\n#>       country year\n#> 1 Afghanistan 1952\n#> 2 Afghanistan 1957\n#> 3 Afghanistan 1962\n#> 4 Afghanistan 1967\n#> 5 Afghanistan 1972\n#> 6 Afghanistan 1977\nhead(gapminder_cp1250[, c(\"country\", \"gdpPercap\")])\n#>       country gdpPercap\n#> 1 Afghanistan  779.4453\n#> 2 Afghanistan  820.8530\n#> 3 Afghanistan  853.1007\n#> 4 Afghanistan  836.1971\n#> 5 Afghanistan  739.9811\n#> 6 Afghanistan  786.1134\nhead(subset(gapminder_cp1250, select = c(\"country\", \"gdpPercap\")))\n#>       country gdpPercap\n#> 1 Afghanistan  779.4453\n#> 2 Afghanistan  820.8530\n#> 3 Afghanistan  853.1007\n#> 4 Afghanistan  836.1971\n#> 5 Afghanistan  739.9811\n#> 6 Afghanistan  786.1134"},{"path":"advanced-data-manipulation.html","id":"deleting-columns","chapter":"4 Advanced data manipulation","heading":"4.6 Deleting columns","text":"special function delete columns [ NULL can used drop unwanted columns.","code":"\nstr(gapminder_cp1250)\n#> 'data.frame':    1704 obs. of  8 variables:\n#>  $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n#>  $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n#>  $ year         : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n#>  $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n#>  $ pop          : int  8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n#>  $ gdpPercap    : num  779 821 853 836 740 ...\n#>  $ country_hun  : chr  \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" ...\n#>  $ continent_hun: chr  \"Ázsia\" \"Ázsia\" \"Ázsia\" \"Ázsia\" ...\ngapminder_cp1250$pop <- NULL\nstr(gapminder_cp1250)\n#> 'data.frame':    1704 obs. of  7 variables:\n#>  $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n#>  $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n#>  $ year         : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n#>  $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n#>  $ gdpPercap    : num  779 821 853 836 740 ...\n#>  $ country_hun  : chr  \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" ...\n#>  $ continent_hun: chr  \"Ázsia\" \"Ázsia\" \"Ázsia\" \"Ázsia\" ...\n\nstr(gapminder_cp1250)\n#> 'data.frame':    1704 obs. of  7 variables:\n#>  $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n#>  $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n#>  $ year         : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n#>  $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n#>  $ gdpPercap    : num  779 821 853 836 740 ...\n#>  $ country_hun  : chr  \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" ...\n#>  $ continent_hun: chr  \"Ázsia\" \"Ázsia\" \"Ázsia\" \"Ázsia\" ...\ngapminder_cp1250 <- gapminder_cp1250[, c(1, 2, 5, 6)]\nstr(gapminder_cp1250)\n#> 'data.frame':    1704 obs. of  4 variables:\n#>  $ country    : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n#>  $ continent  : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n#>  $ gdpPercap  : num  779 821 853 836 740 ...\n#>  $ country_hun: chr  \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" \"Afganisztán\" ..."},{"path":"advanced-data-manipulation.html","id":"manipulating-rows","chapter":"4 Advanced data manipulation","heading":"4.7 Manipulating Rows","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"br-row-names","chapter":"4 Advanced data manipulation","heading":"4.7.1 Renaming rows","text":"importing data, rows can renamed assigning new names .","code":"\nrownames(gapminder_utf8)[1:6]\n#> [1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\nrownames(gapminder_utf8) <- paste0(\"RN-\", 1:nrow(gapminder_utf8))\nhead(gapminder_utf8)\n#>           orszag kontinens year lifeExp      pop gdpPercap\n#> RN-1 Afghanistan      Asia 1952  28.801  8425333  779.4453\n#> RN-2 Afghanistan      Asia 1957  30.332  9240934  820.8530\n#> RN-3 Afghanistan      Asia 1962  31.997 10267083  853.1007\n#> RN-4 Afghanistan      Asia 1967  34.020 11537966  836.1971\n#> RN-5 Afghanistan      Asia 1972  36.088 13079460  739.9811\n#> RN-6 Afghanistan      Asia 1977  38.438 14880372  786.1134\n#>       orszag_hun kontinens_hun\n#> RN-1 Afganisztán         Ázsia\n#> RN-2 Afganisztán         Ázsia\n#> RN-3 Afganisztán         Ázsia\n#> RN-4 Afganisztán         Ázsia\n#> RN-5 Afganisztán         Ázsia\n#> RN-6 Afganisztán         Ázsia\nrownames(gapminder_utf8) <- 1:nrow(gapminder_utf8) # reset row names\nhead(gapminder_utf8)\n#>        orszag kontinens year lifeExp      pop gdpPercap\n#> 1 Afghanistan      Asia 1952  28.801  8425333  779.4453\n#> 2 Afghanistan      Asia 1957  30.332  9240934  820.8530\n#> 3 Afghanistan      Asia 1962  31.997 10267083  853.1007\n#> 4 Afghanistan      Asia 1967  34.020 11537966  836.1971\n#> 5 Afghanistan      Asia 1972  36.088 13079460  739.9811\n#> 6 Afghanistan      Asia 1977  38.438 14880372  786.1134\n#>    orszag_hun kontinens_hun\n#> 1 Afganisztán         Ázsia\n#> 2 Afganisztán         Ázsia\n#> 3 Afganisztán         Ázsia\n#> 4 Afganisztán         Ázsia\n#> 5 Afganisztán         Ázsia\n#> 6 Afganisztán         Ázsia"},{"path":"advanced-data-manipulation.html","id":"adding-rows","chapter":"4 Advanced data manipulation","heading":"4.7.2 Adding rows","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"adding-rows-by-assignment","chapter":"4 Advanced data manipulation","heading":"4.7.2.1 Adding rows by assignment","text":"function rbind() can combine list vector data frame. Generally, avoid using vectors may change data type data frame.","code":"\nmovies <- mov[, c(2, 5, 7, 9, 11, 12)]\ntail(movies, 3)\n#>                       Title         Director Year Rating\n#> 998  Step Up 2: The Streets       Jon M. Chu 2008    6.2\n#> 999            Search Party   Scot Armstrong 2014    5.6\n#> 1000             Nine Lives Barry Sonnenfeld 2016    5.3\n#>      Revenue Metascore\n#> 998    58.01        50\n#> 999       NA        22\n#> 1000   19.64        11\n\n# inserting rows\nmovies[1001,] <- c(\"the big g\", \"goro lovic\", 2015, 9.9, 1000, 100)\nmovies[1002,] <- c(\"luv of my life\", \"nema lovic\", 2016, 7.9, 150, 65)\nmovies[1003,] <- c(\"everyday\", \"goro lovic\", 2014, 4.4, 170, 40)\ntail(movies)\n#>                       Title         Director Year Rating\n#> 998  Step Up 2: The Streets       Jon M. Chu 2008    6.2\n#> 999            Search Party   Scot Armstrong 2014    5.6\n#> 1000             Nine Lives Barry Sonnenfeld 2016    5.3\n#> 1001              the big g       goro lovic 2015    9.9\n#> 1002         luv of my life       nema lovic 2016    7.9\n#> 1003               everyday       goro lovic 2014    4.4\n#>      Revenue Metascore\n#> 998    58.01        50\n#> 999     <NA>        22\n#> 1000   19.64        11\n#> 1001    1000       100\n#> 1002     150        65\n#> 1003     170        40\n\n# using nrow\nmovies <- mov[, c(2, 5, 7, 9, 11, 12)]\nmovies[nrow(movies) + 1,] <- c(\"the big g\", \"goro lovic\", 2015, 9.9, 1000, 100)\nmovies[nrow(movies) + 1,] <- c(\"luv of my life\", \"nema lovic\", 2016, 7.9, 150, 65)\nmovies[nrow(movies) + 1,] <- c(\"everyday\", \"goro lovic\", 2014, 4.4, 170, 40)\ntail(movies)\n#>                       Title         Director Year Rating\n#> 998  Step Up 2: The Streets       Jon M. Chu 2008    6.2\n#> 999            Search Party   Scot Armstrong 2014    5.6\n#> 1000             Nine Lives Barry Sonnenfeld 2016    5.3\n#> 1001              the big g       goro lovic 2015    9.9\n#> 1002         luv of my life       nema lovic 2016    7.9\n#> 1003               everyday       goro lovic 2014    4.4\n#>      Revenue Metascore\n#> 998    58.01        50\n#> 999     <NA>        22\n#> 1000   19.64        11\n#> 1001    1000       100\n#> 1002     150        65\n#> 1003     170        40"},{"path":"advanced-data-manipulation.html","id":"adding-rows-using-rbind","chapter":"4 Advanced data manipulation","heading":"4.7.2.2 Adding rows using rbind()","text":"","code":"\n# binding a list to a data frame\nmovies <- mov[, c(2, 5, 7, 9, 11, 12)]\nmovies <- rbind(movies, list(\"the big g\", \"goro lovic\", 2015, 9.9, 1000, 100))\nmovies <- rbind(movies, list(\"luv of my life\", \"nema lovic\", 2016, 7.9, 150, 65))\nmovies <- rbind(movies, list(\"everyday\", \"goro lovic\", 2014, 4.4, 170, 40))\ntail(movies)\n#>                       Title         Director Year Rating\n#> 998  Step Up 2: The Streets       Jon M. Chu 2008    6.2\n#> 999            Search Party   Scot Armstrong 2014    5.6\n#> 1000             Nine Lives Barry Sonnenfeld 2016    5.3\n#> 1001              the big g       goro lovic 2015    9.9\n#> 1002         luv of my life       nema lovic 2016    7.9\n#> 1003               everyday       goro lovic 2014    4.4\n#>      Revenue Metascore\n#> 998    58.01        50\n#> 999       NA        22\n#> 1000   19.64        11\n#> 1001 1000.00       100\n#> 1002  150.00        65\n#> 1003  170.00        40\n\nmovies <- mov[, c(2, 5, 7, 9, 11, 12)]\nsapply(movies, class)\n#>       Title    Director        Year      Rating     Revenue \n#> \"character\" \"character\"   \"integer\"   \"numeric\"   \"numeric\" \n#>   Metascore \n#>   \"integer\"\n\n# using a vector\nmovies <- rbind(movies, c(\"the big g\", \"goro lovic\", 2015, 9.9, 1000, 100))\nsapply(movies, class)\n#>       Title    Director        Year      Rating     Revenue \n#> \"character\" \"character\" \"character\" \"character\" \"character\" \n#>   Metascore \n#> \"character\""},{"path":"advanced-data-manipulation.html","id":"adding-rows-using-do.call","chapter":"4 Advanced data manipulation","heading":"4.7.2.3 Adding rows using do.call()","text":"function .call('rbind', dfs) combines list data frames, list, vectors. , avoid using vectors may change data type data frames.","code":"\nmovies <- subset(mov, select = c(2, 5, 7, 9, 11, 12))\nmovies <- do.call('rbind', list(movies,\n                                list(\"the big g\", \"goro lovic\", 2015, 9.9, 1000, 100), \n                                list(\"luv of my life\", \"nema lovic\", 2016, 7.9, 150, 65), \n                                list(\"everyday\", \"goro lovic\", 2014, 4.4, 170, 40)))\ntail(movies)\n#>                       Title         Director Year Rating\n#> 998  Step Up 2: The Streets       Jon M. Chu 2008    6.2\n#> 999            Search Party   Scot Armstrong 2014    5.6\n#> 1000             Nine Lives Barry Sonnenfeld 2016    5.3\n#> 1001              the big g       goro lovic 2015    9.9\n#> 1002         luv of my life       nema lovic 2016    7.9\n#> 1003               everyday       goro lovic 2014    4.4\n#>      Revenue Metascore\n#> 998    58.01        50\n#> 999       NA        22\n#> 1000   19.64        11\n#> 1001 1000.00       100\n#> 1002  150.00        65\n#> 1003  170.00        40"},{"path":"advanced-data-manipulation.html","id":"updating-rows-of-data","chapter":"4 Advanced data manipulation","heading":"4.7.3 Updating rows of data","text":"update row, simply select give new list values. Vectors can used also avoided may change data type data frame.","code":"\nmovies <- mov[, c(1, 2, 5, 7, 9, 11, 12)]\nmovies[6,]\n#>   Rank          Title    Director Year Rating Revenue\n#> 6    6 The Great Wall Yimou Zhang 2016    6.1   45.13\n#>   Metascore\n#> 6        42\n\n# updating a row by indexing\nmovies[6,] <- list(6, 'I am coming home', 'goro lovic', 2020, 9.8, 850, 85)\nmovies[6,]\n#>   Rank            Title   Director Year Rating Revenue\n#> 6    6 I am coming home goro lovic 2020    9.8     850\n#>   Metascore\n#> 6        85\n\n# updating a row by filtering\nmovies <- mov[, c(1, 2, 5, 7, 9, 11, 12)]\nmovies[movies$Rank == 6,] <- list(6, 'I am coming home', 'goro lovic', 2020, 9.8, 850, 85)\nmovies[movies$Rank == 6,]\n#>   Rank            Title   Director Year Rating Revenue\n#> 6    6 I am coming home goro lovic 2020    9.8     850\n#>   Metascore\n#> 6        85"},{"path":"advanced-data-manipulation.html","id":"updating-a-single-value","chapter":"4 Advanced data manipulation","heading":"4.7.4 Updating a single value","text":"update single value, select subsetting assign new value.","code":"\nmovies <- mov[, c(1, 2, 5, 7, 9, 11, 12)]\nmovies[movies$Director == 'Christopher Nolan',]\n#>     Rank                 Title          Director Year\n#> 37    37          Interstellar Christopher Nolan 2014\n#> 55    55       The Dark Knight Christopher Nolan 2008\n#> 65    65          The Prestige Christopher Nolan 2006\n#> 81    81             Inception Christopher Nolan 2010\n#> 125  125 The Dark Knight Rises Christopher Nolan 2012\n#>     Rating Revenue Metascore\n#> 37     8.6  187.99        74\n#> 55     9.0  533.32        82\n#> 65     8.5   53.08        66\n#> 81     8.8  292.57        74\n#> 125    8.5  448.13        78\n\n# changing from 'Christopher Nolan' to 'C Nolan' \nmovies[movies$Director == 'Christopher Nolan', 'Director'] <- 'C Nolan'\nmovies[c(37, 55, 65, 81, 125),]\n#>     Rank                 Title Director Year Rating Revenue\n#> 37    37          Interstellar  C Nolan 2014    8.6  187.99\n#> 55    55       The Dark Knight  C Nolan 2008    9.0  533.32\n#> 65    65          The Prestige  C Nolan 2006    8.5   53.08\n#> 81    81             Inception  C Nolan 2010    8.8  292.57\n#> 125  125 The Dark Knight Rises  C Nolan 2012    8.5  448.13\n#>     Metascore\n#> 37         74\n#> 55         82\n#> 65         66\n#> 81         74\n#> 125        78"},{"path":"advanced-data-manipulation.html","id":"randomly-selecting-rows","chapter":"4 Advanced data manipulation","heading":"4.7.5 Randomly selecting rows","text":"select random sample rows, use function sample().","code":"\n# selecting 10 random rows\nmovies <- mov[, c(2, 7, 11, 12)]\nmovies[sample(x = nrow(movies), size = 10), ]\n#>                    Title Year Revenue Metascore\n#> 535      A Quiet Passion 2016    1.08        77\n#> 471    American Gangster 2007  130.13        76\n#> 728      The Illusionist 2006   39.83        68\n#> 789 Hotel Transylvania 2 2015  169.69        44\n#> 978        Amateur Night 2016      NA        38\n#> 275            Ballerina 2016      NA        NA\n#> 905              RoboCop 2014   58.61        52\n#> 723            Grown Ups 2010  162.00        30\n#> 958         End of Watch 2012   40.98        68\n#> 211          San Andreas 2015  155.18        43"},{"path":"advanced-data-manipulation.html","id":"br-filter-rows","chapter":"4 Advanced data manipulation","heading":"4.7.6 Filtering rows","text":"function subset() [ used filter rows.","code":"\nhead(gapminder_cp1250[gapminder_cp1250$continent == \"Europe\", c(\"country\", \"gdpPercap\", \"continent\")])\n#>    country gdpPercap continent\n#> 13 Albania  1601.056    Europe\n#> 14 Albania  1942.284    Europe\n#> 15 Albania  2312.889    Europe\n#> 16 Albania  2760.197    Europe\n#> 17 Albania  3313.422    Europe\n#> 18 Albania  3533.004    Europe\ngapminder_cp1250[gapminder_cp1250$continent == \"Europe\" & gapminder_cp1250$gdpPercap > 2000 & gapminder_cp1250$gdpPercap < 4000, c(\"country\", \"gdpPercap\", \"continent\")]\n#>                     country gdpPercap continent\n#> 15                  Albania  2312.889    Europe\n#> 16                  Albania  2760.197    Europe\n#> 17                  Albania  3313.422    Europe\n#> 18                  Albania  3533.004    Europe\n#> 19                  Albania  3630.881    Europe\n#> 20                  Albania  3738.933    Europe\n#> 21                  Albania  2497.438    Europe\n#> 22                  Albania  3193.055    Europe\n#> 148  Bosnia and Herzegovina  2172.352    Europe\n#> 149  Bosnia and Herzegovina  2860.170    Europe\n#> 150  Bosnia and Herzegovina  3528.481    Europe\n#> 153  Bosnia and Herzegovina  2546.781    Europe\n#> 181                Bulgaria  2444.287    Europe\n#> 182                Bulgaria  3008.671    Europe\n#> 373                 Croatia  3119.237    Europe\n#> 589                  Greece  3530.690    Europe\n#> 1009             Montenegro  2647.586    Europe\n#> 1010             Montenegro  3682.260    Europe\n#> 1237               Portugal  3068.320    Europe\n#> 1238               Portugal  3774.572    Europe\n#> 1273                Romania  3144.613    Europe\n#> 1274                Romania  3943.370    Europe\n#> 1333                 Serbia  3581.459    Europe\n#> 1417                  Spain  3834.035    Europe\n#> 1574                 Turkey  2218.754    Europe\n#> 1575                 Turkey  2322.870    Europe\n#> 1576                 Turkey  2826.356    Europe\n#> 1577                 Turkey  3450.696    Europe\nsubset(gapminder_cp1250, \n       subset =  continent == \"Europe\" & gdpPercap > 2000 & gdpPercap < 4000, \n       select = c(\"country\", \"gdpPercap\", \"continent\"))\n#>                     country gdpPercap continent\n#> 15                  Albania  2312.889    Europe\n#> 16                  Albania  2760.197    Europe\n#> 17                  Albania  3313.422    Europe\n#> 18                  Albania  3533.004    Europe\n#> 19                  Albania  3630.881    Europe\n#> 20                  Albania  3738.933    Europe\n#> 21                  Albania  2497.438    Europe\n#> 22                  Albania  3193.055    Europe\n#> 148  Bosnia and Herzegovina  2172.352    Europe\n#> 149  Bosnia and Herzegovina  2860.170    Europe\n#> 150  Bosnia and Herzegovina  3528.481    Europe\n#> 153  Bosnia and Herzegovina  2546.781    Europe\n#> 181                Bulgaria  2444.287    Europe\n#> 182                Bulgaria  3008.671    Europe\n#> 373                 Croatia  3119.237    Europe\n#> 589                  Greece  3530.690    Europe\n#> 1009             Montenegro  2647.586    Europe\n#> 1010             Montenegro  3682.260    Europe\n#> 1237               Portugal  3068.320    Europe\n#> 1238               Portugal  3774.572    Europe\n#> 1273                Romania  3144.613    Europe\n#> 1274                Romania  3943.370    Europe\n#> 1333                 Serbia  3581.459    Europe\n#> 1417                  Spain  3834.035    Europe\n#> 1574                 Turkey  2218.754    Europe\n#> 1575                 Turkey  2322.870    Europe\n#> 1576                 Turkey  2826.356    Europe\n#> 1577                 Turkey  3450.696    Europe"},{"path":"advanced-data-manipulation.html","id":"deleting-rows","chapter":"4 Advanced data manipulation","heading":"4.7.7 Deleting rows","text":"special function delete rows, can filtered using [.","code":"\nmovies_without_first10 <- movies[11:nrow(movies), ]\nnrow(movies)\n#> [1] 1000\nnrow(movies_without_first10)\n#> [1] 990"},{"path":"advanced-data-manipulation.html","id":"br-joins","chapter":"4 Advanced data manipulation","heading":"4.8 SQL like joins","text":"basic level four types SQL joins:Inner join: returns rows matched data framesLeft join (left outer join): returns rows found left data frame irrespective whether matched rows right data frame. rows match values right data frames, NA values returned instead.Right join (right outer join): reverse left join, returns rows found right data frame irrespective whether matched left data frame.Outer join (full outer join): returns rows data frames irrespective whether matched ","code":""},{"path":"advanced-data-manipulation.html","id":"inner-join","chapter":"4 Advanced data manipulation","heading":"4.8.1 Inner join","text":"","code":"\n# preparing data\nemployees <- data.frame(\n  name = c('john', 'mary', 'david', 'paul', 'susan', 'cynthia', 'Joss', 'dennis'),\n  age = c(45, 55, 35, 58, 40, 30, 39, 25),\n  gender = c('m', 'f', 'm', 'm', 'f', 'f', 'm', 'm'),\n  salary =c(40000, 50000, 35000, 25000, 48000, 32000, 20000, 45000),\n  department = c('commercial', 'production', NA, 'human resources', \n                 'commercial', 'commercial', 'production', NA))\nemployees\n#>      name age gender salary      department\n#> 1    john  45      m  40000      commercial\n#> 2    mary  55      f  50000      production\n#> 3   david  35      m  35000            <NA>\n#> 4    paul  58      m  25000 human resources\n#> 5   susan  40      f  48000      commercial\n#> 6 cynthia  30      f  32000      commercial\n#> 7    Joss  39      m  20000      production\n#> 8  dennis  25      m  45000            <NA>\ndepartments <- data.frame(\n  department = c('commercial', 'human resources', 'production', 'finance', 'maintenance'),\n  location = c('washington', 'london', 'paris', 'dubai', 'dublin'))\ndepartments\n#>        department   location\n#> 1      commercial washington\n#> 2 human resources     london\n#> 3      production      paris\n#> 4         finance      dubai\n#> 5     maintenance     dublin\n\n# returns only rows that are matched in both data frames\nmerge(employees, departments, by = \"department\")\n#>        department    name age gender salary   location\n#> 1      commercial    john  45      m  40000 washington\n#> 2      commercial   susan  40      f  48000 washington\n#> 3      commercial cynthia  30      f  32000 washington\n#> 4 human resources    paul  58      m  25000     london\n#> 5      production    mary  55      f  50000      paris\n#> 6      production    Joss  39      m  20000      paris"},{"path":"advanced-data-manipulation.html","id":"left-join","chapter":"4 Advanced data manipulation","heading":"4.8.2 Left join","text":"perform left join, argument .x = TRUE used.","code":"\n# returns all the values of the left data frame\nmerge(employees, departments, by = \"department\", all.x = TRUE)\n#>        department    name age gender salary   location\n#> 1      commercial    john  45      m  40000 washington\n#> 2      commercial   susan  40      f  48000 washington\n#> 3      commercial cynthia  30      f  32000 washington\n#> 4 human resources    paul  58      m  25000     london\n#> 5      production    mary  55      f  50000      paris\n#> 6      production    Joss  39      m  20000      paris\n#> 7            <NA>   david  35      m  35000       <NA>\n#> 8            <NA>  dennis  25      m  45000       <NA>"},{"path":"advanced-data-manipulation.html","id":"right-join","chapter":"4 Advanced data manipulation","heading":"4.8.3 Right join","text":"perform right join, argument .y = TRUE used.","code":"\n# returns all the values of the right table\nmerge(employees, departments, by = \"department\", all.y = TRUE)\n#>        department    name age gender salary   location\n#> 1      commercial    john  45      m  40000 washington\n#> 2      commercial   susan  40      f  48000 washington\n#> 3      commercial cynthia  30      f  32000 washington\n#> 4         finance    <NA>  NA   <NA>     NA      dubai\n#> 5 human resources    paul  58      m  25000     london\n#> 6     maintenance    <NA>  NA   <NA>     NA     dublin\n#> 7      production    mary  55      f  50000      paris\n#> 8      production    Joss  39      m  20000      paris\n\n# reversing the tables in the right join produces the same results as the left join\nmerge(departments, employees , by = \"department\", all.y = TRUE)\n#>        department   location    name age gender salary\n#> 1      commercial washington    john  45      m  40000\n#> 2      commercial washington   susan  40      f  48000\n#> 3      commercial washington cynthia  30      f  32000\n#> 4 human resources     london    paul  58      m  25000\n#> 5      production      paris    mary  55      f  50000\n#> 6      production      paris    Joss  39      m  20000\n#> 7            <NA>       <NA>   david  35      m  35000\n#> 8            <NA>       <NA>  dennis  25      m  45000"},{"path":"advanced-data-manipulation.html","id":"full-outer-join","chapter":"4 Advanced data manipulation","heading":"4.8.4 Full outer join","text":"perform full join, argument = TRUE used.","code":"\n# returns all rows\nmerge(employees, departments, by = \"department\", all = TRUE)\n#>         department    name age gender salary   location\n#> 1       commercial    john  45      m  40000 washington\n#> 2       commercial   susan  40      f  48000 washington\n#> 3       commercial cynthia  30      f  32000 washington\n#> 4          finance    <NA>  NA   <NA>     NA      dubai\n#> 5  human resources    paul  58      m  25000     london\n#> 6      maintenance    <NA>  NA   <NA>     NA     dublin\n#> 7       production    mary  55      f  50000      paris\n#> 8       production    Joss  39      m  20000      paris\n#> 9             <NA>   david  35      m  35000       <NA>\n#> 10            <NA>  dennis  25      m  45000       <NA>"},{"path":"advanced-data-manipulation.html","id":"joining-data-frames-with-different-column-names","chapter":"4 Advanced data manipulation","heading":"4.8.5 Joining data frames with different column names","text":"arguments .x= .y= used declare joining column(s) left right data frames, respectively.","code":"\n# recreating the employee table\nemployees <- data.frame(\n  name = c('john', 'mary', 'david', 'paul', 'susan', 'cynthia', 'Joss', 'dennis'),\n  age = c(45, 55, 35, 58, 40, 30, 39, 25),\n  gender = c('m', 'f', 'm', 'm', 'f', 'f', 'm', 'm'),\n  salary =c(40000, 50000, 35000, 25000, 48000, 32000, 20000, 45000),\n  dep_name = c('commercial', 'production', NA, 'human resources', 'commercial', \n               'commercial', 'production', NA))\nhead(employees, 2)\n#>   name age gender salary   dep_name\n#> 1 john  45      m  40000 commercial\n#> 2 mary  55      f  50000 production\nhead(departments, 2)\n#>        department   location\n#> 1      commercial washington\n#> 2 human resources     london\n\n# joining on columns with different names\nmerge(employees, departments, by.x = 'dep_name', by.y = 'department')\n#>          dep_name    name age gender salary   location\n#> 1      commercial    john  45      m  40000 washington\n#> 2      commercial   susan  40      f  48000 washington\n#> 3      commercial cynthia  30      f  32000 washington\n#> 4 human resources    paul  58      m  25000     london\n#> 5      production    mary  55      f  50000      paris\n#> 6      production    Joss  39      m  20000      paris"},{"path":"advanced-data-manipulation.html","id":"joining-data-frames-on-one-more-than-one-joining-column","chapter":"4 Advanced data manipulation","heading":"4.8.6 Joining data frames on one more than one joining column","text":"data frames contain two columns name, merge() try performing join using column names.data frames columns different names join , used arguments .x= .y= specify .","code":"\n# recreating the employees table\nemployees <- data.frame(\n  name = c('john', 'mary', 'david', 'paul', 'susan', 'cynthia', 'Joss', 'dennis'),\n  age = c(45, 55, 35, 58, 40, 30, 39, 25),\n  gender = c('m', 'f', 'm', 'm', 'f', 'f', 'm', 'm'),\n  salary =c(40000, 50000, 35000, 25000, 48000, 32000, 20000, 45000),\n  department = c('commercial', 'production', NA, 'human resources', 'commercial', \n                 'commercial', 'production', NA),\n  subdepartment = c('marketing', 'production', NA, 'human resources', 'sales', 'sales', \n                    'production', NA))\nhead(employees, 2)\n#>   name age gender salary department subdepartment\n#> 1 john  45      m  40000 commercial     marketing\n#> 2 mary  55      f  50000 production    production\n\n# creating the departments? table\ndepartments <- data.frame(\n  department = c('commercial', 'commercial', 'human resources', 'production', 'finance', \n                 'finance', 'maintenance'),\n  subdepartment = c('marketing', 'sales', 'human resources', 'production', 'finance', \n                    'accounting', 'maintenance'),\n  location = c('washington', 'washington', 'london', 'paris', 'dubai', 'dubai', 'dublin')\n)\nhead(departments, 2)\n#>   department subdepartment   location\n#> 1 commercial     marketing washington\n#> 2 commercial         sales washington\n\n# because they both contain the same name, the join is performed automatically\nmerge(employees, departments)\n#>        department   subdepartment    name age gender salary\n#> 1      commercial       marketing    john  45      m  40000\n#> 2      commercial           sales   susan  40      f  48000\n#> 3      commercial           sales cynthia  30      f  32000\n#> 4 human resources human resources    paul  58      m  25000\n#> 5      production      production    mary  55      f  50000\n#> 6      production      production    Joss  39      m  20000\n#>     location\n#> 1 washington\n#> 2 washington\n#> 3 washington\n#> 4     london\n#> 5      paris\n#> 6      paris\n# specifying joining columns\nmerge(employees, departments, \n      by.x = c('department', 'subdepartment'), \n      by.y =c('department', 'subdepartment'))\n#>        department   subdepartment    name age gender salary\n#> 1      commercial       marketing    john  45      m  40000\n#> 2      commercial           sales   susan  40      f  48000\n#> 3      commercial           sales cynthia  30      f  32000\n#> 4 human resources human resources    paul  58      m  25000\n#> 5      production      production    mary  55      f  50000\n#> 6      production      production    Joss  39      m  20000\n#>     location\n#> 1 washington\n#> 2 washington\n#> 3 washington\n#> 4     london\n#> 5      paris\n#> 6      paris"},{"path":"advanced-data-manipulation.html","id":"br-summary","chapter":"4 Advanced data manipulation","heading":"4.9 Aggregating and grouping data","text":"function aggregate() groups data frame specific column value performs summarization (sum, mean, median, length, min, max, etc.) based groups. split-apply-combine, splitting data frame groups (category) applies calculation group finally combines results back together create single data frame presented output.aggregate() function , groups data frame gapminder_xlsx_2007 continent, applies sum group.Rather filtering data passing aggregate() function, can filter data directly inside aggregate() using subset= argument.+ sign used group one categorical column.function cbind() used aggregate multiple columns, problem one summarisation function can used.","code":"\n# preparing data\ngapminder_xlsx_2007 <- gapminder_xlsx[gapminder_xlsx$year == 2007, ]\nhead(gapminder_xlsx_2007)\n#>        country continent year lifeExp      pop  gdpPercap\n#> 12 Afghanistan      Asia 2007  43.828 31889923   974.5803\n#> 24     Albania    Europe 2007  76.423  3600523  5937.0295\n#> 36     Algeria    Africa 2007  72.301 33333216  6223.3675\n#> 48      Angola    Africa 2007  42.731 12420476  4797.2313\n#> 60   Argentina  Americas 2007  75.320 40301927 12779.3796\n#> 72   Australia   Oceania 2007  81.235 20434176 34435.3674\n#>    country_hun continent_hun\n#> 12 Afganisztán         Ázsia\n#> 24     Albánia        Európa\n#> 36     Algéria        Afrika\n#> 48      Angola        Afrika\n#> 60   Argentína       Amerika\n#> 72  Ausztrália       Óceánia\n\n# population by continent\naggregate(pop ~ continent, gapminder_xlsx_2007, sum)\n#>   continent        pop\n#> 1    Africa  929539692\n#> 2  Americas  898871184\n#> 3      Asia 3811953827\n#> 4    Europe  586098529\n#> 5   Oceania   24549947\naggregate(pop ~ continent, gapminder_xlsx_2007, mean)\n#>   continent       pop\n#> 1    Africa  17875763\n#> 2  Americas  35954847\n#> 3      Asia 115513752\n#> 4    Europe  19536618\n#> 5   Oceania  12274974\n# filtering with the subset argument\naggregate(pop ~ continent, gapminder_xlsx, \n          subset = year == 2007, \n          sum)\n#>   continent        pop\n#> 1    Africa  929539692\n#> 2  Americas  898871184\n#> 3      Asia 3811953827\n#> 4    Europe  586098529\n#> 5   Oceania   24549947\n# pop by continent and year\naggregate(pop ~ continent + year, \n          gapminder_xlsx, \n          subset = year %in% c(1987, 2007), \n          sum)\n#>    continent year        pop\n#> 1     Africa 1987  574834110\n#> 2   Americas 1987  682753971\n#> 3       Asia 1987 2871220762\n#> 4     Europe 1987  543094160\n#> 5    Oceania 1987   19574415\n#> 6     Africa 2007  929539692\n#> 7   Americas 2007  898871184\n#> 8       Asia 2007 3811953827\n#> 9     Europe 2007  586098529\n#> 10   Oceania 2007   24549947\n# using mean\naggregate(pop ~ continent + year, \n          gapminder_xlsx, \n          subset = year %in% c(1987, 2007), \n          mean)\n#>    continent year       pop\n#> 1     Africa 1987  11054502\n#> 2   Americas 1987  27310159\n#> 3       Asia 1987  87006690\n#> 4     Europe 1987  18103139\n#> 5    Oceania 1987   9787208\n#> 6     Africa 2007  17875763\n#> 7   Americas 2007  35954847\n#> 8       Asia 2007 115513752\n#> 9     Europe 2007  19536618\n#> 10   Oceania 2007  12274974\n# aggregating on two numeric columns (lifeExp and gdpPercap)\naggregate(cbind(lifeExp, gdpPercap) ~ continent + year, \n          gapminder_xlsx, \n          subset = year %in% c(1987, 2007), \n          mean)\n#>    continent year  lifeExp gdpPercap\n#> 1     Africa 1987 53.34479  2282.669\n#> 2   Americas 1987 68.09072  7793.400\n#> 3       Asia 1987 64.85118  7608.227\n#> 4     Europe 1987 73.64217 17214.311\n#> 5    Oceania 1987 75.32000 20448.040\n#> 6     Africa 2007 54.80604  3089.033\n#> 7   Americas 2007 73.60812 11003.032\n#> 8       Asia 2007 70.72848 12473.027\n#> 9     Europe 2007 77.64860 25054.482\n#> 10   Oceania 2007 80.71950 29810.188\n# rounding with customized function\naggregate(cbind(lifeExp, gdpPercap) ~ continent + year, \n          gapminder_xlsx, \n          subset = year %in% c(1987, 2007), \n          function(x){round(mean(x), 1)})\n#>    continent year lifeExp gdpPercap\n#> 1     Africa 1987    53.3    2282.7\n#> 2   Americas 1987    68.1    7793.4\n#> 3       Asia 1987    64.9    7608.2\n#> 4     Europe 1987    73.6   17214.3\n#> 5    Oceania 1987    75.3   20448.0\n#> 6     Africa 2007    54.8    3089.0\n#> 7   Americas 2007    73.6   11003.0\n#> 8       Asia 2007    70.7   12473.0\n#> 9     Europe 2007    77.6   25054.5\n#> 10   Oceania 2007    80.7   29810.2"},{"path":"advanced-data-manipulation.html","id":"br-reshape","chapter":"4 Advanced data manipulation","heading":"4.10 Pivoting and unpivoting data","text":"Tabular data exist two forms: long wide. wide form ideal reporting long form ideal computer. often, performing data analysis, data wide form converted long form (unpivoting) preparing reports, data long converted wide form (pivoting).wide datalong data","code":""},{"path":"advanced-data-manipulation.html","id":"pivoting","chapter":"4 Advanced data manipulation","heading":"4.10.1 Pivoting","text":"Pivoting converts data frame rows columns.","code":""},{"path":"advanced-data-manipulation.html","id":"pivoting-using-the-reshape-package","chapter":"4 Advanced data manipulation","heading":"4.10.1.1 Pivoting using the reshape package","text":"reshape package package created restructuring aggregating data using just two functions: melt() cast().function cast() pivots data melt() unpivots data.function cast() can perform aggregation fun.aggregate= argument filtering subset argument.","code":"\n# preparing long data\ndt <- aggregate(cbind(lifeExp, gdpPercap) ~ continent + year, \n                gapminder_xlsx, \n                subset = year >= 1987, \n                mean)\nhead(dt,3)\n#>   continent year  lifeExp gdpPercap\n#> 1    Africa 1987 53.34479  2282.669\n#> 2  Americas 1987 68.09072  7793.400\n#> 3      Asia 1987 64.85118  7608.227\ntail(dt,3)\n#>    continent year  lifeExp gdpPercap\n#> 23      Asia 2007 70.72848  12473.03\n#> 24    Europe 2007 77.64860  25054.48\n#> 25   Oceania 2007 80.71950  29810.19\n\nlibrary(reshape)\n# converting from long to wide\ncast(data = dt, \n     formula = continent ~ year, \n     value = 'lifeExp')\n#>   continent     1987     1992     1997     2002     2007\n#> 1    Africa 53.34479 53.62958 53.59827 53.32523 54.80604\n#> 2  Americas 68.09072 69.56836 71.15048 72.42204 73.60812\n#> 3      Asia 64.85118 66.53721 68.02052 69.23388 70.72848\n#> 4    Europe 73.64217 74.44010 75.50517 76.70060 77.64860\n#> 5   Oceania 75.32000 76.94500 78.19000 79.74000 80.71950\n# summarization\ncast(data = gapminder_xlsx_2007, \n     formula = continent ~ year, \n     value = 'pop', \n     fun.aggregate = sum)\n#>   continent       2007\n#> 1    Africa  929539692\n#> 2  Americas  898871184\n#> 3      Asia 3811953827\n#> 4    Europe  586098529\n#> 5   Oceania   24549947\n\n# filtering with subset\ncast(data = gapminder_xlsx,\n     continent ~ year,\n     subset = year >= 1987,\n     value = 'lifeExp', \n     fun.aggregate = mean)\n#>   continent     1987     1992     1997     2002     2007\n#> 1    Africa 53.34479 53.62958 53.59827 53.32523 54.80604\n#> 2  Americas 68.09072 69.56836 71.15048 72.42204 73.60812\n#> 3      Asia 64.85118 66.53721 68.02052 69.23388 70.72848\n#> 4    Europe 73.64217 74.44010 75.50517 76.70060 77.64860\n#> 5   Oceania 75.32000 76.94500 78.19000 79.74000 80.71950\n\n# rounding numbers\ncast(data = gapminder_xlsx,\n     continent ~ year,\n     subset = year >= 1987,\n     value = 'lifeExp', \n     fun.aggregate = function(x)round(mean(x), 1))\n#>   continent 1987 1992 1997 2002 2007\n#> 1    Africa 53.3 53.6 53.6 53.3 54.8\n#> 2  Americas 68.1 69.6 71.2 72.4 73.6\n#> 3      Asia 64.9 66.5 68.0 69.2 70.7\n#> 4    Europe 73.6 74.4 75.5 76.7 77.6\n#> 5   Oceania 75.3 76.9 78.2 79.7 80.7\n\n# population by year by continent\ncast(data = gapminder_xlsx,\n     year ~ continent,\n     subset = year >= 1987,\n     value = 'pop',\n     fun.aggregate = sum)\n#>   year    Africa  Americas       Asia    Europe  Oceania\n#> 1 1987 574834110 682753971 2871220762 543094160 19574415\n#> 2 1992 659081517 739274104 3133292191 558142797 20919651\n#> 3 1997 743832984 796900410 3383285500 568944148 22241430\n#> 4 2002 833723916 849772762 3601802203 578223869 23454829\n#> 5 2007 929539692 898871184 3811953827 586098529 24549947"},{"path":"advanced-data-manipulation.html","id":"pivoting-using-the-reshape2-package","chapter":"4 Advanced data manipulation","heading":"4.10.1.2 Pivoting using the reshape2 package","text":"reshape2 package reboot reshape package.function acast() dcast() used pivot data former returning matrix later data frame.","code":"\ndt_wide <- reshape2::acast(data = dt, \n                           formula = continent ~ year, \n                           value.var = 'lifeExp')\ndt_wide\n#>              1987     1992     1997     2002     2007\n#> Africa   53.34479 53.62958 53.59827 53.32523 54.80604\n#> Americas 68.09072 69.56836 71.15048 72.42204 73.60812\n#> Asia     64.85118 66.53721 68.02052 69.23388 70.72848\n#> Europe   73.64217 74.44010 75.50517 76.70060 77.64860\n#> Oceania  75.32000 76.94500 78.19000 79.74000 80.71950\nclass(dt_wide)\n#> [1] \"matrix\" \"array\"\n\ndt_wide <- reshape2::dcast(data = dt, \n                           formula = continent ~ year, \n                           value.var = 'lifeExp')\ndt_wide\n#>   continent     1987     1992     1997     2002     2007\n#> 1    Africa 53.34479 53.62958 53.59827 53.32523 54.80604\n#> 2  Americas 68.09072 69.56836 71.15048 72.42204 73.60812\n#> 3      Asia 64.85118 66.53721 68.02052 69.23388 70.72848\n#> 4    Europe 73.64217 74.44010 75.50517 76.70060 77.64860\n#> 5   Oceania 75.32000 76.94500 78.19000 79.74000 80.71950\nclass(dt_wide)\n#> [1] \"data.frame\"\n\n# filtering by year\nreshape2::dcast(data = gapminder_xlsx[gapminder_xlsx$year >= 1987,], \n                formula = continent ~ year, \n                value.var = 'lifeExp', \n                fun.aggregate = function(x)round(mean(x), 1))\n#>   continent 1987 1992 1997 2002 2007\n#> 1    Africa 53.3 53.6 53.6 53.3 54.8\n#> 2  Americas 68.1 69.6 71.2 72.4 73.6\n#> 3      Asia 64.9 66.5 68.0 69.2 70.7\n#> 4    Europe 73.6 74.4 75.5 76.7 77.6\n#> 5   Oceania 75.3 76.9 78.2 79.7 80.7"},{"path":"advanced-data-manipulation.html","id":"unpivoting","chapter":"4 Advanced data manipulation","heading":"4.10.2 Unpivoting","text":"Unpivoting converts data frame columns rows.function melt() used unpivot data. accepts following:id.vars=: columns movedmeasure.vars=: columns move rowsbut can guess default.function name reshape reshape2.argument measure.vars=, can filter data frame.","code":"\ndt_long <- melt(dt_wide)\nhead(dt_long)\n#>   continent variable    value\n#> 1    Africa     1987 53.34479\n#> 2  Americas     1987 68.09072\n#> 3      Asia     1987 64.85118\n#> 4    Europe     1987 73.64217\n#> 5   Oceania     1987 75.32000\n#> 6    Africa     1992 53.62958\n\ndt_long <- reshape2::melt(dt_wide)\nhead(dt_long)\n#>   continent variable    value\n#> 1    Africa     1987 53.34479\n#> 2  Americas     1987 68.09072\n#> 3      Asia     1987 64.85118\n#> 4    Europe     1987 73.64217\n#> 5   Oceania     1987 75.32000\n#> 6    Africa     1992 53.62958\n# adding a variable name and filtering data\ndt_long <- melt(dt_wide, \n                id.vars = 'continent', \n                variable_name = 'Year',\n                measure.vars = c('1997', '2002', '2007'))\nhead(dt_long)\n#>   continent Year    value\n#> 1    Africa 1997 53.59827\n#> 2  Americas 1997 71.15048\n#> 3      Asia 1997 68.02052\n#> 4    Europe 1997 75.50517\n#> 5   Oceania 1997 78.19000\n#> 6    Africa 2002 53.32523\n\n# adding value, variable name, and filtering data\ndt_long <- reshape2::melt(dt_wide, \n                          id.vars = 'continent', \n                          variable.name = 'Year',\n                          value.name = 'lifeExp', \n                          measure.vars = c('1997', '2002', '2007'))\nhead(dt_long)\n#>   continent Year  lifeExp\n#> 1    Africa 1997 53.59827\n#> 2  Americas 1997 71.15048\n#> 3      Asia 1997 68.02052\n#> 4    Europe 1997 75.50517\n#> 5   Oceania 1997 78.19000\n#> 6    Africa 2002 53.32523"},{"path":"advanced-data-manipulation.html","id":"detecting-and-dealing-with-missing-values","chapter":"4 Advanced data manipulation","heading":"4.11 Detecting and dealing with missing values","text":"functions anyNA() .na() used check NA values return TRUE NA value FALSE non-NA value. former checks object contains missing value, latter checks missing values within object.Since logical can added, FALSE = 0 TRUE = 1, results .na() can added determine number NA values dataset.get total number NA values columns, function colSums() used instead addition columns rather whole data frame.get number non-NA values within column, simply reverse results .na() operator (!) subtract total number rows data frame.get number rows containing non-NA values, use function complete.cases() returns TRUE rows without NA values FALSE rows NA values. Summing result gives us number rows without NA values (complete cases). can equally reverse complete.cases() operator obtain number rows NA values subtract total number rows.Using complete.cases(), can filter either rows NA values rows without NA values.","code":"\nmovies <- mov[, c(2,7,11,12)]\nhead(movies)\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n#> 4                    Sing 2016  270.32        59\n#> 5           Suicide Squad 2016  325.02        40\n#> 6          The Great Wall 2016   45.13        42\n\n# checking if an object contains any NA\nanyNA(NA)\n#> [1] TRUE\nanyNA(list(1, 3, 5, NA))\n#> [1] TRUE\nanyNA(c(1, 3, 5, NA))\n#> [1] TRUE\n# checking if data frame contains any NA values\nanyNA(movies)\n#> [1] TRUE\napply(movies, 2, anyNA)\n#>     Title      Year   Revenue Metascore \n#>     FALSE     FALSE      TRUE      TRUE\n# checking for NA values within an object\nis.na(NA)\n#> [1] TRUE\nis.na(list(1, 3, 5, NA))\n#> [1] FALSE FALSE FALSE  TRUE\nis.na(c(1, 3, 5, NA))\n#> [1] FALSE FALSE FALSE  TRUE\nhead(is.na(movies))\n#>      Title  Year Revenue Metascore\n#> [1,] FALSE FALSE   FALSE     FALSE\n#> [2,] FALSE FALSE   FALSE     FALSE\n#> [3,] FALSE FALSE   FALSE     FALSE\n#> [4,] FALSE FALSE   FALSE     FALSE\n#> [5,] FALSE FALSE   FALSE     FALSE\n#> [6,] FALSE FALSE   FALSE     FALSE\n# number of na values in a dataset\nsum(is.na(movies))\n#> [1] 192\n\n# number of na values in each column\ncolSums(is.na(movies))\n#>     Title      Year   Revenue Metascore \n#>         0         0       128        64\n# number of non-NA values within each column\ncolSums(!is.na(movies))\n#>     Title      Year   Revenue Metascore \n#>      1000      1000       872       936\nnrow(movies) - colSums(is.na(movies))\n#>     Title      Year   Revenue Metascore \n#>      1000      1000       872       936\n# number of rows without NA values\nsum(complete.cases(movies))\n#> [1] 838\n# number of rows with one or more NA values\nsum(!complete.cases(movies))\n#> [1] 162\nnrow(movies) - sum(complete.cases(movies))\n#> [1] 162\n# selecting rows without NA\nno_na_movies <- movies[complete.cases(movies), ]\nhead(no_na_movies, 10)\n#>                                      Title Year Revenue\n#> 1                  Guardians of the Galaxy 2014  333.13\n#> 2                               Prometheus 2012  126.46\n#> 3                                    Split 2016  138.12\n#> 4                                     Sing 2016  270.32\n#> 5                            Suicide Squad 2016  325.02\n#> 6                           The Great Wall 2016   45.13\n#> 7                               La La Land 2016  151.06\n#> 9                       The Lost City of Z 2016    8.01\n#> 10                              Passengers 2016  100.01\n#> 11 Fantastic Beasts and Where to Find Them 2016  234.02\n#>    Metascore\n#> 1         76\n#> 2         65\n#> 3         62\n#> 4         59\n#> 5         40\n#> 6         42\n#> 7         93\n#> 9         78\n#> 10        41\n#> 11        66\n\n# selecting rows with NA\nna_movies <- movies[!complete.cases(movies), ]\nhead(na_movies, 10)\n#>                      Title Year Revenue Metascore\n#> 8                 Mindhorn 2016      NA        71\n#> 23          Hounds of Love 2016      NA        72\n#> 26         Paris pieds nus 2016      NA        NA\n#> 27 Bahubali: The Beginning 2015    6.50        NA\n#> 28              Dead Awake 2016    0.01        NA\n#> 40               5- 25- 77 2007      NA        NA\n#> 43 Don't Fuck in the Woods 2016      NA        NA\n#> 48                  Fallen 2016      NA        NA\n#> 50           The Last Face 2016      NA        16\n#> 62 The Autopsy of Jane Doe 2016      NA        65"},{"path":"advanced-data-manipulation.html","id":"detecting-and-dealing-with-outliers","chapter":"4 Advanced data manipulation","heading":"4.12 Detecting and dealing with outliers","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"what-is-an-outlier","chapter":"4 Advanced data manipulation","heading":"4.12.1 What is an outlier?","text":"Outliers also known anomalies values deviate extremely values within group data. occur errors committed collecting recording data, performing calculations just data points extreme values.","code":""},{"path":"advanced-data-manipulation.html","id":"identifying-outlier","chapter":"4 Advanced data manipulation","heading":"4.12.2 Identifying outlier","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"using-summary-statistics","chapter":"4 Advanced data manipulation","heading":"4.12.2.1 Using summary statistics","text":"first step outlier detection look summary statistics, especially minimum, maximum, median, mean. example, dataset people’s ages, maximum 200 minimum negative, problem., see median mean 10 million 44 million respectively maximum value 1.3 billion. tells us outliers since maximum value varies greatly centre data.","code":"\ngapminder_xlsx_2007 <- gapminder_xlsx[gapminder_xlsx$year == 2007, ]\nhead(gapminder_xlsx_2007)\n#>        country continent year lifeExp      pop  gdpPercap\n#> 12 Afghanistan      Asia 2007  43.828 31889923   974.5803\n#> 24     Albania    Europe 2007  76.423  3600523  5937.0295\n#> 36     Algeria    Africa 2007  72.301 33333216  6223.3675\n#> 48      Angola    Africa 2007  42.731 12420476  4797.2313\n#> 60   Argentina  Americas 2007  75.320 40301927 12779.3796\n#> 72   Australia   Oceania 2007  81.235 20434176 34435.3674\n#>    country_hun continent_hun\n#> 12 Afganisztán         Ázsia\n#> 24     Albánia        Európa\n#> 36     Algéria        Afrika\n#> 48      Angola        Afrika\n#> 60   Argentína       Amerika\n#> 72  Ausztrália       Óceánia\nsummary(gapminder_xlsx_2007$pop/1e6)\n#>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n#>    0.1996    4.5080   10.5175   44.0212   31.2100 1318.6831"},{"path":"advanced-data-manipulation.html","id":"using-plots","chapter":"4 Advanced data manipulation","heading":"4.12.2.2 Using plots","text":"Outliers identified using univariate plots histogram, density plot boxplot.data visualizations, boxplot relevant shows spread data outliers. boxplot reveals following:minimum value,first quantile (Q1),median (second quantile),third quantile (Q3),maximum value excluding outliers andoutliers.difference Q3 Q1 known Interquartile Range (IQR). outliers within box plot calculated value falls beyond 1.5 * IQR.function boxplot.stats() computes data used draw box plot. Using function, can get outliers.first element returned summary statistic calculated summary().last element returned outliers.Recall outliers calculated 1.5 * IQR, can changed using argument coef. default, set 1.5 can changed need .","code":"\n# plotting variable using histogram\nhist(gapminder_xlsx_2007$gdpPercap, breaks = 18)\n\n# density plot\nplot(density(gapminder_xlsx_2007$gdpPercap))\n\n# boxplot of population\nboxplot(gapminder_xlsx_2007$gdpPercap)\nboxplot.stats(gapminder_xlsx_2007$gdpPercap)\n#> $stats\n#> [1]   277.5519  1598.4351  6124.3711 18008.9444 40675.9964\n#> \n#> $n\n#> [1] 142\n#> \n#> $conf\n#> [1] 3948.491 8300.251\n#> \n#> $out\n#> [1] 47306.99 49357.19 47143.18 42951.65\nboxplot.stats(gapminder_xlsx_2007$gdpPercap)$stats\n#> [1]   277.5519  1598.4351  6124.3711 18008.9444 40675.9964\nsummary(gapminder_xlsx_2007$gdpPercap)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   277.6  1624.8  6124.4 11680.1 18008.8 49357.2\nboxplot.stats(gapminder_xlsx_2007$gdpPercap)$out\n#> [1] 47306.99 49357.19 47143.18 42951.65\n# changing coef\nboxplot.stats(gapminder_xlsx_2007$gdpPercap, coef = 0.8)$out\n#>  [1] 34435.37 36126.49 33692.61 36319.24 35278.42 33207.08\n#>  [7] 32170.37 39724.98 36180.79 40676.00 31656.07 47306.99\n#> [13] 36797.93 49357.19 47143.18 33859.75 37506.42 33203.26\n#> [19] 42951.65\nboxplot.stats(gapminder_xlsx_2007$gdpPercap, coef = 1)$out\n#>  [1] 34435.37 36126.49 36319.24 35278.42 39724.98 36180.79\n#>  [7] 40676.00 47306.99 36797.93 49357.19 47143.18 37506.42\n#> [13] 42951.65\nboxplot.stats(gapminder_xlsx_2007$gdpPercap, coef = 1.2)$out\n#> [1] 39724.98 40676.00 47306.99 49357.19 47143.18 42951.65\n\n# selecting outliers\ngapminder_xlsx_2007[gapminder_xlsx_2007$gdpPercap >= min(boxplot.stats(gapminder_xlsx_2007$gdpPercap)$out),]\n#>            country continent year lifeExp       pop\n#> 864         Kuwait      Asia 2007  77.588   2505559\n#> 1152        Norway    Europe 2007  80.196   4627926\n#> 1368     Singapore      Asia 2007  79.972   4553009\n#> 1620 United States  Americas 2007  78.242 301139947\n#>      gdpPercap      country_hun continent_hun\n#> 864   47306.99           Kuvait         Ázsia\n#> 1152  49357.19         Norvégia        Európa\n#> 1368  47143.18        Szingapúr         Ázsia\n#> 1620  42951.65 Egyesült Államok       Amerika"},{"path":"advanced-data-manipulation.html","id":"dealing-with-duplicate-values","chapter":"4 Advanced data manipulation","heading":"4.13 Dealing with duplicate values","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"determining-duplicate-values","chapter":"4 Advanced data manipulation","heading":"4.13.1 Determining duplicate values","text":"function duplicated() determines elements duplicates vector data frame function anyDuplicated() returns index position first duplicate.function duplicated() anyDuplicated() also work data frames. former drops unique rows keeping duplicate rows.","code":"\n# checking for duplicates\nduplicated(1:10)\n#>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#> [10] FALSE\n\nduplicated(c(2, 1, 3, 6, 2, 4, 7, 0, 3, 3, 2, 2, 8, 4, 0))\n#>  [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE\n#> [10]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n\n# get duplicate values\nvt <- c(2, 1, 3, 6, 2, 4, 7, 0, 3, 3, 2, 2, 8, 4, 0)\nvt[duplicated(c(2, 1, 3, 6, 2, 4, 7, 0, 3, 3, 2, 2, 8, 4, 0))]\n#> [1] 2 3 3 2 2 4 0\n\n# checking if an object contains any duplicates\nany(duplicated(1:10))\n#> [1] FALSE\n\nany(duplicated(c(2, 1, 3, 6, 2, 4, 7, 0, 3, 3, 2, 2, 8, 4, 0)))\n#> [1] TRUE\n\n# get the first duplicate position\nanyDuplicated(1:10)\n#> [1] 0\n\nanyDuplicated(c(2, 1, 3, 6, 2, 4, 7, 0, 3, 3, 2, 2, 8, 4, 0))\n#> [1] 5\nmovies_2006 <- mov[mov$Year == 2006, c(7,12)]\nmovies_2006 <- movies_2006[order(movies_2006$Year, movies_2006$Metascore),]\nhead(movies_2006)\n#>     Year Metascore\n#> 774 2006        36\n#> 309 2006        45\n#> 551 2006        45\n#> 594 2006        45\n#> 734 2006        46\n#> 531 2006        47\n\n# checking for any duplicates\nany(duplicated(movies_2006))\n#> [1] TRUE\n\nanyDuplicated(movies_2006)\n#> [1] 3\n\n# checking for duplicates\nduplicated(movies_2006)\n#>  [1] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n#> [10]  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE\n#> [19]  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE\n#> [28] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE\n#> [37] FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE\n\n# returning duplicates\nmovies_2006_dup <- movies_2006 [duplicated(movies_2006), ]\nhead(movies_2006_dup)\n#>     Year Metascore\n#> 551 2006        45\n#> 594 2006        45\n#> 859 2006        52\n#> 960 2006        53\n#> 902 2006        58\n#> 670 2006        64"},{"path":"advanced-data-manipulation.html","id":"get-unique-values","chapter":"4 Advanced data manipulation","heading":"4.13.2 Get unique values","text":"function unique() extracts unique values vector data frame.","code":"\n# return unique values\nunique(1:10)\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n\nunique(c(2, 1, 3, 6, 2, 4, 7, 0, 3, 3, 2, 2, 8, 4, 0))\n#> [1] 2 1 3 6 4 7 0 8\n\n# return unique values using duplicated()\nvt[!duplicated(c(2, 1, 3, 6, 2, 4, 7, 0, 3, 3, 2, 2, 8, 4, 0))]\n#> [1] 2 1 3 6 4 7 0 8\n\n# returning unique rows\nmovies_2006_uni <- unique(movies_2006)\nhead(movies_2006_uni)\n#>     Year Metascore\n#> 774 2006        36\n#> 309 2006        45\n#> 734 2006        46\n#> 531 2006        47\n#> 321 2006        48\n#> 775 2006        51\n\n# returning unique rows using duplicated()\nmovies_2006_uni <- subset(movies_2006, !duplicated(movies_2006))\nhead(movies_2006_uni)\n#>     Year Metascore\n#> 774 2006        36\n#> 309 2006        45\n#> 734 2006        46\n#> 531 2006        47\n#> 321 2006        48\n#> 775 2006        51"},{"path":"advanced-data-manipulation.html","id":"br-factor","chapter":"4 Advanced data manipulation","heading":"4.14 Factors in Base R","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"what-are-factors","chapter":"4 Advanced data manipulation","heading":"4.14.1 What are factors?","text":"Factors variables R take limited number different values usually known categorical values e.g. male female months year. can contain either strings integers stored internally vector integers integer corresponding one category.\nFactors can either ordered unordered e.g. low, medium, high ordered male female unordered.","code":""},{"path":"advanced-data-manipulation.html","id":"creating-a-factor","chapter":"4 Advanced data manipulation","heading":"4.14.2 Creating a factor","text":"function factor() used create factor, function .factor() used check factor.","code":"\n# creating a factor\n(fac <- factor(c('female', 'male', 'male', 'female', 'male', 'male', 'male', 'female')))\n#> [1] female male   male   female male   male   male   female\n#> Levels: female male\n\n# looking at type and class\ntypeof(fac)\n#> [1] \"integer\"\nclass(fac)\n#> [1] \"factor\"\n\n# checking if the object is a factor\nis.factor(fac)\n#> [1] TRUE"},{"path":"advanced-data-manipulation.html","id":"factor-attributes-and-structure","chapter":"4 Advanced data manipulation","heading":"4.14.3 Factor attributes and structure","text":"factor attribute levels represent categories factor.\nfunction levels() used get set levels nlevels() returns number categories.","code":"\n# get levels\nlevels(fac)\n#> [1] \"female\" \"male\"\n\n# set levels\n(levels(fac) <- c('f', 'm'))\n#> [1] \"f\" \"m\"\n\n# resetting levels\n(levels(fac) <- c('female', 'male'))\n#> [1] \"female\" \"male\"\n\n# number of categories\nnlevels(fac)\n#> [1] 2\n\n# structure of the factor\nstr(fac)\n#>  Factor w/ 2 levels \"female\",\"male\": 1 2 2 1 2 2 2 1\n\nattributes(fac)\n#> $levels\n#> [1] \"female\" \"male\"  \n#> \n#> $class\n#> [1] \"factor\"\n\n# count of elements by category\ntable(fac)\n#> fac\n#> female   male \n#>      3      5\n\n# internally factors are stored as integers\nunclass(fac)\n#> [1] 1 2 2 1 2 2 2 1\n#> attr(,\"levels\")\n#> [1] \"female\" \"male\""},{"path":"advanced-data-manipulation.html","id":"rearranging-levels","chapter":"4 Advanced data manipulation","heading":"4.14.4 Rearranging levels","text":"argument levels used rearrange levels factor.","code":"\nlev <- c('male', 'female')\n(fac1 <- factor(c('female', 'male', 'male', 'female', 'male', 'male', 'male', 'female'), \n               levels = lev))\n#> [1] female male   male   female male   male   male   female\n#> Levels: male female\n\n# comparing fac and fac1\nattributes(fac)\n#> $levels\n#> [1] \"female\" \"male\"  \n#> \n#> $class\n#> [1] \"factor\"\nattributes(fac1)\n#> $levels\n#> [1] \"male\"   \"female\"\n#> \n#> $class\n#> [1] \"factor\"\n\ntable(fac) \n#> fac\n#> female   male \n#>      3      5\ntable(fac1)\n#> fac1\n#>   male female \n#>      5      3"},{"path":"advanced-data-manipulation.html","id":"dropping-levels","chapter":"4 Advanced data manipulation","heading":"4.14.5 Dropping levels","text":"function droplevels() used drop unused levels factor.","code":"\n(fac1 <- factor(c('female', 'male', 'male', 'female', 'male', 'male', 'male', 'female'), \n               levels = c('male', 'female', 'boy', 'girl')))\n#> [1] female male   male   female male   male   male   female\n#> Levels: male female boy girl\n(fac1 <- droplevels(fac1))\n#> [1] female male   male   female male   male   male   female\n#> Levels: male female"},{"path":"advanced-data-manipulation.html","id":"changing-labels","chapter":"4 Advanced data manipulation","heading":"4.14.6 Changing labels","text":"argument label used change labels factor.","code":"\n# changing from male to M and from female to F\n(fac1 <- factor(c('female', 'male', 'male', 'female', 'male', 'male', 'male', 'female'), \n               levels = c('male', 'female'), \n               label = c('M', 'F')))\n#> [1] F M M F M M M F\n#> Levels: M F"},{"path":"advanced-data-manipulation.html","id":"ordered-factors","chapter":"4 Advanced data manipulation","heading":"4.14.7 Ordered factors","text":"Ordered factors factors whose orders matter example grading; greater B B greater C, forth. argument order = TRUE used create ordered factor. Also, function ordered() can used create ordered factor function .ordered() used check ordered factor. ordered factors, can use function min() max() determine minimum maximum values, respectively.functions max() min() work fac fac1 ordered, hence minimum maximum.","code":"\n(fac2 <- factor(c('female', 'male', 'male', 'female', 'male', 'male', 'male', 'female'), \n               levels = lev, \n               ordered = T))\n#> [1] female male   male   female male   male   male   female\n#> Levels: male < female\nattributes(fac)\n#> $levels\n#> [1] \"female\" \"male\"  \n#> \n#> $class\n#> [1] \"factor\"\nattributes(fac1)\n#> $levels\n#> [1] \"M\" \"F\"\n#> \n#> $class\n#> [1] \"factor\"\nattributes(fac2)\n#> $levels\n#> [1] \"male\"   \"female\"\n#> \n#> $class\n#> [1] \"ordered\" \"factor\"\n\n# getting minimum and maximum values\nmin(fac2)\n#> [1] male\n#> Levels: male < female\nmax(fac2)\n#> [1] female\n#> Levels: male < female\n\n# checking for ordered factor\nis.ordered(fac2)\n#> [1] TRUE\n\nordered(c('female', 'male', 'male', 'female', 'male', 'male', 'male', 'female'))\n#> [1] female male   male   female male   male   male   female\n#> Levels: female < male\nordered(c('female', 'male', 'male', 'female', 'male', 'male', 'male', 'female'), \n        levels = c('male', 'female'))\n#> [1] female male   male   female male   male   male   female\n#> Levels: male < female"},{"path":"advanced-data-manipulation.html","id":"converting-from-character-to-factor","chapter":"4 Advanced data manipulation","heading":"4.14.8 Converting from character to factor","text":"function .factor() converts factor, possible less flexible factor(). used care levels, label order.","code":"\nmonth.name\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\nclass(month.name)\n#> [1] \"character\"\n\n# converting to factor\n(month_fac <- as.factor(month.name))\n#>  [1] January   February  March     April     May      \n#>  [6] June      July      August    September October  \n#> [11] November  December \n#> 12 Levels: April August December February January ... September"},{"path":"advanced-data-manipulation.html","id":"converting-from-factor-to-character","chapter":"4 Advanced data manipulation","heading":"4.14.9 Converting from factor to character","text":"function .character() converts factor character.(month_char <- .character(month_fac))","code":""},{"path":"advanced-data-manipulation.html","id":"converting-from-numeric-to-factor","chapter":"4 Advanced data manipulation","heading":"4.14.10 Converting from numeric to factor","text":"function cut() used convert numeric vector factor. bins numbers ranges can treated categories.","code":"\nscores <- c(15,65,68,46,15,61,32,13,15,46,13,21,89,89,44,51,32,16,18,95,46,16,65,46)\n\n# create factors from numeric\ncut(scores, breaks = 5)\n#>  [1] (12.9,29.4] (62.2,78.6] (62.2,78.6] (45.8,62.2]\n#>  [5] (12.9,29.4] (45.8,62.2] (29.4,45.8] (12.9,29.4]\n#>  [9] (12.9,29.4] (45.8,62.2] (12.9,29.4] (12.9,29.4]\n#> [13] (78.6,95.1] (78.6,95.1] (29.4,45.8] (45.8,62.2]\n#> [17] (29.4,45.8] (12.9,29.4] (12.9,29.4] (78.6,95.1]\n#> [21] (45.8,62.2] (12.9,29.4] (62.2,78.6] (45.8,62.2]\n#> 5 Levels: (12.9,29.4] (29.4,45.8] ... (78.6,95.1]\n\n# return categories\nlevels(cut(scores, breaks = 5))\n#> [1] \"(12.9,29.4]\" \"(29.4,45.8]\" \"(45.8,62.2]\" \"(62.2,78.6]\"\n#> [5] \"(78.6,95.1]\"\n\n# number of levels\nnlevels(cut(scores, breaks = 5))\n#> [1] 5\n\n# check class\nclass(cut(scores, breaks = 5))\n#> [1] \"factor\"\n\n# controlling breaks\ncut(scores, breaks = c(0, 40 , 50, 60, 80, 100))\n#>  [1] (0,40]   (60,80]  (60,80]  (40,50]  (0,40]   (60,80] \n#>  [7] (0,40]   (0,40]   (0,40]   (40,50]  (0,40]   (0,40]  \n#> [13] (80,100] (80,100] (40,50]  (50,60]  (0,40]   (0,40]  \n#> [19] (0,40]   (80,100] (40,50]  (0,40]   (60,80]  (40,50] \n#> Levels: (0,40] (40,50] (50,60] (60,80] (80,100]\n\n# adding labels\ncut(scores, breaks = c(0, 40 , 50, 60, 80, 100), labels = c('F', 'D', 'C', 'B', 'A'))\n#>  [1] F B B D F B F F F D F F A A D C F F F A D F B D\n#> Levels: F D C B A\n\n# majority of the students failed\ntable(cut(scores, breaks = c(0, 40 , 50, 60, 80, 100), labels = c('F', 'D', 'C', 'B', 'A')))\n#> \n#>  F  D  C  B  A \n#> 11  5  1  4  3"},{"path":"advanced-data-manipulation.html","id":"converting-from-factor-to-numeric","chapter":"4 Advanced data manipulation","heading":"4.14.11 Converting from factor to numeric","text":"convert factor numeric, function .numeric() work. use , first convert factor character using .character() levels(fac)[fac]. make use methods achieve objective.","code":"\nnum_vec <- c(15,65,68,46,15,61,32,13,15,46,13,21,89,89,44,51,32,16,18,95,46,16,65,46)\nmean(num_vec)\n#> [1] 42.375\n\n#converting to factor\n(fac3 <- factor(num_vec))\n#>  [1] 15 65 68 46 15 61 32 13 15 46 13 21 89 89 44 51 32 16\n#> [19] 18 95 46 16 65 46\n#> Levels: 13 15 16 18 21 32 44 46 51 61 65 68 89 95\n\n# calculating mean\nmean(fac3)\n#> [1] NA\n\n\n# as.numeric() doesn't seem to work \nmean(as.numeric(fac3))\n#> [1] 6.958333\n\n\n# using as.character\nmean(as.numeric(as.character(fac3)))\n#> [1] 42.375\n\n# using levels()\nmean(as.numeric(levels(fac3)[fac3]))\n#> [1] 42.375"},{"path":"advanced-data-manipulation.html","id":"br-string","chapter":"4 Advanced data manipulation","heading":"4.15 String manipulation with base R","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"string-length-and-character-count","chapter":"4 Advanced data manipulation","heading":"4.15.1 String length and character count","text":"function length() returns count elements vector.\nfunction nchar() returns count letters string.","code":"\nmonth.name\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\n\n#count of elements\nlength(month.name)\n#> [1] 12\n\n# count of letters\nmonth.name\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\nnchar(month.name)\n#>  [1] 7 8 5 5 3 4 4 6 9 7 8 8"},{"path":"advanced-data-manipulation.html","id":"strings-formatting-case-folding","chapter":"4 Advanced data manipulation","heading":"4.15.2 Strings formatting (case-folding)","text":"functions toupper() tolower() used convert upper lower cases, respectively casefold() wrapper functions.","code":"\n# uppercase\ntoupper(month.name)\n#>  [1] \"JANUARY\"   \"FEBRUARY\"  \"MARCH\"     \"APRIL\"    \n#>  [5] \"MAY\"       \"JUNE\"      \"JULY\"      \"AUGUST\"   \n#>  [9] \"SEPTEMBER\" \"OCTOBER\"   \"NOVEMBER\"  \"DECEMBER\"\ncasefold(month.name, upper = TRUE)\n#>  [1] \"JANUARY\"   \"FEBRUARY\"  \"MARCH\"     \"APRIL\"    \n#>  [5] \"MAY\"       \"JUNE\"      \"JULY\"      \"AUGUST\"   \n#>  [9] \"SEPTEMBER\" \"OCTOBER\"   \"NOVEMBER\"  \"DECEMBER\"\n\n# lowercase\ntolower(month.name)\n#>  [1] \"january\"   \"february\"  \"march\"     \"april\"    \n#>  [5] \"may\"       \"june\"      \"july\"      \"august\"   \n#>  [9] \"september\" \"october\"   \"november\"  \"december\"\ncasefold(month.name, upper = FALSE)\n#>  [1] \"january\"   \"february\"  \"march\"     \"april\"    \n#>  [5] \"may\"       \"june\"      \"july\"      \"august\"   \n#>  [9] \"september\" \"october\"   \"november\"  \"december\""},{"path":"advanced-data-manipulation.html","id":"join-and-split-strings","chapter":"4 Advanced data manipulation","heading":"4.15.3 Join and Split strings","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"joining-strings-using-cat","chapter":"4 Advanced data manipulation","heading":"4.15.3.1 Joining strings using cat()","text":"function cat() converts arguments strings concatenates appending separator string (given sep) .Newlines tabs can added using \\n newline \\t tabs.function cat() can write output directly file file name passed .","code":"\na <- month.name[1]\nb <- month.name[2]\nc <- month.name[3]\ncat(b,'comes after', a ,'but comes before', c)\n#> February comes after January but comes before March\ncat(b,'comes before', a ,'but comes after', c, sep = '/')\n#> February/comes before/January/but comes after/March\ncat(month.name[1:6], sep = ' - ')\n#> January - February - March - April - May - June\ncat(month.name[1:6], sep = ' <> ')\n#> January <> February <> March <> April <> May <> June\n# adding a new line\ncat(b,'comes after\\n', a ,'but comes before', c)\n#> February comes after\n#>  January but comes before March\n\n# adding a tab\ncat(b,'comes after\\t', a ,'but comes before', c)\n#> February comes after  January but comes before March\n# writing to disc\ncat(month.name, sep = ' <> ', file = \"output/data/months.txt\")\n\n# checking if file exists\nfile.exists('output/data/months.txt')\n#> [1] TRUE\n\n# removing file\nfile.remove('output/data/months.txt')\n#> [1] TRUE"},{"path":"advanced-data-manipulation.html","id":"joining-strings-using-paste-and-paste0","chapter":"4 Advanced data manipulation","heading":"4.15.3.2 Joining strings using paste() and paste0()","text":"function paste() concatenate vectors converting character separating string given sep. concatenates multiple vectors element element give new character vector one shorter, recycling occurs zero-length arguments recycled ““.\nsingle vector, simply converted character vector argument collapse set, elements condensed single string.function paste0(...) equivalent paste(…, sep = ’’), slightly efficient.collapse argument used collapse elements returned single string.","code":"\n# combining elements into a character vector\npaste('a', 'b')\n#> [1] \"a b\"\npaste(1, 2, 3, 4)\n#> [1] \"1 2 3 4\"\n\n\n# using a sep\npaste('a', 'b', sep = '')\n#> [1] \"ab\"\npaste(1, 2, 3, 4, sep = '')\n#> [1] \"1234\"\n\n\n# using paste0\npaste0('a', 'b')\n#> [1] \"ab\"\npaste0(1, 2, 3 ,4)\n#> [1] \"1234\"\n\n# on a single vector\npaste(c('a', 'b'), sep = ' <> ')\n#> [1] \"a\" \"b\"\npaste(c(1, 2), sep = ' <> ')\n#> [1] \"1\" \"2\"\n\n# two or more vectors\npaste(c('a', 'b'), c('c', 'd'), sep = ' <> ')\n#> [1] \"a <> c\" \"b <> d\"\npaste0(c('a', 'b'), c('c', 'd'))\n#> [1] \"ac\" \"bd\"\npaste0(1:5, 6:10)\n#> [1] \"16\"  \"27\"  \"38\"  \"49\"  \"510\"\npaste(1:5, 10:20)\n#>  [1] \"1 10\" \"2 11\" \"3 12\" \"4 13\" \"5 14\" \"1 15\" \"2 16\" \"3 17\"\n#>  [9] \"4 18\" \"5 19\" \"1 20\"\npaste(1:5, 10:20, c('a','b','c'))\n#>  [1] \"1 10 a\" \"2 11 b\" \"3 12 c\" \"4 13 a\" \"5 14 b\" \"1 15 c\"\n#>  [7] \"2 16 a\" \"3 17 b\" \"4 18 c\" \"5 19 a\" \"1 20 b\"\n\n# combining character and variables with paste\npaste(b,'comes after', a ,'but comes before', c)\n#> [1] \"February comes after January but comes before March\"\npaste(b,'comes after', a ,'but comes before', c, sep = \"    \")\n#> [1] \"February    comes after    January    but comes before    March\"\npaste(b,'comes after', a ,'but comes before', c, sep = \"/\")\n#> [1] \"February/comes after/January/but comes before/March\"\npaste('version 1.', 1:5, sep = '')\n#> [1] \"version 1.1\" \"version 1.2\" \"version 1.3\" \"version 1.4\"\n#> [5] \"version 1.5\"\n\n# combining character and variables with paste0\npaste0(b,' comes after ', a ,' but comes before ', c)\n#> [1] \"February comes after January but comes before March\"\npaste0(b,'    comes after    ', a ,'    but comes before    ', c)\n#> [1] \"February    comes after    January    but comes before    March\"\n\npaste0(b,'/comes after/', a ,'/but comes before/', c)\n#> [1] \"February/comes after/January/but comes before/March\"\npaste0('version 1.', 1:5)\n#> [1] \"version 1.1\" \"version 1.2\" \"version 1.3\" \"version 1.4\"\n#> [5] \"version 1.5\"\n# collapsing vectors\npaste(1:10, collapse = '~')\n#> [1] \"1~2~3~4~5~6~7~8~9~10\"\npaste(c('a', 'b'), c('c', 'd'), collapse = ' <> ')\n#> [1] \"a c <> b d\"\npaste0(c('a', 'b'), c('c', 'd'), collapse = ' <> ')\n#> [1] \"ac <> bd\"\n\npaste0(1:5, 6:10, collapse = '--')\n#> [1] \"16--27--38--49--510\"\npaste(month.name[1:6], collapse = \" - \")\n#> [1] \"January - February - March - April - May - June\""},{"path":"advanced-data-manipulation.html","id":"joining-strings-using-sprintf","chapter":"4 Advanced data manipulation","heading":"4.15.3.3 Joining strings using sprintf()","text":"function sprintf() returns character vector containing formatted combination text variable values.\nformat variables passed using one following characters aAdifeEgGosxX% start %.","code":""},{"path":"advanced-data-manipulation.html","id":"formatting-with-integers","chapter":"4 Advanced data manipulation","heading":"4.15.3.3.1 Formatting with integers","text":"command %d used formatting integers.","code":"\n# using an integer as a variable\nx <- 2\nsprintf('%d * %d = %d', x, x, x ** 2)\n#> [1] \"2 * 2 = 4\"\nx <- c(1:4)\ny <- x ** 2\nsprintf('%d squared is equal to %d', x, y)\n#> [1] \"1 squared is equal to 1\"  \"2 squared is equal to 4\" \n#> [3] \"3 squared is equal to 9\"  \"4 squared is equal to 16\"\n\n### padding integers with zeros\nnum <- c(123, 1, 100, 200, 10200, 25000)\nsprintf('my registration number is %05d', num)\n#> [1] \"my registration number is 00123\"\n#> [2] \"my registration number is 00001\"\n#> [3] \"my registration number is 00100\"\n#> [4] \"my registration number is 00200\"\n#> [5] \"my registration number is 10200\"\n#> [6] \"my registration number is 25000\""},{"path":"advanced-data-manipulation.html","id":"formatting-with-strings","chapter":"4 Advanced data manipulation","heading":"4.15.3.3.2 Formatting with strings","text":"command %s used formatting strings.","code":"\n# using a string as a variable\nx <- 'my name is'\ny <- 'james'\nz <- 'london'\nsprintf('%s %s and i live and work in %s', x, y, z)\n#> [1] \"my name is james and i live and work in london\"\n\n# combining strings and integers\nx <- 'my name is'\ny <- 'james'\nz <- 35\nsprintf('%s %s and i am %d years', x, y, z)\n#> [1] \"my name is james and i am 35 years\"\n\nnames = c('paul', 'alphonse', 'michael', 'james', 'samson', 'terence', 'derin')\nage = c(30, 35, 32, 37, 29, 40, 30)\nsprintf('i am %s and i am %d years old', names, age)\n#> [1] \"i am paul and i am 30 years old\"    \n#> [2] \"i am alphonse and i am 35 years old\"\n#> [3] \"i am michael and i am 32 years old\" \n#> [4] \"i am james and i am 37 years old\"   \n#> [5] \"i am samson and i am 29 years old\"  \n#> [6] \"i am terence and i am 40 years old\" \n#> [7] \"i am derin and i am 30 years old\""},{"path":"advanced-data-manipulation.html","id":"formatting-with-doubles-or-floating-points","chapter":"4 Advanced data manipulation","heading":"4.15.3.3.3 Formatting with doubles or floating-points","text":"command %f used formatting doubles either %e %E formatting exponential.","code":"\n# using doubles as a variable\nx <- 1000/6\nsprintf('1000 divided by 3 is %f', x)\n#> [1] \"1000 divided by 3 is 166.666667\"\n\n# rounding a double to the nearest decimal\nsprintf('1000 divided by 3 is %.3f', x)\n#> [1] \"1000 divided by 3 is 166.667\"\nsprintf('1000 divided by 3 is %.2f', x)\n#> [1] \"1000 divided by 3 is 166.67\"\nsprintf('1000 divided by 3 is %.1f', x)\n#> [1] \"1000 divided by 3 is 166.7\"\n\n# rounding a double to the nearest whole number\nsprintf('1000 divided by 3 is %1.f', x)\n#> [1] \"1000 divided by 3 is 167\"\n\n# printing a plus (+) in front of a double\nsprintf('+1000 divided by 3 is %+.1f', x)\n#> [1] \"+1000 divided by 3 is +166.7\"\n\n# printing space in front of a double\nsprintf('1000 divided by 3 is %f', x)\n#> [1] \"1000 divided by 3 is 166.666667\"\nsprintf('1000 divided by 3 is % f', x)\n#> [1] \"1000 divided by 3 is  166.666667\"\n\n# exponential\nsprintf(\"%e\", pi)\n#> [1] \"3.141593e+00\""},{"path":"advanced-data-manipulation.html","id":"splitting-strings-using-strsplit","chapter":"4 Advanced data manipulation","heading":"4.15.3.4 Splitting strings using strsplit()","text":"function strsplit() splits elements character vector substrings specific split character. returns list.","code":"\nstr(strsplit(c('2020-01-01', '2019-03-31', '2018-06-30'), split = \"-\"))\n#> List of 3\n#>  $ : chr [1:3] \"2020\" \"01\" \"01\"\n#>  $ : chr [1:3] \"2019\" \"03\" \"31\"\n#>  $ : chr [1:3] \"2018\" \"06\" \"30\"\nstr(strsplit(c('2020 01 01', '2019 03 31', '2018 06 30'), split = \" \"))\n#> List of 3\n#>  $ : chr [1:3] \"2020\" \"01\" \"01\"\n#>  $ : chr [1:3] \"2019\" \"03\" \"31\"\n#>  $ : chr [1:3] \"2018\" \"06\" \"30\"\nstr(strsplit(c('2020, 01, 01', '2019, 03, 31', '2018, 06, 30'), split = \", \"))\n#> List of 3\n#>  $ : chr [1:3] \"2020\" \"01\" \"01\"\n#>  $ : chr [1:3] \"2019\" \"03\" \"31\"\n#>  $ : chr [1:3] \"2018\" \"06\" \"30\""},{"path":"advanced-data-manipulation.html","id":"extract-and-replace-part-of-strings","chapter":"4 Advanced data manipulation","heading":"4.15.4 Extract and Replace part of strings","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"extracting-substring-using-substr","chapter":"4 Advanced data manipulation","heading":"4.15.4.1 Extracting substring using substr()","text":"function substr() extracts substring string indexing. uses start beginning position stop ending position. like indexing applied string.","code":"\nvar <- c('2020-01-01', '2019-03-31', '2018-06-30')\nsubstr(var, start = 1, stop = 4)\n#> [1] \"2020\" \"2019\" \"2018\"\nsubstr(var, start = 6, stop = 7)\n#> [1] \"01\" \"03\" \"06\"\nsubstr(var, start = 9, stop = 10)\n#> [1] \"01\" \"31\" \"30\""},{"path":"advanced-data-manipulation.html","id":"replacing-substring-using-substr","chapter":"4 Advanced data manipulation","heading":"4.15.4.2 Replacing substring using substr()","text":"function substr() also used replace substring string assigning different string extracted substring.","code":"\nvar <- c('2020-01-01', '2019-03-31', '2018-06-30')\nsubstr(var, start = 1, stop = 4) <- c('2010', '2011', '2012')\nvar\n#> [1] \"2010-01-01\" \"2011-03-31\" \"2012-06-30\"\n\nweekdays <- c('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday')\nsubstr(weekdays, start = 1, stop = 1) <- toupper(substr(weekdays, start = 1, stop = 1))\nweekdays\n#> [1] \"Monday\"    \"Tuesday\"   \"Wednesday\" \"Thursday\" \n#> [5] \"Friday\"    \"Saturday\"  \"Sunday\""},{"path":"advanced-data-manipulation.html","id":"replacing-substrings-using-sub","chapter":"4 Advanced data manipulation","heading":"4.15.4.3 Replacing substrings using sub()","text":"function sub() replaces substring first occurrence string.","code":"\nvar <- c('2020-01-01', '2019-03-31', '2018-06-30')\nsub(\"-\", \"\", var)\n#> [1] \"202001-01\" \"201903-31\" \"201806-30\"\nsub(\"-\", \" \", var)\n#> [1] \"2020 01-01\" \"2019 03-31\" \"2018 06-30\""},{"path":"advanced-data-manipulation.html","id":"replacing-substrings-using-gsub","chapter":"4 Advanced data manipulation","heading":"4.15.4.4 Replacing substrings using gsub()","text":"function gsub() replaces substring throughout string.","code":"\nvar <- c('2020-01-01', '2019-03-31', '2018-06-30')\ngsub(\"-\", \"/\", var)\n#> [1] \"2020/01/01\" \"2019/03/31\" \"2018/06/30\"\ngsub(\"-\", \" \", var)\n#> [1] \"2020 01 01\" \"2019 03 31\" \"2018 06 30\""},{"path":"advanced-data-manipulation.html","id":"replacing-substring-using-chartr","chapter":"4 Advanced data manipulation","heading":"4.15.4.5 Replacing substring using chartr()","text":"function chartr() replaces substring throughout string.","code":"\nvar <- c('2020-01-01', '2019-03-31', '2018-06-30')\nchartr(old = \"-\", new = \"/\", var)\n#> [1] \"2020/01/01\" \"2019/03/31\" \"2018/06/30\"\nchartr(old = \"-\", new = \" \", var)\n#> [1] \"2020 01 01\" \"2019 03 31\" \"2018 06 30\""},{"path":"advanced-data-manipulation.html","id":"remove-white-spaces-and-clean-string-values","chapter":"4 Advanced data manipulation","heading":"4.15.4.6 Remove white spaces and clean string values","text":"function trimws() removes white spaces.","code":"\ntrimws(c(' 2020-01-01 ', ' 2019-03-31 ', ' 2018-06-30 '))\n#> [1] \"2020-01-01\" \"2019-03-31\" \"2018-06-30\""},{"path":"advanced-data-manipulation.html","id":"pattern-matching-using-regular-expression","chapter":"4 Advanced data manipulation","heading":"4.15.5 Pattern matching using regular expression","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"regex-functions","chapter":"4 Advanced data manipulation","heading":"4.15.5.1 Regex functions","text":"grep()grepl()regexpr()gregexpr()regexec()sub()gsub()","code":""},{"path":"advanced-data-manipulation.html","id":"the-grep-function","chapter":"4 Advanced data manipulation","heading":"4.15.5.1.1 The grep() function","text":"function grep() returns index position value elements match pattern.","code":"\n# returning index position\nmonth.name\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\ngrep(pattern = 'uary', month.name)\n#> [1] 1 2\n\n# returning values\ngrep('uary', month.name, value = TRUE)\n#> [1] \"January\"  \"February\"\n\n# ignoring case\ngrep('ju', month.name, value = TRUE)\n#> character(0)\ngrep('ju', month.name, ignore.case = TRUE, value = TRUE)\n#> [1] \"June\" \"July\""},{"path":"advanced-data-manipulation.html","id":"the-grepl-function","chapter":"4 Advanced data manipulation","heading":"4.15.5.2 The grepl() function","text":"function grepl() returns TRUE pattern match FALSE pattern match.","code":"\ngrepl('uary', month.name)\n#>  [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#> [10] FALSE FALSE FALSE\ngrepl('ju', month.name, ignore.case = TRUE)\n#>  [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE\n#> [10] FALSE FALSE FALSE"},{"path":"advanced-data-manipulation.html","id":"the-regexpr-function","chapter":"4 Advanced data manipulation","heading":"4.15.5.3 The regexpr() function","text":"function regexpr() returns position first pattern match element -1 representing pattern match.","code":"\nregexpr('ber', month.name, ignore.case = TRUE)\n#>  [1] -1 -1 -1 -1 -1 -1 -1 -1  7  5  6  6\n#> attr(,\"match.length\")\n#>  [1] -1 -1 -1 -1 -1 -1 -1 -1  3  3  3  3\n#> attr(,\"index.type\")\n#> [1] \"chars\"\n#> attr(,\"useBytes\")\n#> [1] TRUE\n(st <- state.name[20:25])\n#> [1] \"Maryland\"      \"Massachusetts\" \"Michigan\"     \n#> [4] \"Minnesota\"     \"Mississippi\"   \"Missouri\"\nregexpr('ss', st, ignore.case = TRUE)\n#> [1] -1  3 -1 -1  3  3\n#> attr(,\"match.length\")\n#> [1] -1  2 -1 -1  2  2\n#> attr(,\"index.type\")\n#> [1] \"chars\"\n#> attr(,\"useBytes\")\n#> [1] TRUE"},{"path":"advanced-data-manipulation.html","id":"the-gregexpr-function","chapter":"4 Advanced data manipulation","heading":"4.15.5.4 The gregexpr() function","text":"function gregexpr() returns position pattern matches element -1 representing pattern match.","code":"\n# same as as.list(regexpr())\n(st <- state.name[23:25])\n#> [1] \"Minnesota\"   \"Mississippi\" \"Missouri\"\ngregexpr('ss', st, ignore.case = TRUE)\n#> [[1]]\n#> [1] -1\n#> attr(,\"match.length\")\n#> [1] -1\n#> attr(,\"index.type\")\n#> [1] \"chars\"\n#> attr(,\"useBytes\")\n#> [1] TRUE\n#> \n#> [[2]]\n#> [1] 3 6\n#> attr(,\"match.length\")\n#> [1] 2 2\n#> attr(,\"index.type\")\n#> [1] \"chars\"\n#> attr(,\"useBytes\")\n#> [1] TRUE\n#> \n#> [[3]]\n#> [1] 3\n#> attr(,\"match.length\")\n#> [1] 2\n#> attr(,\"index.type\")\n#> [1] \"chars\"\n#> attr(,\"useBytes\")\n#> [1] TRUE"},{"path":"advanced-data-manipulation.html","id":"regex-operations","chapter":"4 Advanced data manipulation","heading":"4.15.5.5 Regex Operations","text":"","code":""},{"path":"advanced-data-manipulation.html","id":"matching-spaces","chapter":"4 Advanced data manipulation","heading":"4.15.5.5.1 Matching spaces","text":"[[:blank:]] matches space tab characters[[:space:]] matches tab, newline, vertical tab, form feed, carriage return, space\\s matches space character\\S matches non-space characterMatching alphabetic characters[[:alpha:]] matches alphabetic characters[[:lower:]] matches lowercase characters[[:upper:]] matches uppercase charactersMatching numerical digits[[:digit:]] \\d matches numbers 0-9.Matching letters numbers (alphanumeric characters)[[:alnum:]] matches alphanumeric characters ([[:alpha:]] [[:digit:]])[[:xdigit:]] matches Hexadecimal digits (0 1 2 3 4 5 6 7 8 9 B C D E F b c d e f)\\w matches word charactersMatching punctuation[[:punct:]] matches punctuation characters.\\W matches non-word characters.Matching letters, numbers, punctuation[[:graph:]] matches graphical characters ([[:alpha:]] [[:punct:]]). matches character (except newline character)Matching whitespace\\s used match whitespaces.Matching newline\\n used match newline.Matching tab\\t used match tabs.","code":"\n# creating a character vector\nvar <- c('2020 01 01', '2019 03 31', '2018 06 30')\n\n# POSIX Character\ngsub('[[:space:]]', '-', var)\n#> [1] \"2020-01-01\" \"2019-03-31\" \"2018-06-30\"\ngsub('[[:space:]]', '/', var)\n#> [1] \"2020/01/01\" \"2019/03/31\" \"2018/06/30\"\ngsub('[[:blank:]]', '_', var)\n#> [1] \"2020_01_01\" \"2019_03_31\" \"2018_06_30\"\ngsub('[[:blank:]]', '/', var)\n#> [1] \"2020/01/01\" \"2019/03/31\" \"2018/06/30\"\n\n# Sequences\ngsub('\\\\s', '-', var)\n#> [1] \"2020-01-01\" \"2019-03-31\" \"2018-06-30\"\ngsub('\\\\s', '/', var)\n#> [1] \"2020/01/01\" \"2019/03/31\" \"2018/06/30\"\ngsub('\\\\s', '_', var)\n#> [1] \"2020_01_01\" \"2019_03_31\" \"2018_06_30\"\ngsub('\\\\s', '/', var)\n#> [1] \"2020/01/01\" \"2019/03/31\" \"2018/06/30\"\n\n# using strsplit() to split based on a pattern\nvar <- c('2020 01 01', '2019 03 31', '2018 06 30')\nstr(strsplit(var, split = '\\\\s'))\n#> List of 3\n#>  $ : chr [1:3] \"2020\" \"01\" \"01\"\n#>  $ : chr [1:3] \"2019\" \"03\" \"31\"\n#>  $ : chr [1:3] \"2018\" \"06\" \"30\"\n\n# matching non-space character with \\\\S\nvar <- c('2020 01 01', '2019 03 31', '2018 06 30')\ngsub('\\\\S', '-', var)\n#> [1] \"---- -- --\" \"---- -- --\" \"---- -- --\"\ngsub('\\\\S', '/', var)\n#> [1] \"//// // //\" \"//// // //\" \"//// // //\"\ngsub('\\\\S', '_', var)\n#> [1] \"____ __ __\" \"____ __ __\" \"____ __ __\"\ngsub('\\\\S', '/', var)\n#> [1] \"//// // //\" \"//// // //\" \"//// // //\"\nvar <- 'a1b2c3d4e5f'\n\n# matching alphabetic characters\ngsub('[[:alpha:]]', '', var)\n#> [1] \"12345\"\ngsub('[[:alpha:]]', '-', var)\n#> [1] \"-1-2-3-4-5-\"\n\n# matching lowercase letters\ngsub('[[:lower:]]', '', month.name)\n#>  [1] \"J\" \"F\" \"M\" \"A\" \"M\" \"J\" \"J\" \"A\" \"S\" \"O\" \"N\" \"D\"\n\n# matching uppercase letters\ngsub('[[:upper:]]', '', month.name)\n#>  [1] \"anuary\"   \"ebruary\"  \"arch\"     \"pril\"     \"ay\"      \n#>  [6] \"une\"      \"uly\"      \"ugust\"    \"eptember\" \"ctober\"  \n#> [11] \"ovember\"  \"ecember\"\nvar <- 'a1b2c3d4e5f'\n\n# POSIX Character\ngsub('[[:digit:]]', '', var)\n#> [1] \"abcdef\"\ngsub('[[:digit:]]', '-', var)\n#> [1] \"a-b-c-d-e-f\"\n\n# Sequences\ngsub('\\\\d', '', var)\n#> [1] \"abcdef\"\ngsub('\\\\d', '-', var)\n#> [1] \"a-b-c-d-e-f\"\nvar <- 'a1@; 2#4c $8`*%f^!1~0&^h*()j'\n\n# alphanumeric characters\ngsub('[[:alnum:]]', '', var)\n#> [1] \"@; # $`*%^!~&^*()\"\ngsub('[[:alnum:]]', '-', var)\n#> [1] \"--@; -#-- $-`*%-^!-~-&^-*()-\"\n\n# Hexadecimal digits\ngsub('[[:xdigit:]]', '', var)\n#> [1] \"@; # $`*%^!~&^h*()j\"\ngsub('[[:xdigit:]]', '-', var)\n#> [1] \"--@; -#-- $-`*%-^!-~-&^h*()j\"\n\n# matching word characters\ngsub('\\\\w', '', var)\n#> [1] \"@; # $`*%^!~&^*()\"\ngsub('\\\\w', '-', var)\n#> [1] \"--@; -#-- $-`*%-^!-~-&^-*()-\"\nvar <- 'a1@; 2#4c $8`*%f^!1~0&^h*()j'\n\n# matching punctuation characters\ngsub('[[:punct:]]', '', var)\n#> [1] \"a1 24c 8f10hj\"\ngsub('[[:punct:]]', '-', var)\n#> [1] \"a1-- 2-4c -8---f--1-0--h---j\"\n\n# matching non-word characters\ngsub('\\\\W', '', var)\n#> [1] \"a124c8f10hj\"\ngsub('\\\\W', '-', var)\n#> [1] \"a1---2-4c--8---f--1-0--h---j\"\n# matching graphical characters\nvar <- 'a1@; 2#4c $8%f^!10&^h*()j'\ngsub('[[:graph:]]', ' ', var)\n#> [1] \"                         \"\n\n# matching anything but newline characters\nvar <- 'a1@; 2#4c $8%f^!10&^h*()j'\ngsub('.', ' ', var)\n#> [1] \"                         \"\n# removing whitespace\ngsub('\\\\s', '', c(' 2020-01-01 ', ' 2019-03-31 ', ' 2018-06-30 '))\n#> [1] \"2020-01-01\" \"2019-03-31\" \"2018-06-30\"\ncat('good morning \\n i am fru kinglsy \\n i will be your instructor')\n#> good morning \n#>  i am fru kinglsy \n#>  i will be your instructor\n\n# replacing newline with tab\ngsub('\\\\n', '\\t', 'good morning \\n i am fru kinglsy \\n i will be your instructor')\n#> [1] \"good morning \\t i am fru kinglsy \\t i will be your instructor\"\n\n# print it out\ncat(gsub('\\\\n', '\\t', 'good morning \\n i am fru kinglsy \\n i will be your instructor'))\n#> good morning      i am fru kinglsy    i will be your instructor\n# replacing tab by newline\ngsub('\\\\t', '\\n', 'good morning \\t i am fru kinglsy \\t i will your instructor')\n#> [1] \"good morning \\n i am fru kinglsy \\n i will your instructor\"\n\n# printing it out\ncat(gsub('\\\\t', '\\n', 'good morning \\t i am fru kinglsy \\t i will your instructor'))\n#> good morning \n#>  i am fru kinglsy \n#>  i will your instructor"},{"path":"advanced-data-manipulation.html","id":"matching-metacharacters","chapter":"4 Advanced data manipulation","heading":"4.15.5.6 Matching metacharacters","text":"Metacharacters consist non-alphanumeric symbols $ . ^ * | + ! ?  () {} [].\nmatched, escaping double backslash \\.Alternates rangesEither (|)set characters ([]) matches set characters.ranges (-) matches range characters.[^abc]Anchors^ matches pattern start string.\n/ $ matches pattern end string.Quantifiersmatches pattern 0 times\nmatches pattern 0 timesmatches pattern 1 times\nmatches pattern 1 times? matches pattern 0 one timex{m} matches x exactly m timesx{m,} matches x exactly m timesx{m,n} matches x exactly m n timesGroups() matches group patterns.","code":"\n# matching $\nsales <- \n  c('$25000', '$20000', '$22500', '$24000', '$30000', '$35000')\nsub('\\\\$', '', sales)\n#> [1] \"25000\" \"20000\" \"22500\" \"24000\" \"30000\" \"35000\"\n\n# matching +\nsales <- \n  c('+25000', '+20000', '+22500', '+24000', '+30000', '+35000')\nsub('\\\\+', '', sales)\n#> [1] \"25000\" \"20000\" \"22500\" \"24000\" \"30000\" \"35000\"\n\n# matching .\ndates <- \n  c('01.01.2012', '01.02.2012', '01.03.2012', '01.04.2012', '01.05.2012', '01.06.2012')\ngsub('\\\\.', '-', dates)\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n\n# matching *\ndates <- \n  c('01*01*2012', '01*02*2012', '01*03*2012', '01*04*2012', '01*05*2012', '01*06*2012')\ngsub('\\\\*', '-', dates)\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\" \"01-05-2012\"\n#> [6] \"01-06-2012\"\n\n# matching ^\ndates <- \n  c('01^01^2012', '01^02^2012', '01^03^2012', '01^04^2012', '01^05^2012', '01^06^2012')\ngsub('\\\\^', '-', dates)\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n\n# matching |\ndates <- \n  c('01|01|2012', '01|02|2012', '01|03|2012', '01|04|2012', '01|05|2012', '01|06|2012')\ngsub('\\\\|', '-', dates)\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n\n# matching \\\ndates <- \n  c('01\\\\01\\\\2012', '01\\\\02\\\\2012', '01\\\\03\\\\2012', \n    '01\\\\04\\\\2012', '01\\\\05\\\\2012', '01\\\\06\\\\2012')\ngsub('\\\\\\\\', '-', dates)\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n\n# matching \\\\.\ndates <- \n  c('01\\\\.01\\\\.2012', '01\\\\.02\\\\.2012', '01\\\\.03\\\\.2012', \n    '01\\\\.04\\\\.2012', '01\\\\.05\\\\.2012', '01\\\\.06\\\\.2012')\ngsub('\\\\\\\\\\\\.', '-', dates)\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n# replacing either uary or ember or ober\ngsub('uary|ember|ober', '-', month.name)\n#>  [1] \"Jan-\"   \"Febr-\"  \"March\"  \"April\"  \"May\"    \"June\"  \n#>  [7] \"July\"   \"August\" \"Sept-\"  \"Oct-\"   \"Nov-\"   \"Dec-\"\n# matching vowels\ngsub('[aeiou]', '*', month.name)\n#>  [1] \"J*n**ry\"   \"F*br**ry\"  \"M*rch\"     \"Apr*l\"    \n#>  [5] \"M*y\"       \"J*n*\"      \"J*ly\"      \"A*g*st\"   \n#>  [9] \"S*pt*mb*r\" \"Oct*b*r\"   \"N*v*mb*r\"  \"D*c*mb*r\"\n\n# matching lower cases\ngsub('[a-z]', '*', month.name)\n#>  [1] \"J******\"   \"F*******\"  \"M****\"     \"A****\"    \n#>  [5] \"M**\"       \"J***\"      \"J***\"      \"A*****\"   \n#>  [9] \"S********\" \"O******\"   \"N*******\"  \"D*******\"\n\n# matching upper cases\ngsub('[A-Z]', '*', month.name)\n#>  [1] \"*anuary\"   \"*ebruary\"  \"*arch\"     \"*pril\"    \n#>  [5] \"*ay\"       \"*une\"      \"*uly\"      \"*ugust\"   \n#>  [9] \"*eptember\" \"*ctober\"   \"*ovember\"  \"*ecember\"\n\n# matching the letters m to z\ngsub('[m-z]', '*', month.name)\n#>  [1] \"Ja**a**\"   \"Feb**a**\"  \"Ma*ch\"     \"A**il\"    \n#>  [5] \"Ma*\"       \"J**e\"      \"J*l*\"      \"A*g***\"   \n#>  [9] \"Se**e*be*\" \"Oc**be*\"   \"N**e*be*\"  \"Dece*be*\"\n\n# matching the numbers 0 to 9\ngsub('[0-9]', '*', c('1a8g9u93l48p51359p78'))\n#> [1] \"*a*g*u**l**p*****p**\"\n\n# matching the numbers 1 to 5\ngsub('[1-5]', '*', c('1a8g9u93l48p51359p78'))\n#> [1] \"*a8g9u9*l*8p****9p78\"\n\n# matching alphanumeric\ngsub('[a-zA-Z0-9]', '*', c('1a8#g9u/93l48p51*395(9p78'))\n#> [1] \"***#***/************(****\"\n# matching everything but vowels\ngsub('[^aeiou]', '*', month.name)\n#>  [1] \"*a*ua**\"   \"*e**ua**\"  \"*a***\"     \"***i*\"    \n#>  [5] \"*a*\"       \"*u*e\"      \"*u**\"      \"*u*u**\"   \n#>  [9] \"*e**e**e*\" \"***o*e*\"   \"*o*e**e*\"  \"*e*e**e*\"\n\n# matching everything but lowercase letters\ngsub('[^a-z]', '*', month.name)\n#>  [1] \"*anuary\"   \"*ebruary\"  \"*arch\"     \"*pril\"    \n#>  [5] \"*ay\"       \"*une\"      \"*uly\"      \"*ugust\"   \n#>  [9] \"*eptember\" \"*ctober\"   \"*ovember\"  \"*ecember\"\n# start of a string\ngsub('^J', 'j', month.name)\n#>  [1] \"january\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"june\"      \"july\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\n\n# end of a string\ngsub('ber$', 'ba', month.name)\n#>  [1] \"January\"  \"February\" \"March\"    \"April\"    \"May\"     \n#>  [6] \"June\"     \"July\"     \"August\"   \"Septemba\" \"Octoba\"  \n#> [11] \"Novemba\"  \"Decemba\"\n# match 's' zero or one time\ngrep('s?', month.name, value = TRUE)\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\n\n# match 'J' one or more times\ngrep('J+', month.name, value = TRUE)\n#> [1] \"January\" \"June\"    \"July\"\n\n# match 'e' one or more times\ngrep('e+', state.name, value = TRUE)\n#>  [1] \"Connecticut\"   \"Delaware\"      \"Georgia\"      \n#>  [4] \"Kentucky\"      \"Maine\"         \"Massachusetts\"\n#>  [7] \"Minnesota\"     \"Nebraska\"      \"Nevada\"       \n#> [10] \"New Hampshire\" \"New Jersey\"    \"New Mexico\"   \n#> [13] \"New York\"      \"Oregon\"        \"Pennsylvania\" \n#> [16] \"Rhode Island\"  \"Tennessee\"     \"Texas\"        \n#> [19] \"Vermont\"       \"West Virginia\"\n\n# matched 'y', zero or more times\ngrep('y*', month.name, value = TRUE)\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\n\n# matched 'a', zero or more times\ngrep('a*', month.name, value = TRUE)\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\n\n# match 'a' zero or more times and 'y'\ngrep('a*y', month.name, value = TRUE)\n#> [1] \"January\"  \"February\" \"May\"      \"July\"\n\n# match 'y' zero or more times and 'a'\ngrep('y*a', month.name, value = TRUE)\n#> [1] \"January\"  \"February\" \"March\"    \"May\"\n\n# match 's', exactly 2 times\ngrep(pattern = \"s{2}\", state.name, value = TRUE)\n#> [1] \"Massachusetts\" \"Mississippi\"   \"Missouri\"     \n#> [4] \"Tennessee\"\n\n# match 's', exactly 1 or more times\ngrep(pattern = \"s{1,}\", state.name, value = TRUE)\n#>  [1] \"Alaska\"        \"Arkansas\"      \"Illinois\"     \n#>  [4] \"Kansas\"        \"Louisiana\"     \"Massachusetts\"\n#>  [7] \"Minnesota\"     \"Mississippi\"   \"Missouri\"     \n#> [10] \"Nebraska\"      \"New Hampshire\" \"New Jersey\"   \n#> [13] \"Pennsylvania\"  \"Rhode Island\"  \"Tennessee\"    \n#> [16] \"Texas\"         \"Washington\"    \"West Virginia\"\n#> [19] \"Wisconsin\"\n\n# match 's', exactly 1 or 2 times\ngrep(pattern = \"s{1,2}\", state.name, value = TRUE)\n#>  [1] \"Alaska\"        \"Arkansas\"      \"Illinois\"     \n#>  [4] \"Kansas\"        \"Louisiana\"     \"Massachusetts\"\n#>  [7] \"Minnesota\"     \"Mississippi\"   \"Missouri\"     \n#> [10] \"Nebraska\"      \"New Hampshire\" \"New Jersey\"   \n#> [13] \"Pennsylvania\"  \"Rhode Island\"  \"Tennessee\"    \n#> [16] \"Texas\"         \"Washington\"    \"West Virginia\"\n#> [19] \"Wisconsin\"\n# match 2 repeating 's' followed by an 'e'\ngrep(pattern = '(s{2})e', state.name, value = TRUE)\n#> [1] \"Tennessee\""},{"path":"tidyverse-r.html","id":"tidyverse-r","chapter":"5 Tidyverse R","heading":"5 Tidyverse R","text":"Hadley Wickham Garrett Grolemund, excellent freely available\nbook R Data Science, promote concept “tidy data.” Tidyverse collection R packages attempt realize concept concrete libraries.brief, tidy data carefully separates variables (columns table, also called\nfeatures fields) observations (rows table, also called samples). \nintersection two, find values, one data item (datum) cell.\nUnfortunately, data encounter often arranged useful way, \nrequires normalization. particular, really values often represented\neither columns rows instead. demonstrate means, let us\nconsider example (small elementary school class).view data easy humans read. can see trends scores\nstudent received several years education. Moreover, format might\nlend useful visualizations fairly easily:data layout exposes limitations class advances 7th grade, obtain 3rd grade information. accommodate additional data, need change number position columns, simply add additional rows. natural make new observations identify new samples (rows) usually awkward change underlying variables (columns).particular class level (e.g. 4th grade) letter grade pertains , heart, value, variable. Another way think terms independent variables versus dependent variables, machine learning terms, features versus target. ways, class level might correlate influence resulting letter grade; perhaps teachers different levels different biases, children certain age lose gain interest schoolwork, example.analytic purposes, data useful made tidy (normalized) processing. Base R, reshape2::melt() method can perform tidying. pin columns id_vars, set name combined columns variable letter grade single new column.Within Tidyverse, specifically within tidyr package, function pivot_longer() similar Base R’s reshape2::melt(). aggregation names values parameters spelled names_to= values_to=, operation :simple example gives first feel tidying tabular data. reverse tidying operation moves variables (columns) values (rows), pivot_wider() function tidyr can used. Base R several related methods data frames, including reshape::cast() reshape2::dcast().","code":"\nlibrary(tidyverse)\n# inline reading, tibble version\nstudents <- tribble(\n  ~'Last Name', ~'First Name', ~'4th Grade', ~'5th Grade', ~'6th Grade',\n  \"Johnson\", \"Mia\", \"A\", \"B+\", \"A-\",\n  \"Lopez\", \"Liam\", \"B\", \"B\", \"A+\",\n  \"Lee\", \"Isabella\", \"C\", \"C-\", \"B-\",\n  \"Fisher\", \"Mason\", \"B\", \"B-\", \"C+\",\n  \"Gupta\", \"Olivia\", \"B\", \"A+\", \"A\",\n  \"Robinson\", \"Sophia\", \"A+\", \"B-\", \"A\"\n)\nstudents\n#> # A tibble: 6 x 5\n#>   `Last Name` `First Name` `4th Grade` `5th Grade`\n#>   <chr>       <chr>        <chr>       <chr>      \n#> 1 Johnson     Mia          A           B+         \n#> 2 Lopez       Liam         B           B          \n#> 3 Lee         Isabella     C           C-         \n#> 4 Fisher      Mason        B           B-         \n#> 5 Gupta       Olivia       B           A+         \n#> 6 Robinson    Sophia       A+          B-         \n#> # ... with 1 more variable: 6th Grade <chr>\n# Generic conversion of letter grades to numbers\nrecodes.str <- \"'A+'=4.3;'A'=4;'A-'=3.7;'B+'=3.3;'B'=3;'B-'=2.7;'C+'=2.3;'C'= 2;'C-'=1.7\"\nstudents$`4th Grade` <- car::recode(students$`4th Grade`, recodes.str)\nstudents$`5th Grade` <- car::recode(students$`5th Grade`, recodes.str)\nstudents$`6th Grade` <- car::recode(students$`6th Grade`, recodes.str)\n\n# create plot\nmatplot(t(students[,c(3:5)]), type = \"b\", pch = 11:16, col = 2:7, xaxt=\"n\", ylab=\"\")\nAxis(labels = names(students)[3:5], side=1, at = 1:3)\nlegend(1.2, 3, paste(substr(x = students$`Last Name`, 1, 1), students$`First Name`, sep = \". \"),\n       pch = 11:16, col = 2:7)\nreshape2::melt(data = students, id=c(\"Last Name\", \"First Name\"))\n#>    Last Name First Name  variable value\n#> 1    Johnson        Mia 4th Grade   4.0\n#> 2      Lopez       Liam 4th Grade   3.0\n#> 3        Lee   Isabella 4th Grade   2.0\n#> 4     Fisher      Mason 4th Grade   3.0\n#> 5      Gupta     Olivia 4th Grade   3.0\n#> 6   Robinson     Sophia 4th Grade   4.3\n#> 7    Johnson        Mia 5th Grade   3.3\n#> 8      Lopez       Liam 5th Grade   3.0\n#> 9        Lee   Isabella 5th Grade   1.7\n#> 10    Fisher      Mason 5th Grade   2.7\n#> 11     Gupta     Olivia 5th Grade   4.3\n#> 12  Robinson     Sophia 5th Grade   2.7\n#> 13   Johnson        Mia 6th Grade   3.7\n#> 14     Lopez       Liam 6th Grade   4.3\n#> 15       Lee   Isabella 6th Grade   2.7\n#> 16    Fisher      Mason 6th Grade   2.3\n#> 17     Gupta     Olivia 6th Grade   4.0\n#> 18  Robinson     Sophia 6th Grade   4.0\ns.l <- students %>%\n pivot_longer(c('4th Grade', '5th Grade', '6th Grade'),\n names_to = \"Level\",\n values_to = \"Score\")\ns.l\n#> # A tibble: 18 x 4\n#>    `Last Name` `First Name` Level     Score\n#>    <chr>       <chr>        <chr>     <dbl>\n#>  1 Johnson     Mia          4th Grade   4  \n#>  2 Johnson     Mia          5th Grade   3.3\n#>  3 Johnson     Mia          6th Grade   3.7\n#>  4 Lopez       Liam         4th Grade   3  \n#>  5 Lopez       Liam         5th Grade   3  \n#>  6 Lopez       Liam         6th Grade   4.3\n#>  7 Lee         Isabella     4th Grade   2  \n#>  8 Lee         Isabella     5th Grade   1.7\n#>  9 Lee         Isabella     6th Grade   2.7\n#> 10 Fisher      Mason        4th Grade   3  \n#> 11 Fisher      Mason        5th Grade   2.7\n#> 12 Fisher      Mason        6th Grade   2.3\n#> 13 Gupta       Olivia       4th Grade   3  \n#> 14 Gupta       Olivia       5th Grade   4.3\n#> 15 Gupta       Olivia       6th Grade   4  \n#> 16 Robinson    Sophia       4th Grade   4.3\n#> 17 Robinson    Sophia       5th Grade   2.7\n#> 18 Robinson    Sophia       6th Grade   4\ns.l %>% \n  pivot_wider(names_from = Level, values_from = Score)\n#> # A tibble: 6 x 5\n#>   `Last Name` `First Name` `4th Grade` `5th Grade`\n#>   <chr>       <chr>              <dbl>       <dbl>\n#> 1 Johnson     Mia                  4           3.3\n#> 2 Lopez       Liam                 3           3  \n#> 3 Lee         Isabella             2           1.7\n#> 4 Fisher      Mason                3           2.7\n#> 5 Gupta       Olivia               3           4.3\n#> 6 Robinson    Sophia               4.3         2.7\n#> # ... with 1 more variable: 6th Grade <dbl>"},{"path":"tidyverse-r.html","id":"the-tibble","chapter":"5 Tidyverse R","heading":"5.1 The tibble","text":"Tibbles inherits attributes data frame enhances . tibble central data structure set packages known tidyverse.Tibbles printed returns:first 10 rows andall columns can fit screen andcolumn types.","code":""},{"path":"tidyverse-r.html","id":"tr-import","chapter":"5 Tidyverse R","heading":"5.1.1 Importing data","text":"functions read_csv(), read_delim(), read_excel_csv(), read_tsv() used import data.","code":"\n# loading package\nlibrary(readr)\n\n# reading data\ngapminder <- read_delim(file = 'data/gapminder_ext_UTF-8.txt', \n                        delim = \"\\t\", \n                        col_names = T, \n                        locale = locale(decimal_mark = \",\",  encoding = \"UTF-8\"))\nhead(gapminder, 3)\n#> # A tibble: 3 x 8\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#> 1 Afghanistan Asia       1952    28.8  8425333      779.\n#> 2 Afghanistan Asia       1957    30.3  9240934      821.\n#> 3 Afghanistan Asia       1962    32.0 10267083      853.\n#> # ... with 2 more variables: country_hun <chr>,\n#> #   continent_hun <chr>\n\n# class checking\nclass(gapminder)\n#> [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\n# checking for data frame \nis.data.frame(gapminder)\n#> [1] TRUE"},{"path":"tidyverse-r.html","id":"tibbles-are-data-frames","chapter":"5 Tidyverse R","heading":"5.1.2 Tibbles are data frames","text":"Since Tibbles data frames, functions operate data frames also operate .","code":"\nhead(gapminder, 3)\n#> # A tibble: 3 x 8\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#> 1 Afghanistan Asia       1952    28.8  8425333      779.\n#> 2 Afghanistan Asia       1957    30.3  9240934      821.\n#> 3 Afghanistan Asia       1962    32.0 10267083      853.\n#> # ... with 2 more variables: country_hun <chr>,\n#> #   continent_hun <chr>\ntail(gapminder, 3)\n#> # A tibble: 3 x 8\n#>   country  continent  year lifeExp      pop gdpPercap\n#>   <chr>    <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#> 1 Zimbabwe Africa     1997    46.8 11404948      792.\n#> 2 Zimbabwe Africa     2002    40.0 11926563      672.\n#> 3 Zimbabwe Africa     2007    43.5 12311143      470.\n#> # ... with 2 more variables: country_hun <chr>,\n#> #   continent_hun <chr>\nnrow(gapminder)\n#> [1] 1704\nncol(gapminder)\n#> [1] 8\nsummary(gapminder)\n#>    country           continent              year     \n#>  Length:1704        Length:1704        Min.   :1952  \n#>  Class :character   Class :character   1st Qu.:1966  \n#>  Mode  :character   Mode  :character   Median :1980  \n#>                                        Mean   :1980  \n#>                                        3rd Qu.:1993  \n#>                                        Max.   :2007  \n#>     lifeExp           pop              gdpPercap       \n#>  Min.   :23.60   Min.   :6.001e+04   Min.   :   241.2  \n#>  1st Qu.:48.20   1st Qu.:2.794e+06   1st Qu.:  1202.1  \n#>  Median :60.71   Median :7.024e+06   Median :  3531.8  \n#>  Mean   :59.47   Mean   :2.960e+07   Mean   :  7215.3  \n#>  3rd Qu.:70.85   3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n#>  Max.   :82.60   Max.   :1.319e+09   Max.   :113523.1  \n#>  country_hun        continent_hun     \n#>  Length:1704        Length:1704       \n#>  Class :character   Class :character  \n#>  Mode  :character   Mode  :character  \n#>                                       \n#>                                       \n#> "},{"path":"tidyverse-r.html","id":"tr-export","chapter":"5 Tidyverse R","heading":"5.1.3 Exporting data","text":"functions write_csv(), write_delim(), write_excel_csv(), write_tsv() used export data. export Tibbles, first converted data frames.","code":"\n# exporting Tibbles\nwrite_delim(x = data.frame(gapminder), delim = \" \", file = 'output/data/gapminderfixedwidth.txt')\nwrite_csv(x = data.frame(gapminder), file = 'output/data/gapminder_csv.txt')\nwrite_tsv(x = data.frame(gapminder), file = 'output/data/gapminder_tsv.txt')\n\n# checking if files exist?\nfile.exists(c('output/data/gapminderfixedwidth.txt', 'output/data/gapminder_csv.txt', 'output/data/gapminder_tsv.txt'))\n#> [1] TRUE TRUE TRUE\n\n# removing files\nfile.remove(c('output/data/gapminderfixedwidth.txt', 'output/data/gapminder_csv.txt', 'output/data/gapminder_tsv.txt'))\n#> [1] TRUE TRUE TRUE"},{"path":"tidyverse-r.html","id":"tr-inspect","chapter":"5 Tidyverse R","heading":"5.1.4 Check for tibble","text":"Tibbles come package tibble.function is_tibble() used check tibble.\nfunction glimpse() better option str().","code":"\n# loading tibble\nlibrary(tibble)\n\n# glimpse() a better option to str()\nglimpse(gapminder)\n#> Rows: 1,704\n#> Columns: 8\n#> $ country       <chr> \"Afghanistan\", \"Afghanistan\", \"Afgha~\n#> $ continent     <chr> \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asi~\n#> $ year          <dbl> 1952, 1957, 1962, 1967, 1972, 1977, ~\n#> $ lifeExp       <dbl> 28.801, 30.332, 31.997, 34.020, 36.0~\n#> $ pop           <dbl> 8425333, 9240934, 10267083, 11537966~\n#> $ gdpPercap     <dbl> 779.4453, 820.8530, 853.1007, 836.19~\n#> $ country_hun   <chr> \"Afganisztán\", \"Afganisztán\", \"Afgan~\n#> $ continent_hun <chr> \"Ázsia\", \"Ázsia\", \"Ázsia\", \"Ázsia\", ~\n\n# checking whether an object is a tibble\nis_tibble(gapminder)\n#> [1] TRUE"},{"path":"tidyverse-r.html","id":"creating-a-tibble","chapter":"5 Tidyverse R","heading":"5.1.5 Creating a tibble","text":"function tibble() like data.frame() creates tibble.","code":"\n# creating named vectors\ncountry <- c('China', 'India', 'United States', 'Indonesia', 'Brazil', \n             'Pakistan', 'Bangladesh', 'Nigeria', 'Japan', 'Mexico')\ncontinent <- c('Asia', 'Asia', 'Americas', 'Asia', 'Americas', \n               'Asia', 'Asia', 'Africa', 'Asia', 'Americas')\npopulation <- c(1318683096, 1110396331, 301139947, 223547000, 190010647, \n                169270617, 150448339, 135031164, 127467972, 108700891)\nlifeExpectancy <- c(72.961, 64.698, 78.242, 70.65, 72.39, \n                    65.483, 64.062, 46.859, 82.603, 76.195)\npercapita <- c(4959, 2452, 42952, 3541, 9066, 2606, 1391, 2014, 31656, 11978)\n\n# creating a tibble from named vectors\ntop_10 <- tibble(country, population, lifeExpectancy)\nhead(top_10, 3)\n#> # A tibble: 3 x 3\n#>   country       population lifeExpectancy\n#>   <chr>              <dbl>          <dbl>\n#> 1 China         1318683096           73.0\n#> 2 India         1110396331           64.7\n#> 3 United States  301139947           78.2\nclass(top_10)\n#> [1] \"tbl_df\"     \"tbl\"        \"data.frame\""},{"path":"tidyverse-r.html","id":"adding-columns","chapter":"5 Tidyverse R","heading":"5.1.6 Adding columns","text":"function add_column() used add columns tibble data frames.","code":"\n# adding a column to a tibble\n# defaults to the last column\nadd_column(top_10, continent)\n#> # A tibble: 10 x 4\n#>    country       population lifeExpectancy continent\n#>    <chr>              <dbl>          <dbl> <chr>    \n#>  1 China         1318683096           73.0 Asia     \n#>  2 India         1110396331           64.7 Asia     \n#>  3 United States  301139947           78.2 Americas \n#>  4 Indonesia      223547000           70.6 Asia     \n#>  5 Brazil         190010647           72.4 Americas \n#>  6 Pakistan       169270617           65.5 Asia     \n#>  7 Bangladesh     150448339           64.1 Asia     \n#>  8 Nigeria        135031164           46.9 Africa   \n#>  9 Japan          127467972           82.6 Asia     \n#> 10 Mexico         108700891           76.2 Americas\n\n# also works for data frames\nadd_column(as.data.frame(top_10), continent)\n#>          country population lifeExpectancy continent\n#> 1          China 1318683096         72.961      Asia\n#> 2          India 1110396331         64.698      Asia\n#> 3  United States  301139947         78.242  Americas\n#> 4      Indonesia  223547000         70.650      Asia\n#> 5         Brazil  190010647         72.390  Americas\n#> 6       Pakistan  169270617         65.483      Asia\n#> 7     Bangladesh  150448339         64.062      Asia\n#> 8        Nigeria  135031164         46.859    Africa\n#> 9          Japan  127467972         82.603      Asia\n#> 10        Mexico  108700891         76.195  Americas\n\n# adding multiple columns\nadd_column(top_10, continent, percapita)\n#> # A tibble: 10 x 5\n#>    country       population lifeExpectancy continent percapita\n#>    <chr>              <dbl>          <dbl> <chr>         <dbl>\n#>  1 China         1318683096           73.0 Asia           4959\n#>  2 India         1110396331           64.7 Asia           2452\n#>  3 United States  301139947           78.2 Americas      42952\n#>  4 Indonesia      223547000           70.6 Asia           3541\n#>  5 Brazil         190010647           72.4 Americas       9066\n#>  6 Pakistan       169270617           65.5 Asia           2606\n#>  7 Bangladesh     150448339           64.1 Asia           1391\n#>  8 Nigeria        135031164           46.9 Africa         2014\n#>  9 Japan          127467972           82.6 Asia          31656\n#> 10 Mexico         108700891           76.2 Americas      11978\n\n# adding multiple columns directly\nadd_column(top_10, \n           continent = c('Asia', 'Asia', 'Americas', 'Asia', 'Americas', \n                         'Asia', 'Asia', 'Africa', 'Asia', 'Americas'),\n           percapita = c(4959, 2452, 42952, 3541, 9066, 2606, 1391, 2014, 31656, 11978))\n#> # A tibble: 10 x 5\n#>    country       population lifeExpectancy continent percapita\n#>    <chr>              <dbl>          <dbl> <chr>         <dbl>\n#>  1 China         1318683096           73.0 Asia           4959\n#>  2 India         1110396331           64.7 Asia           2452\n#>  3 United States  301139947           78.2 Americas      42952\n#>  4 Indonesia      223547000           70.6 Asia           3541\n#>  5 Brazil         190010647           72.4 Americas       9066\n#>  6 Pakistan       169270617           65.5 Asia           2606\n#>  7 Bangladesh     150448339           64.1 Asia           1391\n#>  8 Nigeria        135031164           46.9 Africa         2014\n#>  9 Japan          127467972           82.6 Asia          31656\n#> 10 Mexico         108700891           76.2 Americas      11978\n\n# add a column before an index position\nadd_column(top_10, continent, .before = 2)\n#> # A tibble: 10 x 4\n#>    country       continent population lifeExpectancy\n#>    <chr>         <chr>          <dbl>          <dbl>\n#>  1 China         Asia      1318683096           73.0\n#>  2 India         Asia      1110396331           64.7\n#>  3 United States Americas   301139947           78.2\n#>  4 Indonesia     Asia       223547000           70.6\n#>  5 Brazil        Americas   190010647           72.4\n#>  6 Pakistan      Asia       169270617           65.5\n#>  7 Bangladesh    Asia       150448339           64.1\n#>  8 Nigeria       Africa     135031164           46.9\n#>  9 Japan         Asia       127467972           82.6\n#> 10 Mexico        Americas   108700891           76.2\n\n# add a column after an index position\ntop_10 <- add_column(top_10, continent, .after = 1)\ntop_10\n#> # A tibble: 10 x 4\n#>    country       continent population lifeExpectancy\n#>    <chr>         <chr>          <dbl>          <dbl>\n#>  1 China         Asia      1318683096           73.0\n#>  2 India         Asia      1110396331           64.7\n#>  3 United States Americas   301139947           78.2\n#>  4 Indonesia     Asia       223547000           70.6\n#>  5 Brazil        Americas   190010647           72.4\n#>  6 Pakistan      Asia       169270617           65.5\n#>  7 Bangladesh    Asia       150448339           64.1\n#>  8 Nigeria       Africa     135031164           46.9\n#>  9 Japan         Asia       127467972           82.6\n#> 10 Mexico        Americas   108700891           76.2"},{"path":"tidyverse-r.html","id":"adding-rows-1","chapter":"5 Tidyverse R","heading":"5.1.7 Adding rows","text":"function add_row() used add rows tibble data frame.","code":"\n# adding a row\n# defaults to the tail of the data frame\nadd_row(top_10, \n        country = 'Philippines',\n        continent = 'Asia', \n        population = 91077287, \n        lifeExpectancy = 71.688)\n#> # A tibble: 11 x 4\n#>    country       continent population lifeExpectancy\n#>    <chr>         <chr>          <dbl>          <dbl>\n#>  1 China         Asia      1318683096           73.0\n#>  2 India         Asia      1110396331           64.7\n#>  3 United States Americas   301139947           78.2\n#>  4 Indonesia     Asia       223547000           70.6\n#>  5 Brazil        Americas   190010647           72.4\n#>  6 Pakistan      Asia       169270617           65.5\n#>  7 Bangladesh    Asia       150448339           64.1\n#>  8 Nigeria       Africa     135031164           46.9\n#>  9 Japan         Asia       127467972           82.6\n#> 10 Mexico        Americas   108700891           76.2\n#> 11 Philippines   Asia        91077287           71.7\n\n# adding rows before an index position\nadd_row(top_10, \n        country = 'Philippines',\n        continent = 'Asia', \n        population = 91077287, \n        lifeExpectancy = 71.688, \n        .before = 2)\n#> # A tibble: 11 x 4\n#>    country       continent population lifeExpectancy\n#>    <chr>         <chr>          <dbl>          <dbl>\n#>  1 China         Asia      1318683096           73.0\n#>  2 Philippines   Asia        91077287           71.7\n#>  3 India         Asia      1110396331           64.7\n#>  4 United States Americas   301139947           78.2\n#>  5 Indonesia     Asia       223547000           70.6\n#>  6 Brazil        Americas   190010647           72.4\n#>  7 Pakistan      Asia       169270617           65.5\n#>  8 Bangladesh    Asia       150448339           64.1\n#>  9 Nigeria       Africa     135031164           46.9\n#> 10 Japan         Asia       127467972           82.6\n#> 11 Mexico        Americas   108700891           76.2\n\n# adding rows after an index position\nadd_row(top_10, \n        country = 'Philippines',\n        continent = 'Asia', \n        population = 91077287, \n        lifeExpectancy = 71.688, \n        .after = 2)\n#> # A tibble: 11 x 4\n#>    country       continent population lifeExpectancy\n#>    <chr>         <chr>          <dbl>          <dbl>\n#>  1 China         Asia      1318683096           73.0\n#>  2 India         Asia      1110396331           64.7\n#>  3 Philippines   Asia        91077287           71.7\n#>  4 United States Americas   301139947           78.2\n#>  5 Indonesia     Asia       223547000           70.6\n#>  6 Brazil        Americas   190010647           72.4\n#>  7 Pakistan      Asia       169270617           65.5\n#>  8 Bangladesh    Asia       150448339           64.1\n#>  9 Nigeria       Africa     135031164           46.9\n#> 10 Japan         Asia       127467972           82.6\n#> 11 Mexico        Americas   108700891           76.2\n\n# adding multiple rows\nadd_row(top_10, \n        country = c('Philippines', 'Vietnam', 'Germany', 'Egypt', 'Ethiopia', \n                    'Turkey', 'Iran', 'Thailand', 'Congo, Dem. Rep.', 'France'),\n        continent = c('Asia', 'Asia', 'Europe', 'Africa', 'Africa', \n                      'Europe', 'Asia', 'Asia', 'Africa', 'Europe'),\n        population = c(91077287, 85262356, 82400996, 80264543, 76511887, \n                       71158647, 69453570, 65068149, 64606759, 61083916),\n        lifeExpectancy = c(71.688, 74.249, 79.406, 71.338, 52.947, \n                           71.777, 70.964, 70.616, 46.462, 80.657)\n       )\n#> # A tibble: 20 x 4\n#>    country          continent population lifeExpectancy\n#>    <chr>            <chr>          <dbl>          <dbl>\n#>  1 China            Asia      1318683096           73.0\n#>  2 India            Asia      1110396331           64.7\n#>  3 United States    Americas   301139947           78.2\n#>  4 Indonesia        Asia       223547000           70.6\n#>  5 Brazil           Americas   190010647           72.4\n#>  6 Pakistan         Asia       169270617           65.5\n#>  7 Bangladesh       Asia       150448339           64.1\n#>  8 Nigeria          Africa     135031164           46.9\n#>  9 Japan            Asia       127467972           82.6\n#> 10 Mexico           Americas   108700891           76.2\n#> 11 Philippines      Asia        91077287           71.7\n#> 12 Vietnam          Asia        85262356           74.2\n#> 13 Germany          Europe      82400996           79.4\n#> 14 Egypt            Africa      80264543           71.3\n#> 15 Ethiopia         Africa      76511887           52.9\n#> 16 Turkey           Europe      71158647           71.8\n#> 17 Iran             Asia        69453570           71.0\n#> 18 Thailand         Asia        65068149           70.6\n#> 19 Congo, Dem. Rep. Africa      64606759           46.5\n#> 20 France           Europe      61083916           80.7"},{"path":"tidyverse-r.html","id":"converting-to-tibble","chapter":"5 Tidyverse R","heading":"5.1.8 Converting to tibble","text":"function as_tibble() used convert tibble, possible.","code":"\n# creating a matrix\nmat = matrix(seq(1,12), 3, 4, \n             dimnames = list('a' = c('a1', 'a2', 'a3'), 'b' = c('b1', 'b2', 'b3', 'b4')))\nmat\n#>     b\n#> a    b1 b2 b3 b4\n#>   a1  1  4  7 10\n#>   a2  2  5  8 11\n#>   a3  3  6  9 12\n\n# converting a matrix to tibble\n# removes the rownames\nmat_tbl <- as_tibble(mat)\nmat_tbl\n#> # A tibble: 3 x 4\n#>      b1    b2    b3    b4\n#>   <int> <int> <int> <int>\n#> 1     1     4     7    10\n#> 2     2     5     8    11\n#> 3     3     6     9    12\nclass(mat_tbl)\n#> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n# creating a data frame\ntop_10_df <- data.frame(\ncountry = c('China', 'India', 'United States', 'Indonesia', 'Brazil', \n            'Pakistan', 'Bangladesh', 'Nigeria', 'Japan', 'Mexico'),\ncontinent = c('Asia', 'Asia', 'Americas', 'Asia', 'Americas', \n              'Asia', 'Asia', 'Africa', 'Asia', 'Americas'),\npopulation = c(1318683096, 1110396331, 301139947, 223547000, 190010647, \n               169270617, 150448339, 135031164, 127467972, 108700891),\nlifeExpectancy = c(72.961, 64.698, 78.242, 70.65, 72.39, \n                   65.483, 64.062, 46.859, 82.603, 76.195)\n    )\nhead(top_10_df, 3)\n#>         country continent population lifeExpectancy\n#> 1         China      Asia 1318683096         72.961\n#> 2         India      Asia 1110396331         64.698\n#> 3 United States  Americas  301139947         78.242\nclass(top_10_df)\n#> [1] \"data.frame\"\n\n# converting data frame to tibble\ntop_tbl <- as_tibble(top_10_df)\ntop_tbl\n#> # A tibble: 10 x 4\n#>    country       continent population lifeExpectancy\n#>    <chr>         <chr>          <dbl>          <dbl>\n#>  1 China         Asia      1318683096           73.0\n#>  2 India         Asia      1110396331           64.7\n#>  3 United States Americas   301139947           78.2\n#>  4 Indonesia     Asia       223547000           70.6\n#>  5 Brazil        Americas   190010647           72.4\n#>  6 Pakistan      Asia       169270617           65.5\n#>  7 Bangladesh    Asia       150448339           64.1\n#>  8 Nigeria       Africa     135031164           46.9\n#>  9 Japan         Asia       127467972           82.6\n#> 10 Mexico        Americas   108700891           76.2\nclass(top_tbl)\n#> [1] \"tbl_df\"     \"tbl\"        \"data.frame\""},{"path":"tidyverse-r.html","id":"tr-row-names","chapter":"5 Tidyverse R","heading":"5.1.9 Manipulating row names","text":"Tibble support row names package tibble following functions dealing row names:has_rownames() checks data frame row names.remove_rownames() removes row names.column_to_rownames() moves column row names.rowid_to_column() moves row index column.","code":"\n# creating a data frame\ntop_10_df <- data.frame(\ncontinent = c('Asia', 'Asia', 'Americas', 'Asia', 'Americas', \n              'Asia', 'Asia', 'Africa', 'Asia', 'Americas'),\npopulation = c(1318683096, 1110396331, 301139947, 223547000, 190010647, \n               169270617, 150448339, 135031164, 127467972, 108700891),\nlifeExpectancy = c(72.961, 64.698, 78.242, 70.65, 72.39, \n                   65.483, 64.062, 46.859, 82.603, 76.195)\n    )\ntop_10_df\n#>    continent population lifeExpectancy\n#> 1       Asia 1318683096         72.961\n#> 2       Asia 1110396331         64.698\n#> 3   Americas  301139947         78.242\n#> 4       Asia  223547000         70.650\n#> 5   Americas  190010647         72.390\n#> 6       Asia  169270617         65.483\n#> 7       Asia  150448339         64.062\n#> 8     Africa  135031164         46.859\n#> 9       Asia  127467972         82.603\n#> 10  Americas  108700891         76.195\n\n# vector of country names\ncountry <- c('China', 'India', 'United States', 'Indonesia', 'Brazil', \n             'Pakistan', 'Bangladesh', 'Nigeria', 'Japan', 'Mexico')\n\n# adding row names\nrownames(top_10_df) <- country\ntop_10_df\n#>               continent population lifeExpectancy\n#> China              Asia 1318683096         72.961\n#> India              Asia 1110396331         64.698\n#> United States  Americas  301139947         78.242\n#> Indonesia          Asia  223547000         70.650\n#> Brazil         Americas  190010647         72.390\n#> Pakistan           Asia  169270617         65.483\n#> Bangladesh         Asia  150448339         64.062\n#> Nigeria          Africa  135031164         46.859\n#> Japan              Asia  127467972         82.603\n#> Mexico         Americas  108700891         76.195\n\n# check if the data frame contains row names\nhas_rownames(top_10_df)\n#> [1] TRUE\n\n# delete row names\nremove_rownames(top_10_df)\n#>    continent population lifeExpectancy\n#> 1       Asia 1318683096         72.961\n#> 2       Asia 1110396331         64.698\n#> 3   Americas  301139947         78.242\n#> 4       Asia  223547000         70.650\n#> 5   Americas  190010647         72.390\n#> 6       Asia  169270617         65.483\n#> 7       Asia  150448339         64.062\n#> 8     Africa  135031164         46.859\n#> 9       Asia  127467972         82.603\n#> 10  Americas  108700891         76.195\n\n# convert row names to a column\ntop_10_df <- rownames_to_column(top_10_df, var = \"country\")\ntop_10_df\n#>          country continent population lifeExpectancy\n#> 1          China      Asia 1318683096         72.961\n#> 2          India      Asia 1110396331         64.698\n#> 3  United States  Americas  301139947         78.242\n#> 4      Indonesia      Asia  223547000         70.650\n#> 5         Brazil  Americas  190010647         72.390\n#> 6       Pakistan      Asia  169270617         65.483\n#> 7     Bangladesh      Asia  150448339         64.062\n#> 8        Nigeria    Africa  135031164         46.859\n#> 9          Japan      Asia  127467972         82.603\n#> 10        Mexico  Americas  108700891         76.195\n\n# convert a column to row names\ncolumn_to_rownames(top_10_df, var = \"country\")\n#>               continent population lifeExpectancy\n#> China              Asia 1318683096         72.961\n#> India              Asia 1110396331         64.698\n#> United States  Americas  301139947         78.242\n#> Indonesia          Asia  223547000         70.650\n#> Brazil         Americas  190010647         72.390\n#> Pakistan           Asia  169270617         65.483\n#> Bangladesh         Asia  150448339         64.062\n#> Nigeria          Africa  135031164         46.859\n#> Japan              Asia  127467972         82.603\n#> Mexico         Americas  108700891         76.195\n\n# convert row index to a column\nrowid_to_column(top_10_df, var = \"rank\")\n#>    rank       country continent population lifeExpectancy\n#> 1     1         China      Asia 1318683096         72.961\n#> 2     2         India      Asia 1110396331         64.698\n#> 3     3 United States  Americas  301139947         78.242\n#> 4     4     Indonesia      Asia  223547000         70.650\n#> 5     5        Brazil  Americas  190010647         72.390\n#> 6     6      Pakistan      Asia  169270617         65.483\n#> 7     7    Bangladesh      Asia  150448339         64.062\n#> 8     8       Nigeria    Africa  135031164         46.859\n#> 9     9         Japan      Asia  127467972         82.603\n#> 10   10        Mexico  Americas  108700891         76.195"},{"path":"tidyverse-r.html","id":"tr-factor","chapter":"5 Tidyverse R","heading":"5.2 Manipulating categorical data with forcats","text":"package forcats comes series functions beginning fct_ working categorical data. package developed maintained Hadley Wickham part tidyverse universe packages.Categorical data R represented factors.","code":"\n# install.packages(forcats)\nlibrary(forcats)\nlibrary(gapminder)\n# loading data\ndata(gapminder)\n# preparing data\ngapminder_2007 <- subset(gapminder, year == 2007, -3)\nhead(gapminder_2007)\n#> # A tibble: 6 x 5\n#>   country     continent lifeExp      pop gdpPercap\n#>   <fct>       <fct>       <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia         43.8 31889923      975.\n#> 2 Albania     Europe       76.4  3600523     5937.\n#> 3 Algeria     Africa       72.3 33333216     6223.\n#> 4 Angola      Africa       42.7 12420476     4797.\n#> 5 Argentina   Americas     75.3 40301927    12779.\n#> 6 Australia   Oceania      81.2 20434176    34435.\nsapply(gapminder_2007, class)\n#>   country continent   lifeExp       pop gdpPercap \n#>  \"factor\"  \"factor\" \"numeric\" \"integer\" \"numeric\""},{"path":"tidyverse-r.html","id":"inspecting-factors","chapter":"5 Tidyverse R","heading":"5.2.1 Inspecting factors","text":"","code":""},{"path":"tidyverse-r.html","id":"get-categories","chapter":"5 Tidyverse R","heading":"5.2.1.1 Get categories","text":"functions levels() fct_unique() used get levels categories.","code":"\n# get levels using base R\nlevels(gapminder_2007$continent)\n#> [1] \"Africa\"   \"Americas\" \"Asia\"     \"Europe\"   \"Oceania\"\n\n# get levels using forcats\nfct_unique(gapminder_2007$continent)\n#> [1] Africa   Americas Asia     Europe   Oceania \n#> Levels: Africa Americas Asia Europe Oceania"},{"path":"tidyverse-r.html","id":"get-the-number-of-categories","chapter":"5 Tidyverse R","heading":"5.2.1.2 Get the number of categories","text":"functions nlevels() length(fct_unique()) used get number categories levels.","code":"\n# get the number of categories using base R\nnlevels(gapminder_2007$continent)\n#> [1] 5\n\n# get the number of categories using forcats\nlength(fct_unique(gapminder_2007$continent))\n#> [1] 5"},{"path":"tidyverse-r.html","id":"count-of-values-by-categories","chapter":"5 Tidyverse R","heading":"5.2.1.3 Count of values by categories","text":"function table() fct_count() used get count values categories later returning tibble.","code":"\n# count of elements by categories using base R\ntable(gapminder_2007$continent)\n#> \n#>   Africa Americas     Asia   Europe  Oceania \n#>       52       25       33       30        2\n\n# count of elements by categories using forcats\nfct_count(gapminder_2007$continent)\n#> # A tibble: 5 x 2\n#>   f            n\n#>   <fct>    <int>\n#> 1 Africa      52\n#> 2 Americas    25\n#> 3 Asia        33\n#> 4 Europe      30\n#> 5 Oceania      2"},{"path":"tidyverse-r.html","id":"reordering-levels","chapter":"5 Tidyverse R","heading":"5.2.1.4 Reordering levels","text":"","code":"\n# get levels\ntable(gapminder_2007$continent)\n#> \n#>   Africa Americas     Asia   Europe  Oceania \n#>       52       25       33       30        2"},{"path":"tidyverse-r.html","id":"manually-reordering-levels","chapter":"5 Tidyverse R","heading":"5.2.1.4.1 Manually reordering levels","text":"function fct_relevel() used manually reorder levels.","code":"\n# manually reorder levels\ngapminder_2007$continent <- fct_relevel(gapminder_2007$continent, \n                                        c('Asia', 'Africa', 'Americas', 'Europe', 'Oceania'))\ntable(gapminder_2007$continent)\n#> \n#>     Asia   Africa Americas   Europe  Oceania \n#>       33       52       25       30        2\n# oceania first\ngapminder_2007$continent <- fct_relevel(gapminder_2007$continent, 'Oceania')\ntable(gapminder_2007$continent)\n#> \n#>  Oceania     Asia   Africa Americas   Europe \n#>        2       33       52       25       30"},{"path":"tidyverse-r.html","id":"reordering-levels-by-frequency-of-occurrence","chapter":"5 Tidyverse R","heading":"5.2.1.5 Reordering levels by frequency of occurrence","text":"function fct_infreq() reorders levels number times occur data highest first.argument ordered = TRUE returns ordered factor.","code":"\n# ordering levels by the frequency they appear in a dataset\ngapminder_2007$continent <- fct_infreq(gapminder_2007$continent, ordered = NA)\ntable(gapminder_2007$continent)\n#> \n#>   Africa     Asia   Europe Americas  Oceania \n#>       52       33       30       25        2\n# unordered factor\nclass(fct_infreq(gapminder_2007$continent, ordered = NA))\n#> [1] \"factor\"\n\n# ordered factor\nclass(fct_infreq(gapminder_2007$continent, ordered = TRUE))\n#> [1] \"ordered\" \"factor\""},{"path":"tidyverse-r.html","id":"reordering-levels-by-their-order-in-data","chapter":"5 Tidyverse R","heading":"5.2.2 Reordering levels by their order in data","text":"function fct_inorder() reorders levels order appear data set.","code":"\n# ordering levels by the order in which they appear in a dataset\ngapminder_2007$continent <- fct_inorder(gapminder_2007$continent, ordered = NA)\ntable(gapminder_2007$continent)\n#> \n#>     Asia   Europe   Africa Americas  Oceania \n#>       33       30       52       25        2"},{"path":"tidyverse-r.html","id":"reversing-the-order","chapter":"5 Tidyverse R","heading":"5.2.2.1 Reversing the order","text":"function fct_rev() reverses order levels.","code":"\n# reversing level order\ngapminder_2007$continent <- fct_rev(gapminder_2007$continent)\ntable(gapminder_2007$continent)\n#> \n#>  Oceania Americas   Africa   Europe     Asia \n#>        2       25       52       30       33"},{"path":"tidyverse-r.html","id":"random-order","chapter":"5 Tidyverse R","heading":"5.2.2.2 Random order","text":"function fct_shuffle() randomly shuffles levels.","code":"\n# randomly shuffling level order\ngapminder_2007$continent <- fct_shuffle(gapminder_2007$continent)\ntable(gapminder_2007$continent)\n#> \n#>     Asia  Oceania   Africa   Europe Americas \n#>       33        2       52       30       25"},{"path":"tidyverse-r.html","id":"reordering-level-by-another-column","chapter":"5 Tidyverse R","heading":"5.2.2.3 Reordering level by another column","text":"function fct_reorder() reorders levels another column vector.","code":"\n# ordering levels by another column\ngapminder_2007$continent <- \n  fct_reorder(gapminder_2007$continent, gapminder_2007$pop, .fun = sum, .desc = TRUE)\nlevels(gapminder_2007$continent)\n#> [1] \"Asia\"     \"Africa\"   \"Americas\" \"Europe\"   \"Oceania\"\n\n\n# using median\ngapminder_2007$continent <- \n  fct_reorder(gapminder_2007$continent, gapminder_2007$pop, .fun = median, .desc = TRUE)\nlevels(gapminder_2007$continent)\n#> [1] \"Asia\"     \"Oceania\"  \"Africa\"   \"Europe\"   \"Americas\"\n\n# ascending\ngapminder_2007$continent <- \n  fct_reorder(gapminder_2007$continent, gapminder_2007$pop, .fun = median, .desc = FALSE)\nlevels(gapminder_2007$continent)\n#> [1] \"Americas\" \"Europe\"   \"Africa\"   \"Oceania\"  \"Asia\"\n\n# population by continent\n(pop_cont <- aggregate(pop ~ continent, gapminder, sum, subset = year == 2007))\n#>   continent        pop\n#> 1    Africa  929539692\n#> 2  Americas  898871184\n#> 3      Asia 3811953827\n#> 4    Europe  586098529\n#> 5   Oceania   24549947\n\n# plotting a barchart \nwith(pop_cont, barplot(pop/1e6, names.arg = continent))\n\n\n# reordering continent by population\npop_cont$continent <- fct_reorder(pop_cont$continent, pop_cont$pop, .desc = TRUE)\nlevels(pop_cont$continent)\n#> [1] \"Asia\"     \"Africa\"   \"Americas\" \"Europe\"   \"Oceania\"\n\n# sorting data frame by continent\npop_cont <- with(pop_cont, pop_cont[order(continent),])\npop_cont\n#>   continent        pop\n#> 3      Asia 3811953827\n#> 1    Africa  929539692\n#> 2  Americas  898871184\n#> 4    Europe  586098529\n#> 5   Oceania   24549947\n\n# plotting barplot\nwith(pop_cont, barplot(pop/1e6, names.arg = continent))\n\n# producing an ascending bar chart\npop_cont$continent <- fct_reorder(pop_cont$continent, pop_cont$pop, .desc = FALSE)\npop_cont <- with(pop_cont, pop_cont[order(continent),])\nwith(pop_cont, barplot(pop/1e6, names.arg = continent))"},{"path":"tidyverse-r.html","id":"restructuring-levels-and-their-labels","chapter":"5 Tidyverse R","heading":"5.2.3 Restructuring levels and their labels","text":"","code":""},{"path":"tidyverse-r.html","id":"renaming-labels","chapter":"5 Tidyverse R","heading":"5.2.3.1 Renaming labels","text":"function fct_recode() used rename levels. takes form new_name = old_name.","code":"\nlevels(fct_recode(gapminder_2007$continent, 'AS' = 'Asia', 'Af' = 'Africa', 'Eu' = 'Europe'))\n#> [1] \"Americas\" \"Eu\"       \"Af\"       \"Oceania\"  \"AS\""},{"path":"tidyverse-r.html","id":"collapsing-levels","chapter":"5 Tidyverse R","heading":"5.2.3.2 collapsing levels","text":"function fct_collapse() used collapse levels new one.","code":"\n# collapsing europe and africa into euroafrica\ngapminder_2007$continent <- \n  fct_collapse(gapminder_2007$continent, Euroafrica = c('Africa', 'Europe'))\ntable(gapminder_2007$continent)\n#> \n#>   Americas Euroafrica    Oceania       Asia \n#>         25         82          2         33\n\n# population by continent\n(pop_cont <- aggregate(pop ~ continent, gapminder_2007, sum))\n#>    continent        pop\n#> 1   Americas  898871184\n#> 2 Euroafrica 1515638221\n#> 3    Oceania   24549947\n#> 4       Asia 3811953827"},{"path":"tidyverse-r.html","id":"combining-levels","chapter":"5 Tidyverse R","heading":"5.2.3.3 combining levels","text":"functions fct_lump() fct_lump_min() combines levels together based frequency occurrence level.Using arguments n= p= can specify type combining perform; positive values indicating combining rarest levels negative values indicate combining common levels.fct_lump_min() combining done based whether threshold declared min argument met.","code":"\n# combining the least frequent levels\ngapminder_2007 <- subset(gapminder, year == 2007, -3)\ntable(fct_lump(gapminder_2007$continent))\n#> \n#> Africa   Asia Europe  Other \n#>     52     33     30     27\n# combining all except the first most common\ntable(fct_lump(gapminder_2007$continent, n = 1))\n#> \n#> Africa  Other \n#>     52     90\n\n# combining all except the first 2 most common\ntable(fct_lump(gapminder_2007$continent, n = 2))\n#> \n#> Africa   Asia  Other \n#>     52     33     57\n\n# combining all except the first 3 most common\ntable(fct_lump(gapminder_2007$continent, n = 3))\n#> \n#> Africa   Asia Europe  Other \n#>     52     33     30     27\n\n# combining all except the first rarest\ntable(fct_lump(gapminder_2007$continent, n = -1))\n#> \n#> Oceania   Other \n#>       2     140\n\n# combining all except the first 2 rarest\ntable(fct_lump(gapminder_2007$continent, n = -2))\n#> \n#> Americas  Oceania    Other \n#>       25        2      115\n\n# combining all except the first 3 rarest\ntable(fct_lump(gapminder_2007$continent, n = -3))\n#> \n#> Americas   Europe  Oceania    Other \n#>       25       30        2       85\n\n# using prop positive\ntable(fct_lump(gapminder_2007$continent, prop = 0.25))\n#> \n#> Africa  Other \n#>     52     90\ntable(fct_lump(gapminder_2007$continent, prop = 0.22))\n#> \n#> Africa   Asia  Other \n#>     52     33     57\ntable(fct_lump(gapminder_2007$continent, prop = 0.2))\n#> \n#> Africa   Asia Europe  Other \n#>     52     33     30     27\n\n# using prop negative\ntable(fct_lump(gapminder_2007$continent, prop = -0.25))\n#> \n#> Americas     Asia   Europe  Oceania    Other \n#>       25       33       30        2       52\ntable(fct_lump(gapminder_2007$continent, prop = -0.22))\n#> \n#> Americas   Europe  Oceania    Other \n#>       25       30        2       85\ntable(fct_lump(gapminder_2007$continent, prop = -0.2))\n#> \n#> Americas  Oceania    Other \n#>       25        2      115\ntable(gapminder_2007$continent)\n#> \n#>   Africa Americas     Asia   Europe  Oceania \n#>       52       25       33       30        2\n\n# combining levels with less than 25 counts\ntable(fct_lump_min(gapminder_2007$continent, min = 25))\n#> \n#>   Africa Americas     Asia   Europe    Other \n#>       52       25       33       30        2\n\n# combining levels with less than 30 counts\ntable(fct_lump_min(gapminder_2007$continent, min = 30))\n#> \n#> Africa   Asia Europe  Other \n#>     52     33     30     27\n\n# combining levels with less than 33 counts\ntable(fct_lump_min(gapminder_2007$continent, min = 33))\n#> \n#> Africa   Asia  Other \n#>     52     33     57"},{"path":"tidyverse-r.html","id":"remove-and-add-levels","chapter":"5 Tidyverse R","heading":"5.2.4 Remove and add levels","text":"","code":""},{"path":"tidyverse-r.html","id":"dropping-levels-1","chapter":"5 Tidyverse R","heading":"5.2.4.1 dropping levels","text":"function fct_other() drop levels replace argument other_level = default.","code":"\n# keeping asia and europe \ntable(fct_other(gapminder_2007$continent, keep = c('Asia', 'Europe')))\n#> \n#>   Asia Europe  Other \n#>     33     30     79\n\n# dropping asia and europe\ntable(fct_other(gapminder_2007$continent, drop = c('Asia', 'Europe')))\n#> \n#>   Africa Americas  Oceania    Other \n#>       52       25        2       63\n\n# replacing other continents with nonEurasia\ntable(fct_other(gapminder_2007$continent, \n                keep = c('Asia', 'Europe'), \n                other_level = 'nonEurasia'))\n#> \n#>       Asia     Europe nonEurasia \n#>         33         30         79\n\n# replacing europe and asia with Eurasia\ntable(fct_other(gapminder_2007$continent, \n                drop = c('Asia', 'Europe'), \n                other_level = 'Eurasia'))\n#> \n#>   Africa Americas  Oceania  Eurasia \n#>       52       25        2       63"},{"path":"tidyverse-r.html","id":"dropping-unused-levels","chapter":"5 Tidyverse R","heading":"5.2.5 dropping unused levels","text":"function fct_drop() used drop unused levels. Unused levels usually problem plotting appear graph though contain data.","code":"\n# dropping Oceania\ngapminder_oc <- subset(gapminder_2007, continent != 'Oceania')\ntable(gapminder_oc$continent)\n#> \n#>   Africa Americas     Asia   Europe  Oceania \n#>       52       25       33       30        0\n# Because the level Oceania has not been dropped, it appears on the above plot.\nplot(gapminder_oc$continent)\n\n# dropping unused level\ntable(fct_drop(gapminder_oc$continent))\n#> \n#>   Africa Americas     Asia   Europe \n#>       52       25       33       30\nplot(fct_drop(gapminder_oc$continent))"},{"path":"tidyverse-r.html","id":"adding-levels","chapter":"5 Tidyverse R","heading":"5.2.5.1 adding levels","text":"function fct_expand() used add levels.","code":"\n# adding the level arctic\ntable(fct_expand(gapminder_oc$continent, 'arctic'))\n#> \n#>   Africa Americas     Asia   Europe  Oceania   arctic \n#>       52       25       33       30        0        0\n\n# adding the levels arctic and antarctica\ntable(fct_expand(gapminder_oc$continent, c('arctic', 'antarctica')))\n#> \n#>     Africa   Americas       Asia     Europe    Oceania \n#>         52         25         33         30          0 \n#>     arctic antarctica \n#>          0          0\n# newly added levels appear on the plot though they have no data\nplot(fct_expand(gapminder_oc$continent, c('arctic', 'antarctica')))"},{"path":"tidyverse-r.html","id":"data-manipulation-with-dplyr-and-tidyr","chapter":"5 Tidyverse R","heading":"5.3 Data Manipulation with dplyr and tidyr","text":"package dplyr one core packages group packages known tidyverse. developed released 2014 Hadley Wickham others. dplyr meant data manipulation ggplot2 data visualization, grammar data manipulation. focuses solely data frame manipulation transformation using set verbs (functions) consistent easy understand.Since dyplr belongs tidyverse world, can installed either installing tidyverse installing dplyr .","code":""},{"path":"tidyverse-r.html","id":"rename-columns-and-rows","chapter":"5 Tidyverse R","heading":"5.3.1 Rename columns and rows","text":"","code":""},{"path":"tidyverse-r.html","id":"tr-col-names","chapter":"5 Tidyverse R","heading":"5.3.1.1 Renaming columns","text":"function rename() used rename columns.rename(new_name = old_name)","code":"\nlibrary(readr)\nlibrary(dplyr)\nlibrary(gapminder)\n\n# loading data\ndata(gapminder)\n# get column names\nnames(gapminder)\n#> [1] \"country\"   \"continent\" \"year\"      \"lifeExp\"  \n#> [5] \"pop\"       \"gdpPercap\"\n\n# set column names\ngapminder <- rename(gapminder, \n                    Country = country, \n                    Continent = continent, \n                    Year = year, \n                    `Life Expectancy` = lifeExp, \n                    Population = pop, \n                    `GDP per Capita` = gdpPercap)\n# get column names\ncolnames(gapminder)\n#> [1] \"Country\"         \"Continent\"       \"Year\"           \n#> [4] \"Life Expectancy\" \"Population\"      \"GDP per Capita\""},{"path":"tidyverse-r.html","id":"renaming-rows","chapter":"5 Tidyverse R","heading":"5.3.1.2 Renaming rows","text":"Tibble support row names. See .","code":""},{"path":"tidyverse-r.html","id":"select-columns-and-filter-rows","chapter":"5 Tidyverse R","heading":"5.3.2 Select columns and filter rows","text":"","code":""},{"path":"tidyverse-r.html","id":"tr-filter-cols","chapter":"5 Tidyverse R","heading":"5.3.2.1 Selecting and dropping columns","text":"function select() used select rename columns.","code":"\n# preparing data\ncolumn_names <- c('Rank', 'Title', 'Genre', 'Description', 'Director', 'Actors', \n                  'Year', 'Runtime', 'Rating', 'Votes', 'Revenue', 'Metascore')\nmov <- read.table(file = \"data/IMDB-Movie-Data.csv\", header = T, sep = \",\", dec = \".\", fileEncoding = \"UTF-8\", quote = \"\\\"\",\n                  comment.char = \"\")\nhead(mov, 3)\n#>   Rank                   Title                    Genre\n#> 1    1 Guardians of the Galaxy  Action,Adventure,Sci-Fi\n#> 2    2              Prometheus Adventure,Mystery,Sci-Fi\n#> 3    3                   Split          Horror,Thriller\n#>                                                                                                                                                     Description\n#> 1                               A group of intergalactic criminals are forced to work together to stop a fanatical warrior from taking control of the universe.\n#> 2                               Following clues to the origin of mankind, a team finds a structure on a distant moon, but they soon realize they are not alone.\n#> 3 Three girls are kidnapped by a man with a diagnosed 23 distinct personalities. They must try to escape before the apparent emergence of a frightful new 24th.\n#>             Director\n#> 1         James Gunn\n#> 2       Ridley Scott\n#> 3 M. Night Shyamalan\n#>                                                                    Actors\n#> 1                    Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana\n#> 2 Noomi Rapace, Logan Marshall-Green, Michael Fassbender, Charlize Theron\n#> 3        James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula\n#>   Year Runtime..Minutes. Rating  Votes Revenue..Millions.\n#> 1 2014               121    8.1 757074             333.13\n#> 2 2012               124    7.0 485820             126.46\n#> 3 2016               117    7.3 157606             138.12\n#>   Metascore\n#> 1        76\n#> 2        65\n#> 3        62\nnames(mov) <- c('Rank', 'Title', 'Genre', 'Description', 'Director', 'Actors', \n                  'Year', 'Runtime', 'Rating', 'Votes', 'Revenue', 'Metascore')\n\n\n# selecting columns by column names\nmovies <- select(mov, c('Title', 'Year', 'Revenue', 'Metascore'))\nhead(movies, 3)\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n\n# columns can be passed directly without quotation marks\nmovies <- select(mov, Title, Year, Revenue, Metascore)\nhead(movies, 3)\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n\n# renaming column\nmovies <- select(mov, \n                 Title, \n                 `Release Year` = Year, \n                 `Revenue in Millions` = Revenue, \n                 Metascore)\nhead(movies, 3)\n#>                     Title Release Year Revenue in Millions\n#> 1 Guardians of the Galaxy         2014              333.13\n#> 2              Prometheus         2012              126.46\n#> 3                   Split         2016              138.12\n#>   Metascore\n#> 1        76\n#> 2        65\n#> 3        62\n\n# selecting columns by position\nmovies <- select(mov, 2, 7, 11, 12)\nhead(movies, 3)\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n\n# selecting columns by sequencing\nmovies <- select(mov, 7:12)\nhead(movies, 3)\n#>   Year Runtime Rating  Votes Revenue Metascore\n#> 1 2014     121    8.1 757074  333.13        76\n#> 2 2012     124    7.0 485820  126.46        65\n#> 3 2016     117    7.3 157606  138.12        62\n\n# : works with column names\nmovies <- select(mov, Year:Metascore)\nhead(movies, 3)\n#>   Year Runtime Rating  Votes Revenue Metascore\n#> 1 2014     121    8.1 757074  333.13        76\n#> 2 2012     124    7.0 485820  126.46        65\n#> 3 2016     117    7.3 157606  138.12        62\n\n# dropping columns by column names\nmovies <- select(mov, -Rank, -Genre, -Description, \n                  -Director, -Actors, -Runtime, -Rating, -Votes)\nhead(movies, 3)\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n\n# dropping columns by sequence\nmovies <- select(mov, -(1:6))\nhead(movies, 3)\n#>   Year Runtime Rating  Votes Revenue Metascore\n#> 1 2014     121    8.1 757074  333.13        76\n#> 2 2012     124    7.0 485820  126.46        65\n#> 3 2016     117    7.3 157606  138.12        62\n\nmovies <- select(mov, -(Rank:Actors))\nhead(movies, 3)\n#>   Year Runtime Rating  Votes Revenue Metascore\n#> 1 2014     121    8.1 757074  333.13        76\n#> 2 2012     124    7.0 485820  126.46        65\n#> 3 2016     117    7.3 157606  138.12        62\n\n# dropping columns by index position\nmovies <- select(mov, -c(1, 3, 4, 5, 6, 8, 9, 10))\nhead(movies, 3)\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n\n# dropping columns by index position\nmovies <- select(mov, -1, -3, -4, -5, -6, -8, -9, -10)\nhead(movies, 3)\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62"},{"path":"tidyverse-r.html","id":"selecting-column-based-on-a-condition","chapter":"5 Tidyverse R","heading":"5.3.2.2 Selecting column based on a condition","text":"functions starts_with(), ends_with(), matches(), contains() used select columns based specific pattern. functionstarts_with(): returns columns start specific prefixends_with(): returns columns end specific suffixmatches(): returns columns match particular regex patterncontains(): returns columns contain particular string","code":"\n# selecting columns starting with R\nmovies <- select(mov, starts_with('R'))\nhead(movies, 3)\n#>   Rank Runtime Rating Revenue\n#> 1    1     121    8.1  333.13\n#> 2    2     124    7.0  126.46\n#> 3    3     117    7.3  138.12\n\n# selecting columns starting with R and D\nmovies <- select(mov, starts_with(c('R', 'M')))\nhead(movies)\n#>   Rank Runtime Rating Revenue Metascore\n#> 1    1     121    8.1  333.13        76\n#> 2    2     124    7.0  126.46        65\n#> 3    3     117    7.3  138.12        62\n#> 4    4     108    7.2  270.32        59\n#> 5    5     123    6.2  325.02        40\n#> 6    6     103    6.1   45.13        42\n\n# selecting columns containing ea\nmovies <- select(mov, contains('ea'))\nhead(movies)\n#>   Year\n#> 1 2014\n#> 2 2012\n#> 3 2016\n#> 4 2016\n#> 5 2016\n#> 6 2016\n\n# selecting columns ending with r\nmovies <- select(mov, ends_with('r'))\nhead(movies)\n#>               Director Year\n#> 1           James Gunn 2014\n#> 2         Ridley Scott 2012\n#> 3   M. Night Shyamalan 2016\n#> 4 Christophe Lourdelet 2016\n#> 5           David Ayer 2016\n#> 6          Yimou Zhang 2016\n\n# selecting columns ending with r and e\nmovies <- select(mov, ends_with(c('k','r')))\nhead(movies)\n#>   Rank             Director Year\n#> 1    1           James Gunn 2014\n#> 2    2         Ridley Scott 2012\n#> 3    3   M. Night Shyamalan 2016\n#> 4    4 Christophe Lourdelet 2016\n#> 5    5           David Ayer 2016\n#> 6    6          Yimou Zhang 2016"},{"path":"tidyverse-r.html","id":"selecting-a-single-column","chapter":"5 Tidyverse R","heading":"5.3.3 Selecting a single column","text":"Selecting single column select() returns one-column data frame. Often, vector wanted instead, end function pull().function pull() used select single column return vector.","code":"\nmovies <- select(mov, c('Title', 'Year', 'Revenue', 'Metascore'))\n\n# using select returns a tibble\nhead(select(movies, 'Title'), 3)\n#>                     Title\n#> 1 Guardians of the Galaxy\n#> 2              Prometheus\n#> 3                   Split\nclass(select(movies, 'Title'))\n#> [1] \"data.frame\"\n\n# using pull returns a vector whose type depends on the data type of the column\nhead(pull(movies, var = 1))\n#> [1] \"Guardians of the Galaxy\" \"Prometheus\"             \n#> [3] \"Split\"                   \"Sing\"                   \n#> [5] \"Suicide Squad\"           \"The Great Wall\"\nclass(pull(movies, var = 1))\n#> [1] \"character\""},{"path":"tidyverse-r.html","id":"tr-filter-rows","chapter":"5 Tidyverse R","heading":"5.3.4 Filtering rows","text":"function filter() used filter rows.","code":"\nmovies <- select(mov, -c(1, 3, 4, 6, 8, 10))\n\n# using the filter() function\nmovies. <- filter(movies, Year == 2006)\nhead(movies., 3)\n#>                                        Title\n#> 1                               The Prestige\n#> 2 Pirates of the Caribbean: Dead Man's Chest\n#> 3                               The Departed\n#>            Director Year Rating Revenue Metascore\n#> 1 Christopher Nolan 2006    8.5   53.08        66\n#> 2    Gore Verbinski 2006    7.3  423.03        53\n#> 3   Martin Scorsese 2006    8.5  132.37        85\ntail(movies., 3)\n#>                                          Title\n#> 42 Talladega Nights: The Ballad of Ricky Bobby\n#> 43                         Lucky Number Slevin\n#> 44                               Inland Empire\n#>         Director Year Rating Revenue Metascore\n#> 42    Adam McKay 2006    6.6  148.21        66\n#> 43 Paul McGuigan 2006    7.8   22.49        53\n#> 44   David Lynch 2006    7.0      NA        NA\n\n# selecting movies released in 2006 with a rating above 8\nfilter(movies, Year == 2006 & Rating >= 8)\n#>                      Title                         Director\n#> 1             The Prestige                Christopher Nolan\n#> 2             The Departed                  Martin Scorsese\n#> 3            Casino Royale                  Martin Campbell\n#> 4          Pan's Labyrinth               Guillermo del Toro\n#> 5      The Lives of Others Florian Henckel von Donnersmarck\n#> 6 The Pursuit of Happyness                 Gabriele Muccino\n#> 7            Blood Diamond                     Edward Zwick\n#>   Year Rating Revenue Metascore\n#> 1 2006    8.5   53.08        66\n#> 2 2006    8.5  132.37        85\n#> 3 2006    8.0  167.01        80\n#> 4 2006    8.2   37.62        98\n#> 5 2006    8.5   11.28        89\n#> 6 2006    8.0  162.59        64\n#> 7 2006    8.0   57.37        64\n\n# without the & operator\nfilter(movies, Year == 2006, Rating >= 8)\n#>                      Title                         Director\n#> 1             The Prestige                Christopher Nolan\n#> 2             The Departed                  Martin Scorsese\n#> 3            Casino Royale                  Martin Campbell\n#> 4          Pan's Labyrinth               Guillermo del Toro\n#> 5      The Lives of Others Florian Henckel von Donnersmarck\n#> 6 The Pursuit of Happyness                 Gabriele Muccino\n#> 7            Blood Diamond                     Edward Zwick\n#>   Year Rating Revenue Metascore\n#> 1 2006    8.5   53.08        66\n#> 2 2006    8.5  132.37        85\n#> 3 2006    8.0  167.01        80\n#> 4 2006    8.2   37.62        98\n#> 5 2006    8.5   11.28        89\n#> 6 2006    8.0  162.59        64\n#> 7 2006    8.0   57.37        64\n\n# selecting rows with NA values on the Metascore column\nmovies. <- filter(movies, is.na(Metascore))\nhead(movies.)\n#>                     Title             Director Year Rating\n#> 1         Paris pieds nus       Dominique Abel 2016    6.8\n#> 2 Bahubali: The Beginning       S.S. Rajamouli 2015    8.3\n#> 3              Dead Awake       Phillip Guzman 2016    4.7\n#> 4               5- 25- 77 Patrick Read Johnson 2007    7.1\n#> 5 Don't Fuck in the Woods        Shawn Burkett 2016    2.7\n#> 6                  Fallen          Scott Hicks 2016    5.6\n#>   Revenue Metascore\n#> 1      NA        NA\n#> 2    6.50        NA\n#> 3    0.01        NA\n#> 4      NA        NA\n#> 5      NA        NA\n#> 6      NA        NA\n\n# selecting rows with NA values on the Revenue and Metascore column\nmovies. <- filter(movies, is.na(Revenue), is.na(Metascore))\nhead(movies.)\n#>                     Title             Director Year Rating\n#> 1         Paris pieds nus       Dominique Abel 2016    6.8\n#> 2               5- 25- 77 Patrick Read Johnson 2007    7.1\n#> 3 Don't Fuck in the Woods        Shawn Burkett 2016    2.7\n#> 4                  Fallen          Scott Hicks 2016    5.6\n#> 5            Contratiempo          Oriol Paulo 2016    7.9\n#> 6    Boyka: Undisputed IV      Todor Chapkanov 2016    7.4\n#>   Revenue Metascore\n#> 1      NA        NA\n#> 2      NA        NA\n#> 3      NA        NA\n#> 4      NA        NA\n#> 5      NA        NA\n#> 6      NA        NA\n\n# selecting rows with NA values on either the Revenue or Metascore column\nmovies. <- filter(movies, is.na(Revenue) | is.na(Metascore))\nhead(movies.)\n#>                     Title             Director Year Rating\n#> 1                Mindhorn           Sean Foley 2016    6.4\n#> 2          Hounds of Love            Ben Young 2016    6.7\n#> 3         Paris pieds nus       Dominique Abel 2016    6.8\n#> 4 Bahubali: The Beginning       S.S. Rajamouli 2015    8.3\n#> 5              Dead Awake       Phillip Guzman 2016    4.7\n#> 6               5- 25- 77 Patrick Read Johnson 2007    7.1\n#>   Revenue Metascore\n#> 1      NA        71\n#> 2      NA        72\n#> 3      NA        NA\n#> 4    6.50        NA\n#> 5    0.01        NA\n#> 6      NA        NA\n\n# selecting rows without NA values on the Metascore column \nmovies. <- filter(movies, !is.na(Metascore))\nhead(movies.)\n#>                     Title             Director Year Rating\n#> 1 Guardians of the Galaxy           James Gunn 2014    8.1\n#> 2              Prometheus         Ridley Scott 2012    7.0\n#> 3                   Split   M. Night Shyamalan 2016    7.3\n#> 4                    Sing Christophe Lourdelet 2016    7.2\n#> 5           Suicide Squad           David Ayer 2016    6.2\n#> 6          The Great Wall          Yimou Zhang 2016    6.1\n#>   Revenue Metascore\n#> 1  333.13        76\n#> 2  126.46        65\n#> 3  138.12        62\n#> 4  270.32        59\n#> 5  325.02        40\n#> 6   45.13        42\n\n# selecting rows without NA values on the Revenue and Metascore columns\nmovies. <- filter(movies, !is.na(Revenue), !is.na(Metascore))\nhead(movies.)\n#>                     Title             Director Year Rating\n#> 1 Guardians of the Galaxy           James Gunn 2014    8.1\n#> 2              Prometheus         Ridley Scott 2012    7.0\n#> 3                   Split   M. Night Shyamalan 2016    7.3\n#> 4                    Sing Christophe Lourdelet 2016    7.2\n#> 5           Suicide Squad           David Ayer 2016    6.2\n#> 6          The Great Wall          Yimou Zhang 2016    6.1\n#>   Revenue Metascore\n#> 1  333.13        76\n#> 2  126.46        65\n#> 3  138.12        62\n#> 4  270.32        59\n#> 5  325.02        40\n#> 6   45.13        42\nnrow(movies.)\n#> [1] 838\n\n# selecting rows without NA values on either the Revenue or Metascore columns\nmovies. <- filter(movies, !is.na(Revenue) | !is.na(Metascore))\nhead(movies.)\n#>                     Title             Director Year Rating\n#> 1 Guardians of the Galaxy           James Gunn 2014    8.1\n#> 2              Prometheus         Ridley Scott 2012    7.0\n#> 3                   Split   M. Night Shyamalan 2016    7.3\n#> 4                    Sing Christophe Lourdelet 2016    7.2\n#> 5           Suicide Squad           David Ayer 2016    6.2\n#> 6          The Great Wall          Yimou Zhang 2016    6.1\n#>   Revenue Metascore\n#> 1  333.13        76\n#> 2  126.46        65\n#> 3  138.12        62\n#> 4  270.32        59\n#> 5  325.02        40\n#> 6   45.13        42\n\nnrow(movies.)\n#> [1] 970\n\n# selecting films released in 2006 and 2008\nmovies. <- filter(movies, Year %in% c(2006, 2008))\nhead(movies.)\n#>                                        Title\n#> 1                            The Dark Knight\n#> 2                               The Prestige\n#> 3 Pirates of the Caribbean: Dead Man's Chest\n#> 4                               The Departed\n#> 5                                        300\n#> 6                                 Mamma Mia!\n#>            Director Year Rating Revenue Metascore\n#> 1 Christopher Nolan 2008    9.0  533.32        82\n#> 2 Christopher Nolan 2006    8.5   53.08        66\n#> 3    Gore Verbinski 2006    7.3  423.03        53\n#> 4   Martin Scorsese 2006    8.5  132.37        85\n#> 5       Zack Snyder 2006    7.7  210.59        52\n#> 6    Phyllida Lloyd 2008    6.4  143.70        51\n\n# selecting films released by 'James Gunn' or 'James Marsh'\nmovies. <- filter(movies, Director %in% c('James Gunn', 'James Marsh'))\nhead(movies.)\n#>                      Title    Director Year Rating Revenue\n#> 1  Guardians of the Galaxy  James Gunn 2014    8.1  333.13\n#> 2 The Theory of Everything James Marsh 2014    7.7   35.89\n#> 3                  Slither  James Gunn 2006    6.5    7.77\n#> 4                    Super  James Gunn 2010    6.8    0.32\n#>   Metascore\n#> 1        76\n#> 2        72\n#> 3        69\n#> 4        50\n\n# selecting films released between 2006 and 2008\nmovies. <- filter(movies, between(Year, 2006, 2008))\nhead(movies., 3)\n#>             Title             Director Year Rating Revenue\n#> 1       5- 25- 77 Patrick Read Johnson 2007    7.1      NA\n#> 2 The Dark Knight    Christopher Nolan 2008    9.0  533.32\n#> 3    The Prestige    Christopher Nolan 2006    8.5   53.08\n#>   Metascore\n#> 1        NA\n#> 2        82\n#> 3        66\ntail(movies., 3)\n#>                      Title   Director Year Rating Revenue\n#> 147       Taare Zameen Par Aamir Khan 2007    8.5    1.20\n#> 148        Hostel: Part II   Eli Roth 2007    5.5   17.54\n#> 149 Step Up 2: The Streets Jon M. Chu 2008    6.2   58.01\n#>     Metascore\n#> 147        42\n#> 148        46\n#> 149        50"},{"path":"tidyverse-r.html","id":"randomly-selecting-rows-1","chapter":"5 Tidyverse R","heading":"5.3.4.1 Randomly selecting rows","text":"function sample_frac() randomly samples rows returns fixed fraction .function sample_n() randomly samples rows returns fixed number .","code":"\n# sampling by a proportion\nsample_frac(movies, 0.005, replace = TRUE)\n#>               Title       Director Year Rating Revenue\n#> 1          Bad Moms      Jon Lucas 2016    6.2  113.08\n#> 2       Rescue Dawn  Werner Herzog 2006    7.3    5.48\n#> 3       Rescue Dawn  Werner Herzog 2006    7.3    5.48\n#> 4 The Warriors Gate Matthias Hoene 2016    5.3      NA\n#> 5  Marie Antoinette  Sofia Coppola 2006    6.4   15.96\n#>   Metascore\n#> 1        60\n#> 2        77\n#> 3        77\n#> 4        77\n#> 5        65\n# sampling by number\nsample_n(movies, 5, replace = TRUE)\n#>                  Title         Director Year Rating Revenue\n#> 1                Youth Paolo Sorrentino 2015    7.3    2.70\n#> 2            Brimstone Martin Koolhoven 2016    7.1      NA\n#> 3 Perfetti sconosciuti   Paolo Genovese 2016    7.7      NA\n#> 4             Watchmen      Zack Snyder 2009    7.6  107.50\n#> 5            Footloose     Craig Brewer 2011    5.9   51.78\n#>   Metascore\n#> 1        64\n#> 2        44\n#> 3        43\n#> 4        56\n#> 5        58"},{"path":"tidyverse-r.html","id":"slicing","chapter":"5 Tidyverse R","heading":"5.3.5 Slicing","text":"function slice() used slice data set.","code":"\nslice(movies, 200:205)\n#>                  Title                Director Year Rating\n#> 1 Central Intelligence Rawson Marshall Thurber 2016    6.3\n#> 2     Edge of Tomorrow              Doug Liman 2014    7.9\n#> 3  A Cure for Wellness          Gore Verbinski 2016    6.5\n#> 4              Snowden            Oliver Stone 2016    7.3\n#> 5             Iron Man             Jon Favreau 2008    7.9\n#> 6            Allegiant        Robert Schwentke 2016    5.7\n#>   Revenue Metascore\n#> 1  127.38        52\n#> 2  100.19        71\n#> 3    8.10        47\n#> 4   21.48        58\n#> 5  318.30        79\n#> 6   66.00        33"},{"path":"tidyverse-r.html","id":"top-values","chapter":"5 Tidyverse R","heading":"5.3.6 Top values","text":"function top_n() returns top nth number elements column.function top_frac() returns top nth elements column proportion.","code":"\n# top 5 movies by revenue\ntop_n(movies, 5, Revenue)\n#>                                        Title\n#> 1 Star Wars: Episode VII - The Force Awakens\n#> 2                            The Dark Knight\n#> 3                               The Avengers\n#> 4                             Jurassic World\n#> 5                                     Avatar\n#>            Director Year Rating Revenue Metascore\n#> 1       J.J. Abrams 2015    8.1  936.63        81\n#> 2 Christopher Nolan 2008    9.0  533.32        82\n#> 3       Joss Whedon 2012    8.1  623.28        69\n#> 4   Colin Trevorrow 2015    7.0  652.18        59\n#> 5     James Cameron 2009    7.8  760.51        83\n\n# if no column is specified, the last is used.\ntop_n(movies, 5)\n#>                   Title           Director Year Rating\n#> 1 Manchester by the Sea   Kenneth Lonergan 2016    7.9\n#> 2             Moonlight      Barry Jenkins 2016    7.5\n#> 3      12 Years a Slave      Steve McQueen 2013    8.1\n#> 4       Pan's Labyrinth Guillermo del Toro 2006    8.2\n#> 5           Ratatouille          Brad Bird 2007    8.0\n#> 6               Gravity     Alfonso Cuarón 2013    7.8\n#> 7               Boyhood  Richard Linklater 2014    7.9\n#>   Revenue Metascore\n#> 1   47.70        96\n#> 2   27.85        99\n#> 3   56.67        96\n#> 4   37.62        98\n#> 5  206.44        96\n#> 6  274.08        96\n#> 7   25.36       100\n# top 0.5% of movies by revenue\ntop_frac(movies, 0.005, Revenue)\n#>                                        Title\n#> 1 Star Wars: Episode VII - The Force Awakens\n#> 2                            The Dark Knight\n#> 3                               The Avengers\n#> 4                             Jurassic World\n#> 5                                     Avatar\n#>            Director Year Rating Revenue Metascore\n#> 1       J.J. Abrams 2015    8.1  936.63        81\n#> 2 Christopher Nolan 2008    9.0  533.32        82\n#> 3       Joss Whedon 2012    8.1  623.28        69\n#> 4   Colin Trevorrow 2015    7.0  652.18        59\n#> 5     James Cameron 2009    7.8  760.51        83\n\n# if no column is specified, the last is used.\ntop_frac(movies, 0.005)\n#>                   Title           Director Year Rating\n#> 1 Manchester by the Sea   Kenneth Lonergan 2016    7.9\n#> 2             Moonlight      Barry Jenkins 2016    7.5\n#> 3      12 Years a Slave      Steve McQueen 2013    8.1\n#> 4       Pan's Labyrinth Guillermo del Toro 2006    8.2\n#> 5           Ratatouille          Brad Bird 2007    8.0\n#> 6               Gravity     Alfonso Cuarón 2013    7.8\n#> 7               Boyhood  Richard Linklater 2014    7.9\n#>   Revenue Metascore\n#> 1   47.70        96\n#> 2   27.85        99\n#> 3   56.67        96\n#> 4   37.62        98\n#> 5  206.44        96\n#> 6  274.08        96\n#> 7   25.36       100"},{"path":"tidyverse-r.html","id":"using-select-and-filter","chapter":"5 Tidyverse R","heading":"5.3.7 Using select and filter","text":"operation, better use pipe operator.","code":"\nselect(filter(mov, Year == 2006, Rating >= 8), 2, 7, 9, 11, 12)\n#>                      Title Year Rating Revenue Metascore\n#> 1             The Prestige 2006    8.5   53.08        66\n#> 2             The Departed 2006    8.5  132.37        85\n#> 3            Casino Royale 2006    8.0  167.01        80\n#> 4          Pan's Labyrinth 2006    8.2   37.62        98\n#> 5      The Lives of Others 2006    8.5   11.28        89\n#> 6 The Pursuit of Happyness 2006    8.0  162.59        64\n#> 7            Blood Diamond 2006    8.0   57.37        64\nfilter(select(mov, 2, 7, 9, 11, 12), Year == 2006, Rating >= 8)\n#>                      Title Year Rating Revenue Metascore\n#> 1             The Prestige 2006    8.5   53.08        66\n#> 2             The Departed 2006    8.5  132.37        85\n#> 3            Casino Royale 2006    8.0  167.01        80\n#> 4          Pan's Labyrinth 2006    8.2   37.62        98\n#> 5      The Lives of Others 2006    8.5   11.28        89\n#> 6 The Pursuit of Happyness 2006    8.0  162.59        64\n#> 7            Blood Diamond 2006    8.0   57.37        64"},{"path":"tidyverse-r.html","id":"pipe-operator","chapter":"5 Tidyverse R","heading":"5.3.8 Pipe operator","text":"pipe operator (%>%) passes object forward function. shortcut Ctrl + Shift + M PC Cmd + Shift + M Mac used insert operator. , pass dataset mov function filter(), processing, passes output select().Using . placeholder data set. period replaced function data frame tibble.","code":"\n# passing movies dataset into filter and then to select\nmov %>%\n  filter(Year == 2006 & Rating >= 8) %>%\n  select(2, 7, 9, 11, 12)\n#>                      Title Year Rating Revenue Metascore\n#> 1             The Prestige 2006    8.5   53.08        66\n#> 2             The Departed 2006    8.5  132.37        85\n#> 3            Casino Royale 2006    8.0  167.01        80\n#> 4          Pan's Labyrinth 2006    8.2   37.62        98\n#> 5      The Lives of Others 2006    8.5   11.28        89\n#> 6 The Pursuit of Happyness 2006    8.0  162.59        64\n#> 7            Blood Diamond 2006    8.0   57.37        64\n\nmov %>%\n  select(2, 7, 9, 11, 12) %>%\n  filter(Year == 2006 & Rating >= 8)\n#>                      Title Year Rating Revenue Metascore\n#> 1             The Prestige 2006    8.5   53.08        66\n#> 2             The Departed 2006    8.5  132.37        85\n#> 3            Casino Royale 2006    8.0  167.01        80\n#> 4          Pan's Labyrinth 2006    8.2   37.62        98\n#> 5      The Lives of Others 2006    8.5   11.28        89\n#> 6 The Pursuit of Happyness 2006    8.0  162.59        64\n#> 7            Blood Diamond 2006    8.0   57.37        64\nmov %>%\n  filter(.$Year == 2006 & .$Rating >= 8) %>%\n  select(2, 7, 9, 11, 12)\n#>                      Title Year Rating Revenue Metascore\n#> 1             The Prestige 2006    8.5   53.08        66\n#> 2             The Departed 2006    8.5  132.37        85\n#> 3            Casino Royale 2006    8.0  167.01        80\n#> 4          Pan's Labyrinth 2006    8.2   37.62        98\n#> 5      The Lives of Others 2006    8.5   11.28        89\n#> 6 The Pursuit of Happyness 2006    8.0  162.59        64\n#> 7            Blood Diamond 2006    8.0   57.37        64"},{"path":"tidyverse-r.html","id":"tr-changing","chapter":"5 Tidyverse R","heading":"5.4 Manipulating Columns","text":"","code":""},{"path":"tidyverse-r.html","id":"inserting-a-new-column-1","chapter":"5 Tidyverse R","heading":"5.4.1 Inserting a new column","text":"function mutate() transmutate used manipulate columns. used :insert new columnsduplicate columnsderiving new columnsupdate existing onesThe function case_when() condensed form else statement CASE SQL.function coalesce() modelled COALESCE function SQL returns first non-missing element. Using , can replace NA values column.function transmutate() behaves like mutate() drops columns selected.","code":"\n# adding a new column known as example\nselect(mov, c('Title', 'Year', 'Revenue', 'Metascore')) %>%\nmutate(example = sample(1000)) %>%\n  head()\n#>                     Title Year Revenue Metascore example\n#> 1 Guardians of the Galaxy 2014  333.13        76     459\n#> 2              Prometheus 2012  126.46        65       4\n#> 3                   Split 2016  138.12        62     130\n#> 4                    Sing 2016  270.32        59     820\n#> 5           Suicide Squad 2016  325.02        40     275\n#> 6          The Great Wall 2016   45.13        42     153\n\n# duplicating the Revenue column\nselect(mov, c('Title', 'Year', 'Revenue', 'Metascore')) %>%\nmutate(Metascore.2 = Metascore) %>%\n  head()\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n#> 4                    Sing 2016  270.32        59\n#> 5           Suicide Squad 2016  325.02        40\n#> 6          The Great Wall 2016   45.13        42\n#>   Metascore.2\n#> 1          76\n#> 2          65\n#> 3          62\n#> 4          59\n#> 5          40\n#> 6          42\n\n# deriving the new column Movie Class\nlabels <- c('Very Low', 'Low', 'Moderate', 'High', 'Very High')\n\nselect(mov, c('Title', 'Year', 'Rating', 'Revenue', 'Metascore')) %>%\n  mutate(`Movie Class` = cut(Rating, breaks = c(0, 5.5, 6.5, 7, 7.5, 10), \n                           labels = labels)) %>%\n  head()\n#>                     Title Year Rating Revenue Metascore\n#> 1 Guardians of the Galaxy 2014    8.1  333.13        76\n#> 2              Prometheus 2012    7.0  126.46        65\n#> 3                   Split 2016    7.3  138.12        62\n#> 4                    Sing 2016    7.2  270.32        59\n#> 5           Suicide Squad 2016    6.2  325.02        40\n#> 6          The Great Wall 2016    6.1   45.13        42\n#>   Movie Class\n#> 1   Very High\n#> 2    Moderate\n#> 3        High\n#> 4        High\n#> 5         Low\n#> 6         Low\n\n# Updating the Director column to uppercase\nselect(mov, c(Title, Director, Year, Rating, Revenue, Metascore)) %>%\n  mutate(Director = toupper(Director)) %>%\n  head()\n#>                     Title             Director Year Rating\n#> 1 Guardians of the Galaxy           JAMES GUNN 2014    8.1\n#> 2              Prometheus         RIDLEY SCOTT 2012    7.0\n#> 3                   Split   M. NIGHT SHYAMALAN 2016    7.3\n#> 4                    Sing CHRISTOPHE LOURDELET 2016    7.2\n#> 5           Suicide Squad           DAVID AYER 2016    6.2\n#> 6          The Great Wall          YIMOU ZHANG 2016    6.1\n#>   Revenue Metascore\n#> 1  333.13        76\n#> 2  126.46        65\n#> 3  138.12        62\n#> 4  270.32        59\n#> 5  325.02        40\n#> 6   45.13        42\n\n# using a customized function\n# defining a function\nfin_crisis <- function(x) {\n    if(x < 2008){\n        return('pre financial crisis')\n    }else if(x < 2010 ){\n        return('financial crisis')\n    }else{\n        return('post financial crisis')\n    }\n}\n\nselect(mov, 2, 7, 11, 12) %>%\n  mutate('fin crisis Class' = sapply(Year, fin_crisis)) %>%\n  head()\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n#> 4                    Sing 2016  270.32        59\n#> 5           Suicide Squad 2016  325.02        40\n#> 6          The Great Wall 2016   45.13        42\n#>        fin crisis Class\n#> 1 post financial crisis\n#> 2 post financial crisis\n#> 3 post financial crisis\n#> 4 post financial crisis\n#> 5 post financial crisis\n#> 6 post financial crisis\n\n# deriving a new column from a calculation  \nselect(mov, 2, 5, 7, 8, 11) %>%\n  mutate('Rev/Run' = round(Revenue/Runtime, 2)) %>%\n  head()\n#>                     Title             Director Year Runtime\n#> 1 Guardians of the Galaxy           James Gunn 2014     121\n#> 2              Prometheus         Ridley Scott 2012     124\n#> 3                   Split   M. Night Shyamalan 2016     117\n#> 4                    Sing Christophe Lourdelet 2016     108\n#> 5           Suicide Squad           David Ayer 2016     123\n#> 6          The Great Wall          Yimou Zhang 2016     103\n#>   Revenue Rev/Run\n#> 1  333.13    2.75\n#> 2  126.46    1.02\n#> 3  138.12    1.18\n#> 4  270.32    2.50\n#> 5  325.02    2.64\n#> 6   45.13    0.44\n# classifying movies by ratings\nselect(mov, 2, 7, 9, 11, 12) %>%\n  mutate(category = case_when(Rating < 5.5 ~ 'Very Low', \n                              Rating < 6.5 ~ 'Low', \n                              Rating < 7 ~ 'Moderate', \n                              Rating < 7.5 ~ 'High', \n                              Rating <= 10 ~ 'Very High')) %>%\n  head()\n#>                     Title Year Rating Revenue Metascore\n#> 1 Guardians of the Galaxy 2014    8.1  333.13        76\n#> 2              Prometheus 2012    7.0  126.46        65\n#> 3                   Split 2016    7.3  138.12        62\n#> 4                    Sing 2016    7.2  270.32        59\n#> 5           Suicide Squad 2016    6.2  325.02        40\n#> 6          The Great Wall 2016    6.1   45.13        42\n#>    category\n#> 1 Very High\n#> 2      High\n#> 3      High\n#> 4      High\n#> 5       Low\n#> 6       Low\n# selecting some rows containing NA values\nselect(mov, 2, 5, 7, 9, 11, 12) %>%\n  filter(is.na(Revenue)) %>%\n  slice(c(8, 23, 26, 40, 43, 48))\n#>                      Title        Director Year Rating\n#> 1  The Autopsy of Jane Doe   André Ovredal 2016    6.8\n#> 2                  Old Boy       Spike Lee 2013    5.8\n#> 3                  Satanic Jeffrey G. Hunt 2016    3.7\n#> 4      Absolutely Anything     Terry Jones 2015    6.0\n#> 5 The Headhunter's Calling   Mark Williams 2016    6.9\n#> 6           Predestination Michael Spierig 2014    7.5\n#>   Revenue Metascore\n#> 1      NA        65\n#> 2      NA        49\n#> 3      NA        NA\n#> 4      NA        31\n#> 5      NA        85\n#> 6      NA        69\n\n# replacing NA values with a value\nselect(mov, 2, 5, 7, 9, 11, 12) %>%\n  mutate(Revenue = coalesce(Revenue, 50)) %>%\n  slice(c(8, 23, 26, 40, 43, 48))\n#>                     Title             Director Year Rating\n#> 1                Mindhorn           Sean Foley 2016    6.4\n#> 2          Hounds of Love            Ben Young 2016    6.7\n#> 3         Paris pieds nus       Dominique Abel 2016    6.8\n#> 4               5- 25- 77 Patrick Read Johnson 2007    7.1\n#> 5 Don't Fuck in the Woods        Shawn Burkett 2016    2.7\n#> 6                  Fallen          Scott Hicks 2016    5.6\n#>   Revenue Metascore\n#> 1      50        71\n#> 2      50        72\n#> 3      50        NA\n#> 4      50        NA\n#> 5      50        NA\n#> 6      50        NA\n\n# replacing NA values with a computed value (mean/median)\nselect(mov, 2, 5, 7, 9, 11, 12) %>%\n  mutate(Revenue = coalesce(Revenue, round(median(Revenue, na.rm = T))), \n         Metascore = coalesce(Metascore, round(mean(Metascore, na.rm = T)))) %>%\n  slice(c(8, 23, 26, 40, 43, 48))\n#>                     Title             Director Year Rating\n#> 1                Mindhorn           Sean Foley 2016    6.4\n#> 2          Hounds of Love            Ben Young 2016    6.7\n#> 3         Paris pieds nus       Dominique Abel 2016    6.8\n#> 4               5- 25- 77 Patrick Read Johnson 2007    7.1\n#> 5 Don't Fuck in the Woods        Shawn Burkett 2016    2.7\n#> 6                  Fallen          Scott Hicks 2016    5.6\n#>   Revenue Metascore\n#> 1      48        71\n#> 2      48        72\n#> 3      48        59\n#> 4      48        59\n#> 5      48        59\n#> 6      48        59\n# transmutate drops unselected columns\nselect(mov, c(Title, Director, Year, Rating, Revenue, Metascore)) %>%\n  transmute(Director = toupper(Director)) %>%\n  head()\n#>               Director\n#> 1           JAMES GUNN\n#> 2         RIDLEY SCOTT\n#> 3   M. NIGHT SHYAMALAN\n#> 4 CHRISTOPHE LOURDELET\n#> 5           DAVID AYER\n#> 6          YIMOU ZHANG\n\n# transmutate keeps selected columns\nselect(mov, c(Title, Director, Year, Runtime, Revenue, Metascore)) %>%\n  transmute(Director = toupper(Director), \n            Year,\n            Revenue = round(Revenue/Runtime, 2)) %>%\nhead()\n#>               Director Year Revenue\n#> 1           JAMES GUNN 2014    2.75\n#> 2         RIDLEY SCOTT 2012    1.02\n#> 3   M. NIGHT SHYAMALAN 2016    1.18\n#> 4 CHRISTOPHE LOURDELET 2016    2.50\n#> 5           DAVID AYER 2016    2.64\n#> 6          YIMOU ZHANG 2016    0.44"},{"path":"tidyverse-r.html","id":"sorting-and-ranking-1","chapter":"5 Tidyverse R","heading":"5.5 Sorting and ranking","text":"","code":""},{"path":"tidyverse-r.html","id":"tr-sort","chapter":"5 Tidyverse R","heading":"5.5.1 Sorting","text":"function arrange() used sort data frames. ascending sort descending sort, use function desc() negative sign.","code":"\n# sort increasing\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  arrange(Revenue) %>%\n  head(10)\n#>                       Title Year Runtime Revenue Metascore\n#> 1          A Kind of Murder 2016      95    0.00        50\n#> 2                Dead Awake 2016      99    0.01        NA\n#> 3                 Wakefield 2016     106    0.01        61\n#> 4                  Lovesong 2016      84    0.01        74\n#> 5               Love, Rosie 2014     102    0.01        44\n#> 6           Into the Forest 2015     101    0.01        59\n#> 7                Stake Land 2010      98    0.02        66\n#> 8            The First Time 2012      95    0.02        55\n#> 9  The Blackcoat's Daughter 2015      93    0.02        68\n#> 10         The Sea of Trees 2015     110    0.02        23\n\n# sort decreasing using the negative sign\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  arrange(-Revenue) %>%\n  head(10)\n#>                                         Title Year Runtime\n#> 1  Star Wars: Episode VII - The Force Awakens 2015     136\n#> 2                                      Avatar 2009     162\n#> 3                              Jurassic World 2015     124\n#> 4                                The Avengers 2012     143\n#> 5                             The Dark Knight 2008     152\n#> 6                                   Rogue One 2016     133\n#> 7                                Finding Dory 2016      97\n#> 8                     Avengers: Age of Ultron 2015     141\n#> 9                       The Dark Knight Rises 2012     164\n#> 10            The Hunger Games: Catching Fire 2013     146\n#>    Revenue Metascore\n#> 1   936.63        81\n#> 2   760.51        83\n#> 3   652.18        59\n#> 4   623.28        69\n#> 5   533.32        82\n#> 6   532.17        65\n#> 7   486.29        77\n#> 8   458.99        66\n#> 9   448.13        78\n#> 10  424.65        76\n\n# sort decreasing using desc()\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  arrange(desc(Revenue)) %>%\n  head(10)\n#>                                         Title Year Runtime\n#> 1  Star Wars: Episode VII - The Force Awakens 2015     136\n#> 2                                      Avatar 2009     162\n#> 3                              Jurassic World 2015     124\n#> 4                                The Avengers 2012     143\n#> 5                             The Dark Knight 2008     152\n#> 6                                   Rogue One 2016     133\n#> 7                                Finding Dory 2016      97\n#> 8                     Avengers: Age of Ultron 2015     141\n#> 9                       The Dark Knight Rises 2012     164\n#> 10            The Hunger Games: Catching Fire 2013     146\n#>    Revenue Metascore\n#> 1   936.63        81\n#> 2   760.51        83\n#> 3   652.18        59\n#> 4   623.28        69\n#> 5   533.32        82\n#> 6   532.17        65\n#> 7   486.29        77\n#> 8   458.99        66\n#> 9   448.13        78\n#> 10  424.65        76\n\n\n# sorting on multiple columns\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  arrange(-Metascore, Revenue) %>%\n  head(10)\n#>                    Title Year Runtime Revenue Metascore\n#> 1                Boyhood 2014     165   25.36       100\n#> 2              Moonlight 2016     111   27.85        99\n#> 3        Pan's Labyrinth 2006     118   37.62        98\n#> 4  Manchester by the Sea 2016     137   47.70        96\n#> 5       12 Years a Slave 2013     134   56.67        96\n#> 6            Ratatouille 2007     111  206.44        96\n#> 7                Gravity 2013      91  274.08        96\n#> 8                  Carol 2015     118    0.25        95\n#> 9       Zero Dark Thirty 2012     157   95.72        95\n#> 10    The Social Network 2010     120   96.92        95"},{"path":"tidyverse-r.html","id":"ranking-1","chapter":"5 Tidyverse R","heading":"5.5.2 Ranking","text":"functions row_number(), ntile(), min_rank(), dense_rank(), percent_rank() cume_dist() used ranking.","code":"\n# ranking by revenue ascending\nselect(mov, Title, Year, Revenue, Metascore) %>%\n  mutate(rank_by_revenue = dense_rank(Revenue)) %>%\n  head()\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n#> 4                    Sing 2016  270.32        59\n#> 5           Suicide Squad 2016  325.02        40\n#> 6          The Great Wall 2016   45.13        42\n#>   rank_by_revenue\n#> 1             783\n#> 2             623\n#> 3             646\n#> 4             761\n#> 5             781\n#> 6             370\n\n# ranking by revenue decreasing using desc()\nselect(mov, Title, Year, Revenue, Metascore) %>%\n  mutate(rank_by_revenue = dense_rank(desc(Revenue))) %>%\n  head()\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n#> 4                    Sing 2016  270.32        59\n#> 5           Suicide Squad 2016  325.02        40\n#> 6          The Great Wall 2016   45.13        42\n#>   rank_by_revenue\n#> 1              32\n#> 2             192\n#> 3             169\n#> 4              54\n#> 5              34\n#> 6             445\n\n# ranking by revenue decreasing using negative sign\nselect(mov, Title, Year, Revenue, Metascore) %>%\n  mutate(rank_by_revenue = dense_rank(-Revenue)) %>%\n  head()\n#>                     Title Year Revenue Metascore\n#> 1 Guardians of the Galaxy 2014  333.13        76\n#> 2              Prometheus 2012  126.46        65\n#> 3                   Split 2016  138.12        62\n#> 4                    Sing 2016  270.32        59\n#> 5           Suicide Squad 2016  325.02        40\n#> 6          The Great Wall 2016   45.13        42\n#>   rank_by_revenue\n#> 1              32\n#> 2             192\n#> 3             169\n#> 4              54\n#> 5              34\n#> 6             445\n\n# rank and arrange\nselect(mov, Title, Year, Revenue, Metascore) %>%\n  mutate(rank_by_revenue = dense_rank(desc(Revenue))) %>%\n  arrange(desc(Revenue)) %>%\n  head()\n#>                                        Title Year Revenue\n#> 1 Star Wars: Episode VII - The Force Awakens 2015  936.63\n#> 2                                     Avatar 2009  760.51\n#> 3                             Jurassic World 2015  652.18\n#> 4                               The Avengers 2012  623.28\n#> 5                            The Dark Knight 2008  533.32\n#> 6                                  Rogue One 2016  532.17\n#>   Metascore rank_by_revenue\n#> 1        81               1\n#> 2        83               2\n#> 3        59               3\n#> 4        69               4\n#> 5        82               5\n#> 6        65               6\n\n# adding row numbers\nselect(mov, Title, Year, Revenue, Metascore) %>%\n  arrange(Year, Revenue) %>%\n  mutate(`row number` = row_number()) %>%\n  head()\n#>                              Title Year Revenue Metascore\n#> 1                        Idiocracy 2006    0.44        66\n#> 2                         The Host 2006    2.20        85\n#> 3 Perfume: The Story of a Murderer 2006    2.21        56\n#> 4                         The Fall 2006    2.28        64\n#> 5                    She's the Man 2006    2.34        45\n#> 6                      Rescue Dawn 2006    5.48        77\n#>   row number\n#> 1          1\n#> 2          2\n#> 3          3\n#> 4          4\n#> 5          5\n#> 6          6\n\n# dividing data into evenly sized buckets\nmovies <-\nselect(mov, Title, Year, Revenue, Metascore) %>%\n  arrange(Year) %>%\n  mutate(buckets = ntile(Revenue, 5))\nhead(movies)\n#>                                        Title Year Revenue\n#> 1                               The Prestige 2006   53.08\n#> 2 Pirates of the Caribbean: Dead Man's Chest 2006  423.03\n#> 3                               The Departed 2006  132.37\n#> 4                                        300 2006  210.59\n#> 5                              Casino Royale 2006  167.01\n#> 6                                       Cars 2006  244.05\n#>   Metascore buckets\n#> 1        66       3\n#> 2        53       5\n#> 3        85       4\n#> 4        52       5\n#> 5        80       5\n#> 6        73       5\n\ntable(movies$buckets)\n#> \n#>   1   2   3   4   5 \n#> 175 175 174 174 174\n\n# calculating mean by buckets\ntapply(movies$Metascore, movies$buckets, function(x)round(mean(x, na.rm = T), 1))\n#>    1    2    3    4    5 \n#> 62.4 57.7 54.3 58.5 64.9"},{"path":"tidyverse-r.html","id":"splitting-and-merging-columns-1","chapter":"5 Tidyverse R","heading":"5.6 Splitting and Merging columns","text":"","code":""},{"path":"tidyverse-r.html","id":"splitting-columns-1","chapter":"5 Tidyverse R","heading":"5.6.1 Splitting columns","text":"function separate() package tidyr used split columns.Also, can make use mutate() substring() base R str_sub() stringr split position.","code":"\n# reading data\nbusiestAirports <- read.table(file = \"data/busiestAirports.csv\", \n                              header = T, \n                              sep=\",\", \n                              dec = \".\", \n                              quote = \"\\\"\")\n\nbusiestAirports <- select(busiestAirports, c('iata_icao' = 5, 'location', 'country'))\nhead(busiestAirports)\n#>   iata_icao                 location              country\n#> 1  ATL/KATL         Atlanta, Georgia        United States\n#> 2  PEK/ZBAA Chaoyang-Shunyi, Beijing                China\n#> 3  DXB/OMDB           Garhoud, Dubai United Arab Emirates\n#> 4  LAX/KLAX  Los Angeles, California        United States\n#> 5  HND/RJTT               Ota, Tokyo                Japan\n#> 6  ORD/KORD        Chicago, Illinois        United States\n\n# splitting the column iata_icao into iata and icao\nbusiest_Airports <- \n  tidyr::separate(busiestAirports, col = 'iata_icao', into = c('iata', 'icao'), sep = '/')\nhead(busiest_Airports)\n#>   iata icao                 location              country\n#> 1  ATL KATL         Atlanta, Georgia        United States\n#> 2  PEK ZBAA Chaoyang-Shunyi, Beijing                China\n#> 3  DXB OMDB           Garhoud, Dubai United Arab Emirates\n#> 4  LAX KLAX  Los Angeles, California        United States\n#> 5  HND RJTT               Ota, Tokyo                Japan\n#> 6  ORD KORD        Chicago, Illinois        United States\n# using substring\nbusiestAirports %>%\n  mutate(iata = substring(iata_icao, 1, 3), icao = substring(iata_icao, 5, 7)) %>%\n  select(-1) %>%\n  head()\n#>                   location              country iata icao\n#> 1         Atlanta, Georgia        United States  ATL  KAT\n#> 2 Chaoyang-Shunyi, Beijing                China  PEK  ZBA\n#> 3           Garhoud, Dubai United Arab Emirates  DXB  OMD\n#> 4  Los Angeles, California        United States  LAX  KLA\n#> 5               Ota, Tokyo                Japan  HND  RJT\n#> 6        Chicago, Illinois        United States  ORD  KOR\n\n# using str_sub\nbusiestAirports %>%\n  mutate(iata = stringr::str_sub(iata_icao, 1, 3), icao = stringr::str_sub(iata_icao, 5, 7)) %>%\n  select(-1) %>%\n  head()\n#>                   location              country iata icao\n#> 1         Atlanta, Georgia        United States  ATL  KAT\n#> 2 Chaoyang-Shunyi, Beijing                China  PEK  ZBA\n#> 3           Garhoud, Dubai United Arab Emirates  DXB  OMD\n#> 4  Los Angeles, California        United States  LAX  KLA\n#> 5               Ota, Tokyo                Japan  HND  RJT\n#> 6        Chicago, Illinois        United States  ORD  KOR"},{"path":"tidyverse-r.html","id":"merging-columns-1","chapter":"5 Tidyverse R","heading":"5.6.2 Merging columns","text":"function unite() package tidyr used merge columns.","code":"\n# reading data\nbusiestAirports <- read.table(file = \"data/busiestAirports.csv\", \n                              header = T, \n                              sep=\",\", \n                              dec = \".\", \n                              quote = \"\\\"\")\nbusiestAirports <- select(busiestAirports, c('iata_icao' = 5, 'location', 'country'))\nhead(busiestAirports)\n#>   iata_icao                 location              country\n#> 1  ATL/KATL         Atlanta, Georgia        United States\n#> 2  PEK/ZBAA Chaoyang-Shunyi, Beijing                China\n#> 3  DXB/OMDB           Garhoud, Dubai United Arab Emirates\n#> 4  LAX/KLAX  Los Angeles, California        United States\n#> 5  HND/RJTT               Ota, Tokyo                Japan\n#> 6  ORD/KORD        Chicago, Illinois        United States\n\n# merging the columns iata, icao into iata_icao\nbusiestAirports <- \n  tidyr::unite(busiestAirports, location, country, col = `location country`, sep = ', ')\nhead(busiestAirports)\n#>   iata_icao                       location country\n#> 1  ATL/KATL        Atlanta, Georgia, United States\n#> 2  PEK/ZBAA        Chaoyang-Shunyi, Beijing, China\n#> 3  DXB/OMDB   Garhoud, Dubai, United Arab Emirates\n#> 4  LAX/KLAX Los Angeles, California, United States\n#> 5  HND/RJTT                      Ota, Tokyo, Japan\n#> 6  ORD/KORD       Chicago, Illinois, United States"},{"path":"tidyverse-r.html","id":"rearranging-columns","chapter":"5 Tidyverse R","heading":"5.6.3 Rearranging columns","text":"function relocate() used rearrange columns. added dplr 1.0.0.","code":"\n# rearranging columns\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  relocate(Revenue, Metascore) %>%\n  head(3)\n#>   Revenue Metascore                   Title Year Runtime\n#> 1  333.13        76 Guardians of the Galaxy 2014     121\n#> 2  126.46        65              Prometheus 2012     124\n#> 3  138.12        62                   Split 2016     117\n\n# placing year after metascore\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  relocate(Year, .after = Metascore) %>%\n  head(3)\n#>                     Title Runtime Revenue Metascore Year\n#> 1 Guardians of the Galaxy     121  333.13        76 2014\n#> 2              Prometheus     124  126.46        65 2012\n#> 3                   Split     117  138.12        62 2016\n\n# placing year before title\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  relocate(Year, .before = Title) %>%\n  head(3)\n#>   Year                   Title Runtime Revenue Metascore\n#> 1 2014 Guardians of the Galaxy     121  333.13        76\n#> 2 2012              Prometheus     124  126.46        65\n#> 3 2016                   Split     117  138.12        62\n\n# placing year at the end\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  relocate(Year, .after = last_col()) %>%\n  head(3)\n#>                     Title Runtime Revenue Metascore Year\n#> 1 Guardians of the Galaxy     121  333.13        76 2014\n#> 2              Prometheus     124  126.46        65 2012\n#> 3                   Split     117  138.12        62 2016\n\n# numeric columns last\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  relocate(where(is.numeric), .after = where(is.character)) %>%\n  head(3)\n#>                     Title Year Runtime Revenue Metascore\n#> 1 Guardians of the Galaxy 2014     121  333.13        76\n#> 2              Prometheus 2012     124  126.46        65\n#> 3                   Split 2016     117  138.12        62\n\n# numeric columns first\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  relocate(where(is.numeric), .before = where(is.character)) %>%\n  head(3)\n#>   Year Runtime Revenue Metascore                   Title\n#> 1 2014     121  333.13        76 Guardians of the Galaxy\n#> 2 2012     124  126.46        65              Prometheus\n#> 3 2016     117  138.12        62                   Split\n\n# selecting character columns only\nselect(mov, c(Title, Year, Runtime, Revenue, Metascore)) %>%\n  relocate(where(is.character)) %>%\n  head(3)\n#>                     Title Year Runtime Revenue Metascore\n#> 1 Guardians of the Galaxy 2014     121  333.13        76\n#> 2              Prometheus 2012     124  126.46        65\n#> 3                   Split 2016     117  138.12        62"},{"path":"tidyverse-r.html","id":"deleting-columns-of-data","chapter":"5 Tidyverse R","heading":"5.6.4 Deleting columns of data","text":"special function delete columns function select() can used select drop columns.","code":""},{"path":"tidyverse-r.html","id":"manipulating-rows-1","chapter":"5 Tidyverse R","heading":"5.7 Manipulating Rows","text":"","code":""},{"path":"tidyverse-r.html","id":"inserting-rows","chapter":"5 Tidyverse R","heading":"5.7.1 Inserting rows","text":"function add_row() used add row(s) data frames. adds:single row add_row(dt, column_name = value)multiple rows add_row(dt, column_name = values)Rows can also added using function bind_rows() efficient implementation .call(rbind, dfs) base R.function rows_insert() modelled SQL INSERT clause also used insert rows. requires column unique value uniquely identify row. function works two tibbles, therefore rows inserted must converted tibble using function tibble() use.\nnoted function added version 1.0.0 package, therefore well update package make use .\nfunction rows_insert() requires argument identifies unique row.","code":"\n# adding a single row of data\nselect(mov, c(2, 5, 7, 9, 11, 12)) %>%\nadd_row(Title = \"the big g\", \n        Director = \"goro lovic\", \n        Year = 2015, \n        Rating = 9.9, \n        Revenue = 1000, \n        Metascore = 100) %>%\ntail()\n#>                       Title         Director Year Rating\n#> 996    Secret in Their Eyes        Billy Ray 2015    6.2\n#> 997         Hostel: Part II         Eli Roth 2007    5.5\n#> 998  Step Up 2: The Streets       Jon M. Chu 2008    6.2\n#> 999            Search Party   Scot Armstrong 2014    5.6\n#> 1000             Nine Lives Barry Sonnenfeld 2016    5.3\n#> 1001              the big g       goro lovic 2015    9.9\n#>      Revenue Metascore\n#> 996       NA        45\n#> 997    17.54        46\n#> 998    58.01        50\n#> 999       NA        22\n#> 1000   19.64        11\n#> 1001 1000.00       100\n\n# adding multiple rows of data\nselect(mov, c(2, 5, 7, 9, 11, 12)) %>%\n  add_row(Title= c(\"the big g\", \"everyday\", \"true colors\"), \n          Director = c(\"goro lovic\", \"fk\", \"tupac\"), \n          Year = c(2015, 2016, 2014), \n          Rating = c(9.9, 6.6, 8), \n          Revenue = c(1000, 250, 350), \n          Metascore = c(100, 60, 40)) %>%\n  tail()\n#>                       Title         Director Year Rating\n#> 998  Step Up 2: The Streets       Jon M. Chu 2008    6.2\n#> 999            Search Party   Scot Armstrong 2014    5.6\n#> 1000             Nine Lives Barry Sonnenfeld 2016    5.3\n#> 1001              the big g       goro lovic 2015    9.9\n#> 1002               everyday               fk 2016    6.6\n#> 1003            true colors            tupac 2014    8.0\n#>      Revenue Metascore\n#> 998    58.01        50\n#> 999       NA        22\n#> 1000   19.64        11\n#> 1001 1000.00       100\n#> 1002  250.00        60\n#> 1003  350.00        40\n# adding a single row\nselect(mov, 2, 5, 7, 9, 11, 12) %>%\n  bind_rows(list(Title = \"the big g\", \n                 Director = \"goro lovic\", \n                 Year = 2015, \n                 Rating = 9.9, \n                 Revenue = 1000, \n                 Metascore = 100)) %>%\ntail(3)\n#>             Title         Director Year Rating Revenue\n#> 999  Search Party   Scot Armstrong 2014    5.6      NA\n#> 1000   Nine Lives Barry Sonnenfeld 2016    5.3   19.64\n#> 1001    the big g       goro lovic 2015    9.9 1000.00\n#>      Metascore\n#> 999         22\n#> 1000        11\n#> 1001       100\n\n# adding multiple rows\nselect(mov, 2, 5, 7, 9, 11, 12) %>%\n  bind_rows(list(Rank= c(1, 3, 5),\n                 Title= c(\"the big g\", \"everyday\", \"true colors\"), \n                 Director = c(\"goro lovic\", \"fk\", \"tupac\"), \n                 Year = c(2015, 2016, 2014), \n                 Rating = c(9.9, 6.6, 8), \n                 Revenue = c(1000, 250, 350), \n                 Metascore = c(100, 60, 40))) %>%\ntail()\n#>                       Title         Director Year Rating\n#> 998  Step Up 2: The Streets       Jon M. Chu 2008    6.2\n#> 999            Search Party   Scot Armstrong 2014    5.6\n#> 1000             Nine Lives Barry Sonnenfeld 2016    5.3\n#> 1001              the big g       goro lovic 2015    9.9\n#> 1002               everyday               fk 2016    6.6\n#> 1003            true colors            tupac 2014    8.0\n#>      Revenue Metascore Rank\n#> 998    58.01        50   NA\n#> 999       NA        22   NA\n#> 1000   19.64        11   NA\n#> 1001 1000.00       100    1\n#> 1002  250.00        60    3\n#> 1003  350.00        40    5\n# creating a tibble\ntb <- \n  tibble(Rank = 1001, \n         Title = \"the big g\", \n         Director = \"goro lovic\", \n         Year = 2015, \n         Rating = 9.9, \n         Revenue = 1000, \n         Metascore = 100)\n         \n# inserting a single value\nselect(mov, 1, 2, 5, 7, 9, 11, 12) %>%\n  rows_insert(tb, by = \"Rank\") %>%\n  tail()\n#>      Rank                  Title         Director Year\n#> 996   996   Secret in Their Eyes        Billy Ray 2015\n#> 997   997        Hostel: Part II         Eli Roth 2007\n#> 998   998 Step Up 2: The Streets       Jon M. Chu 2008\n#> 999   999           Search Party   Scot Armstrong 2014\n#> 1000 1000             Nine Lives Barry Sonnenfeld 2016\n#> 1001 1001              the big g       goro lovic 2015\n#>      Rating Revenue Metascore\n#> 996     6.2      NA        45\n#> 997     5.5   17.54        46\n#> 998     6.2   58.01        50\n#> 999     5.6      NA        22\n#> 1000    5.3   19.64        11\n#> 1001    9.9 1000.00       100\n\n# inserting multiple values\ntb <- \n  tibble(Rank= 1001:1003,\n         Title= c(\"the big g\", \"everyday\", \"true colors\"), \n         Director = c(\"goro lovic\", \"fk\", \"tupac\"), \n         Year = c(2015, 2016, 2014), \n         Rating = c(9.9, 6.6, 8), \n         Revenue = c(1000, 250, 350), \n         Metascore = c(100, 60, 40))\n\nselect(mov, 1, 2, 5, 7, 9, 11, 12) %>%\n  rows_insert(tb, by = \"Rank\") %>%\n  tail()\n#>      Rank                  Title         Director Year\n#> 998   998 Step Up 2: The Streets       Jon M. Chu 2008\n#> 999   999           Search Party   Scot Armstrong 2014\n#> 1000 1000             Nine Lives Barry Sonnenfeld 2016\n#> 1001 1001              the big g       goro lovic 2015\n#> 1002 1002               everyday               fk 2016\n#> 1003 1003            true colors            tupac 2014\n#>      Rating Revenue Metascore\n#> 998     6.2   58.01        50\n#> 999     5.6      NA        22\n#> 1000    5.3   19.64        11\n#> 1001    9.9 1000.00       100\n#> 1002    6.6  250.00        60\n#> 1003    8.0  350.00        40"},{"path":"tidyverse-r.html","id":"updating-rows-of-data-1","chapter":"5 Tidyverse R","heading":"5.7.2 Updating rows of data","text":"function rows_update() rows_upsert() modelled SQL UPDATE UPSERT clauses used update row values. former updates row values, later updates existing rows inserts new ones, present. required column unique value uniquely identify row. rows_insert(), functions work two tibbles, therefore rows inserted must converted tibble using function tibble() use.","code":"\n# updating a single row\ntb <- \n  tibble(Rank = 5, \n         Title = \"the big g\", \n         Director = \"goro lovic\", \n         Year = 2015, \n         Rating = 9.9, \n         Revenue = 1000, \n         Metascore = 100)\n\nselect(mov, 1, 2, 5, 7, 9, 11, 12) %>%\n  rows_update(tb, by = \"Rank\") %>%\n  head()\n#>   Rank                   Title             Director Year\n#> 1    1 Guardians of the Galaxy           James Gunn 2014\n#> 2    2              Prometheus         Ridley Scott 2012\n#> 3    3                   Split   M. Night Shyamalan 2016\n#> 4    4                    Sing Christophe Lourdelet 2016\n#> 5    5               the big g           goro lovic 2015\n#> 6    6          The Great Wall          Yimou Zhang 2016\n#>   Rating Revenue Metascore\n#> 1    8.1  333.13        76\n#> 2    7.0  126.46        65\n#> 3    7.3  138.12        62\n#> 4    7.2  270.32        59\n#> 5    9.9 1000.00       100\n#> 6    6.1   45.13        42\n  \n# updating multiple rows\ntb <- \n  tibble(Rank= c(1, 3, 5),\n         Title= c(\"the big g\", \"everyday\", \"true colors\"), \n         Director = c(\"goro lovic\", \"fk\", \"tupac\"), \n         Year = c(2015, 2016, 2014), \n         Rating = c(9.9, 6.6, 8), \n         Revenue = c(1000, 250, 350), \n         Metascore = c(100, 60, 40))\n\nselect(mov, 1, 2, 5, 7, 9, 11, 12) %>%\n  rows_update(tb, by = \"Rank\") %>%\n  head()\n#>   Rank          Title             Director Year Rating\n#> 1    1      the big g           goro lovic 2015    9.9\n#> 2    2     Prometheus         Ridley Scott 2012    7.0\n#> 3    3       everyday                   fk 2016    6.6\n#> 4    4           Sing Christophe Lourdelet 2016    7.2\n#> 5    5    true colors                tupac 2014    8.0\n#> 6    6 The Great Wall          Yimou Zhang 2016    6.1\n#>   Revenue Metascore\n#> 1 1000.00       100\n#> 2  126.46        65\n#> 3  250.00        60\n#> 4  270.32        59\n#> 5  350.00        40\n#> 6   45.13        42\n\n# update existing rows and insert new ones\ntb <- \n  tibble(Rank= c(2,3, 1001),\n         Title= c(\"the big g\", \"everyday\", \"true colors\"), \n         Director = c(\"goro lovic\", \"fk\", \"tupac\"), \n         Year = c(2015, 2016, 2014), \n         Rating = c(9.9, 6.6, 8), \n         Revenue = c(1000, 250, 350), \n         Metascore = c(100, 60, 40))\n\nselect(mov, 1, 2, 5, 7, 9, 11, 12) %>%\n  rows_upsert(tb, by = \"Rank\") %>%\n  slice(c(1:5, 1001))\n#>   Rank                   Title             Director Year\n#> 1    1 Guardians of the Galaxy           James Gunn 2014\n#> 2    2               the big g           goro lovic 2015\n#> 3    3                everyday                   fk 2016\n#> 4    4                    Sing Christophe Lourdelet 2016\n#> 5    5           Suicide Squad           David Ayer 2016\n#> 6 1001             true colors                tupac 2014\n#>   Rating Revenue Metascore\n#> 1    8.1  333.13        76\n#> 2    9.9 1000.00       100\n#> 3    6.6  250.00        60\n#> 4    7.2  270.32        59\n#> 5    6.2  325.02        40\n#> 6    8.0  350.00        40"},{"path":"tidyverse-r.html","id":"updating-a-single-value-1","chapter":"5 Tidyverse R","heading":"5.7.3 Updating a single value","text":"update single value, make use mutate() either ifelse() base R if_else() dplyr replace() base R. function if_else() implementation ifelse() dplyr.","code":"\nmov %>%\n  select(1, 2, 5, 7, 9, 11, 12) %>%\n  filter(Director == 'Christopher Nolan')\n#>   Rank                 Title          Director Year Rating\n#> 1   37          Interstellar Christopher Nolan 2014    8.6\n#> 2   55       The Dark Knight Christopher Nolan 2008    9.0\n#> 3   65          The Prestige Christopher Nolan 2006    8.5\n#> 4   81             Inception Christopher Nolan 2010    8.8\n#> 5  125 The Dark Knight Rises Christopher Nolan 2012    8.5\n#>   Revenue Metascore\n#> 1  187.99        74\n#> 2  533.32        82\n#> 3   53.08        66\n#> 4  292.57        74\n#> 5  448.13        78\n\n# replacing a value using ifelse()\nmov %>%\n  select(1, 2, 5, 7, 9, 11, 12) %>%\n  mutate(Director = ifelse(Director == 'Christopher Nolan', 'C. Nolan', Director)) %>%\n  slice(c(37, 55, 65, 81, 125))\n#>   Rank                 Title Director Year Rating Revenue\n#> 1   37          Interstellar C. Nolan 2014    8.6  187.99\n#> 2   55       The Dark Knight C. Nolan 2008    9.0  533.32\n#> 3   65          The Prestige C. Nolan 2006    8.5   53.08\n#> 4   81             Inception C. Nolan 2010    8.8  292.57\n#> 5  125 The Dark Knight Rises C. Nolan 2012    8.5  448.13\n#>   Metascore\n#> 1        74\n#> 2        82\n#> 3        66\n#> 4        74\n#> 5        78\n\n# increasing revenues for movies produced by Christopher Nolan by 20%\nmov %>%\n  select(1, 2, 5, 7, 9, 11, 12) %>%\n  mutate(Revenue = ifelse(Director == 'Christopher Nolan', Revenue * 1.2, Revenue)) %>%\n  slice(c(37, 55, 65, 81, 125))\n#>   Rank                 Title          Director Year Rating\n#> 1   37          Interstellar Christopher Nolan 2014    8.6\n#> 2   55       The Dark Knight Christopher Nolan 2008    9.0\n#> 3   65          The Prestige Christopher Nolan 2006    8.5\n#> 4   81             Inception Christopher Nolan 2010    8.8\n#> 5  125 The Dark Knight Rises Christopher Nolan 2012    8.5\n#>   Revenue Metascore\n#> 1 225.588        74\n#> 2 639.984        82\n#> 3  63.696        66\n#> 4 351.084        74\n#> 5 537.756        78\n\n# replacing a value using if_else()\nmov %>%\n  select(1, 2, 5, 7, 9, 11, 12) %>%\n  mutate(Director = if_else(Director == 'Christopher Nolan', 'C. Nolan', Director)) %>%\n  slice(c(37, 55, 65, 81, 125))\n#>   Rank                 Title Director Year Rating Revenue\n#> 1   37          Interstellar C. Nolan 2014    8.6  187.99\n#> 2   55       The Dark Knight C. Nolan 2008    9.0  533.32\n#> 3   65          The Prestige C. Nolan 2006    8.5   53.08\n#> 4   81             Inception C. Nolan 2010    8.8  292.57\n#> 5  125 The Dark Knight Rises C. Nolan 2012    8.5  448.13\n#>   Metascore\n#> 1        74\n#> 2        82\n#> 3        66\n#> 4        74\n#> 5        78\n\n# replacing a value using replace()\nselect(mov, 2, 5, 7, 9, 11, 12) %>%\n  mutate(Director = replace(Director, Director == 'Christopher Nolan', 'C. Nolan')) %>%\n  slice(c(37, 55, 65, 81, 125))\n#>                   Title Director Year Rating Revenue\n#> 1          Interstellar C. Nolan 2014    8.6  187.99\n#> 2       The Dark Knight C. Nolan 2008    9.0  533.32\n#> 3          The Prestige C. Nolan 2006    8.5   53.08\n#> 4             Inception C. Nolan 2010    8.8  292.57\n#> 5 The Dark Knight Rises C. Nolan 2012    8.5  448.13\n#>   Metascore\n#> 1        74\n#> 2        82\n#> 3        66\n#> 4        74\n#> 5        78\n\n# increasing revenues for movies produced by Christopher Nolan by 20%\nselect(mov, 2, 5, 7, 9, 11, 12) %>%\n  mutate(Revenue = replace(Director, Director == 'Christopher Nolan', \n                           Revenue[Director == 'Christopher Nolan'] * 1.2)) %>%\n  slice(c(37, 55, 65, 81, 125))\n#>                   Title          Director Year Rating\n#> 1          Interstellar Christopher Nolan 2014    8.6\n#> 2       The Dark Knight Christopher Nolan 2008    9.0\n#> 3          The Prestige Christopher Nolan 2006    8.5\n#> 4             Inception Christopher Nolan 2010    8.8\n#> 5 The Dark Knight Rises Christopher Nolan 2012    8.5\n#>   Revenue Metascore\n#> 1 225.588        74\n#> 2 639.984        82\n#> 3  63.696        66\n#> 4 351.084        74\n#> 5 537.756        78"},{"path":"tidyverse-r.html","id":"deleting-rows-of-data","chapter":"5 Tidyverse R","heading":"5.7.4 Deleting rows of data","text":"special function delete rows functions filter() slice() can used keep drop rows.","code":""},{"path":"tidyverse-r.html","id":"unique-rows","chapter":"5 Tidyverse R","heading":"5.7.4.1 Unique rows","text":"function distinct() removes duplicate rows.","code":"\n# selecting unique values\nselect(mov, 2, 5, 7, 9, 11, 12) %>%\ndistinct(Year) %>%\npull()\n#>  [1] 2014 2012 2016 2015 2007 2011 2008 2006 2009 2010 2013\n\n# selecting unique rows\nselect(mov, 2, 5, 7, 9, 11, 12) %>%\ndistinct(Year, Director) %>%\nnrow()\n#> [1] 987"},{"path":"tidyverse-r.html","id":"tr-joins","chapter":"5 Tidyverse R","heading":"5.8 Combine data: concatenate, join and merge","text":"","code":""},{"path":"tidyverse-r.html","id":"concatenating-tibbles","chapter":"5 Tidyverse R","heading":"5.8.1 Concatenating tibbles","text":"Combining datasets using bind_rows()function bind_rows() acts like rbind() Base R.","code":"\ntop_5 <- tibble(country = c('China', 'India', 'United States', 'Indonesia', 'Brazil'),\n                continent = c('Asia', 'Asia', 'Americas', 'Asia', 'Americas'),\n                population = c(1318683096, 1110396331, 301139947, 223547000, 190010647),\n                lifeExpectancy = c(72.961, 64.698, 78.242, 70.65, 72.39))\ntop_5\n#> # A tibble: 5 x 4\n#>   country       continent population lifeExpectancy\n#>   <chr>         <chr>          <dbl>          <dbl>\n#> 1 China         Asia      1318683096           73.0\n#> 2 India         Asia      1110396331           64.7\n#> 3 United States Americas   301139947           78.2\n#> 4 Indonesia     Asia       223547000           70.6\n#> 5 Brazil        Americas   190010647           72.4\n\ntop_5_10 <- tibble(country = c('Pakistan', 'Bangladesh', 'Nigeria', 'Japan', 'Mexico'),\n                   continent = c('Asia', 'Asia', 'Africa', 'Asia', 'Americas'),\n                   population = c(169270617, 150448339, 135031164, 127467972, 108700891),\n                   lifeExpectancy = c(65.483, 64.062, 46.859, 82.603, 76.195))\ntop_5_10\n#> # A tibble: 5 x 4\n#>   country    continent population lifeExpectancy\n#>   <chr>      <chr>          <dbl>          <dbl>\n#> 1 Pakistan   Asia       169270617           65.5\n#> 2 Bangladesh Asia       150448339           64.1\n#> 3 Nigeria    Africa     135031164           46.9\n#> 4 Japan      Asia       127467972           82.6\n#> 5 Mexico     Americas   108700891           76.2\n\n# binding data frames\nbind_rows(top_5, top_5_10)\n#> # A tibble: 10 x 4\n#>    country       continent population lifeExpectancy\n#>    <chr>         <chr>          <dbl>          <dbl>\n#>  1 China         Asia      1318683096           73.0\n#>  2 India         Asia      1110396331           64.7\n#>  3 United States Americas   301139947           78.2\n#>  4 Indonesia     Asia       223547000           70.6\n#>  5 Brazil        Americas   190010647           72.4\n#>  6 Pakistan      Asia       169270617           65.5\n#>  7 Bangladesh    Asia       150448339           64.1\n#>  8 Nigeria       Africa     135031164           46.9\n#>  9 Japan         Asia       127467972           82.6\n#> 10 Mexico        Americas   108700891           76.2"},{"path":"tidyverse-r.html","id":"combining-datasets-using-bind_cols","chapter":"5 Tidyverse R","heading":"5.8.2 Combining datasets using bind_cols()","text":"function bind_cols() acts like cbind() Base R.","code":"\ncountry <- \ntibble(country = c('China', 'India', 'United States', 'Indonesia', 'Brazil'),\n       continent = c('Asia', 'Asia', 'Americas', 'Asia', 'Americas'))\ncountry\n#> # A tibble: 5 x 2\n#>   country       continent\n#>   <chr>         <chr>    \n#> 1 China         Asia     \n#> 2 India         Asia     \n#> 3 United States Americas \n#> 4 Indonesia     Asia     \n#> 5 Brazil        Americas\n\nvariables <- \ntibble(country = c('China', 'India', 'United States', 'Indonesia', 'Brazil'),\n       population = c(1318683096, 1110396331, 301139947, 223547000, 190010647),\n       lifeExpectancy = c(72.961, 64.698, 78.242, 70.65, 72.39),\n       perCapita = c(4959, 2452, 42952, 3541, 9066))\nvariables\n#> # A tibble: 5 x 4\n#>   country       population lifeExpectancy perCapita\n#>   <chr>              <dbl>          <dbl>     <dbl>\n#> 1 China         1318683096           73.0      4959\n#> 2 India         1110396331           64.7      2452\n#> 3 United States  301139947           78.2     42952\n#> 4 Indonesia      223547000           70.6      3541\n#> 5 Brazil         190010647           72.4      9066\n\n# binding data frames\nbind_cols(country, variables[-1])\n#> # A tibble: 5 x 5\n#>   country       continent population lifeExpectancy perCapita\n#>   <chr>         <chr>          <dbl>          <dbl>     <dbl>\n#> 1 China         Asia      1318683096           73.0      4959\n#> 2 India         Asia      1110396331           64.7      2452\n#> 3 United States Americas   301139947           78.2     42952\n#> 4 Indonesia     Asia       223547000           70.6      3541\n#> 5 Brazil        Americas   190010647           72.4      9066"},{"path":"tidyverse-r.html","id":"joining-data-frames-using-set-operations","chapter":"5 Tidyverse R","heading":"5.8.3 Joining data frames using Set Operations","text":"","code":"\ngroup_one <- \ntibble(country = c('Ethiopia', 'Congo, Dem. Rep.', 'Egypt', 'United States', \n                   'Mexico', 'India', 'Pakistan', 'Thailand', 'Japan'),\n       population = c(76511887, 64606759, 80264543, 301139947, 108700891, \n                      1110396331, 169270617, 65068149, 127467972))\ngroup_one\n#> # A tibble: 9 x 2\n#>   country          population\n#>   <chr>                 <dbl>\n#> 1 Ethiopia           76511887\n#> 2 Congo, Dem. Rep.   64606759\n#> 3 Egypt              80264543\n#> 4 United States     301139947\n#> 5 Mexico            108700891\n#> 6 India            1110396331\n#> 7 Pakistan          169270617\n#> 8 Thailand           65068149\n#> 9 Japan             127467972\ngroup_two <-\ntibble(country = c('Ethiopia', 'Vietnam', 'Bangladesh', 'Thailand', 'India'),           \n       population = c(76511887, 85262356, 150448339, 65068149, 111039633))\ngroup_two\n#> # A tibble: 5 x 2\n#>   country    population\n#>   <chr>           <dbl>\n#> 1 Ethiopia     76511887\n#> 2 Vietnam      85262356\n#> 3 Bangladesh  150448339\n#> 4 Thailand     65068149\n#> 5 India       111039633"},{"path":"tidyverse-r.html","id":"intersection","chapter":"5 Tidyverse R","heading":"5.8.3.1 Intersection","text":"function intersect() keeps rows appear datasets.","code":"\nintersect(group_one, group_two)\n#> # A tibble: 2 x 2\n#>   country  population\n#>   <chr>         <dbl>\n#> 1 Ethiopia   76511887\n#> 2 Thailand   65068149"},{"path":"tidyverse-r.html","id":"union","chapter":"5 Tidyverse R","heading":"5.8.4 Union","text":"function union() keeps rows appear either datasets.union(group_one, group_two)","code":""},{"path":"tidyverse-r.html","id":"differences","chapter":"5 Tidyverse R","heading":"5.8.5 Differences","text":"function setdiff() keeps rows appear first dataset second.","code":"\nsetdiff(group_one, group_two)\n#> # A tibble: 7 x 2\n#>   country          population\n#>   <chr>                 <dbl>\n#> 1 Congo, Dem. Rep.   64606759\n#> 2 Egypt              80264543\n#> 3 United States     301139947\n#> 4 Mexico            108700891\n#> 5 India            1110396331\n#> 6 Pakistan          169270617\n#> 7 Japan             127467972"},{"path":"tidyverse-r.html","id":"sql-like-joins","chapter":"5 Tidyverse R","heading":"5.8.5.1 SQL like joins","text":"","code":"\n# preparing data\nemployees <- tibble(\n    name = c('john', 'mary', 'david', 'paul', 'susan', 'cynthia', 'Joss', 'dennis'),\n    age = c(45, 55, 35, 58, 40, 30, 39, 25),\n    gender = c('m', 'f', 'm', 'm', 'f', 'f', 'm', 'm'),\n    salary =c(40000, 50000, 35000, 25000, 48000, 32000, 20000, 45000),\n    department = c('commercial', 'production', NA, 'human resources', \n                   'commercial', 'commercial', 'production', NA))\nemployees\n#> # A tibble: 8 x 5\n#>   name      age gender salary department     \n#>   <chr>   <dbl> <chr>   <dbl> <chr>          \n#> 1 john       45 m       40000 commercial     \n#> 2 mary       55 f       50000 production     \n#> 3 david      35 m       35000 <NA>           \n#> 4 paul       58 m       25000 human resources\n#> 5 susan      40 f       48000 commercial     \n#> 6 cynthia    30 f       32000 commercial     \n#> 7 Joss       39 m       20000 production     \n#> 8 dennis     25 m       45000 <NA>\n\ndepartments <- tibble(\n    department = c('commercial', 'human resources', 'production', 'finance', 'maintenance'),\n    location = c('washington', 'london', 'paris', 'dubai', 'dublin'))\ndepartments\n#> # A tibble: 5 x 2\n#>   department      location  \n#>   <chr>           <chr>     \n#> 1 commercial      washington\n#> 2 human resources london    \n#> 3 production      paris     \n#> 4 finance         dubai     \n#> 5 maintenance     dublin"},{"path":"tidyverse-r.html","id":"left-join-1","chapter":"5 Tidyverse R","heading":"5.8.6 Left join","text":"left join returns records left dataset matched records right dataset. result NULL right side match.","code":"\nleft_join(employees, departments)\n#> # A tibble: 8 x 6\n#>   name      age gender salary department      location  \n#>   <chr>   <dbl> <chr>   <dbl> <chr>           <chr>     \n#> 1 john       45 m       40000 commercial      washington\n#> 2 mary       55 f       50000 production      paris     \n#> 3 david      35 m       35000 <NA>            <NA>      \n#> 4 paul       58 m       25000 human resources london    \n#> 5 susan      40 f       48000 commercial      washington\n#> 6 cynthia    30 f       32000 commercial      washington\n#> 7 Joss       39 m       20000 production      paris     \n#> 8 dennis     25 m       45000 <NA>            <NA>"},{"path":"tidyverse-r.html","id":"right-join-1","chapter":"5 Tidyverse R","heading":"5.8.7 Right join","text":"right join returns records right dataset, matched records left dataset. result NULL left side match.","code":"\nright_join(employees, departments)\n#> # A tibble: 8 x 6\n#>   name      age gender salary department      location  \n#>   <chr>   <dbl> <chr>   <dbl> <chr>           <chr>     \n#> 1 john       45 m       40000 commercial      washington\n#> 2 mary       55 f       50000 production      paris     \n#> 3 paul       58 m       25000 human resources london    \n#> 4 susan      40 f       48000 commercial      washington\n#> 5 cynthia    30 f       32000 commercial      washington\n#> 6 Joss       39 m       20000 production      paris     \n#> 7 <NA>       NA <NA>       NA finance         dubai     \n#> 8 <NA>       NA <NA>       NA maintenance     dublin\n\n# reversing tables produces the same results as a left join\nright_join(departments, employees)\n#> # A tibble: 8 x 6\n#>   department      location   name      age gender salary\n#>   <chr>           <chr>      <chr>   <dbl> <chr>   <dbl>\n#> 1 commercial      washington john       45 m       40000\n#> 2 commercial      washington susan      40 f       48000\n#> 3 commercial      washington cynthia    30 f       32000\n#> 4 human resources london     paul       58 m       25000\n#> 5 production      paris      mary       55 f       50000\n#> 6 production      paris      Joss       39 m       20000\n#> 7 <NA>            <NA>       david      35 m       35000\n#> 8 <NA>            <NA>       dennis     25 m       45000"},{"path":"tidyverse-r.html","id":"inner-join-1","chapter":"5 Tidyverse R","heading":"5.8.8 Inner join","text":"inner join selects records matching values datasets","code":"\ninner_join(employees, departments)\n#> # A tibble: 6 x 6\n#>   name      age gender salary department      location  \n#>   <chr>   <dbl> <chr>   <dbl> <chr>           <chr>     \n#> 1 john       45 m       40000 commercial      washington\n#> 2 mary       55 f       50000 production      paris     \n#> 3 paul       58 m       25000 human resources london    \n#> 4 susan      40 f       48000 commercial      washington\n#> 5 cynthia    30 f       32000 commercial      washington\n#> 6 Joss       39 m       20000 production      paris"},{"path":"tidyverse-r.html","id":"full-join","chapter":"5 Tidyverse R","heading":"5.8.9 Full join","text":"full join returns records left right dataset","code":"\nfull_join(employees, departments)\n#> # A tibble: 10 x 6\n#>    name      age gender salary department      location  \n#>    <chr>   <dbl> <chr>   <dbl> <chr>           <chr>     \n#>  1 john       45 m       40000 commercial      washington\n#>  2 mary       55 f       50000 production      paris     \n#>  3 david      35 m       35000 <NA>            <NA>      \n#>  4 paul       58 m       25000 human resources london    \n#>  5 susan      40 f       48000 commercial      washington\n#>  6 cynthia    30 f       32000 commercial      washington\n#>  7 Joss       39 m       20000 production      paris     \n#>  8 dennis     25 m       45000 <NA>            <NA>      \n#>  9 <NA>       NA <NA>       NA finance         dubai     \n#> 10 <NA>       NA <NA>       NA maintenance     dublin"},{"path":"tidyverse-r.html","id":"anti-join","chapter":"5 Tidyverse R","heading":"5.8.10 Anti join","text":"anti join returns records found left dataset absent right oneTibbles different column namesJoining one joining column","code":"\nanti_join(employees, departments)\n#> # A tibble: 2 x 5\n#>   name     age gender salary department\n#>   <chr>  <dbl> <chr>   <dbl> <chr>     \n#> 1 david     35 m       35000 <NA>      \n#> 2 dennis    25 m       45000 <NA>\n# recreating employee table with different column names\nemployees <- tibble(\n    name = c('john', 'mary', 'david', 'paul', 'susan', 'cynthia', 'Joss', 'dennis'),\n    age = c(45, 55, 35, 58, 40, 30, 39, 25),\n    gender = c('m', 'f', 'm', 'm', 'f', 'f', 'm', 'm'),\n    salary =c(40000, 50000, 35000, 25000, 48000, 32000, 20000, 45000),\n    dep_name = c('commercial', 'production', NA, 'human resources', \n                 'commercial', 'commercial', 'production', NA))\nemployees\n#> # A tibble: 8 x 5\n#>   name      age gender salary dep_name       \n#>   <chr>   <dbl> <chr>   <dbl> <chr>          \n#> 1 john       45 m       40000 commercial     \n#> 2 mary       55 f       50000 production     \n#> 3 david      35 m       35000 <NA>           \n#> 4 paul       58 m       25000 human resources\n#> 5 susan      40 f       48000 commercial     \n#> 6 cynthia    30 f       32000 commercial     \n#> 7 Joss       39 m       20000 production     \n#> 8 dennis     25 m       45000 <NA>\n\nleft_join(employees, departments, by = c('dep_name' = 'department'))\n#> # A tibble: 8 x 6\n#>   name      age gender salary dep_name        location  \n#>   <chr>   <dbl> <chr>   <dbl> <chr>           <chr>     \n#> 1 john       45 m       40000 commercial      washington\n#> 2 mary       55 f       50000 production      paris     \n#> 3 david      35 m       35000 <NA>            <NA>      \n#> 4 paul       58 m       25000 human resources london    \n#> 5 susan      40 f       48000 commercial      washington\n#> 6 cynthia    30 f       32000 commercial      washington\n#> 7 Joss       39 m       20000 production      paris     \n#> 8 dennis     25 m       45000 <NA>            <NA>\n# adding a subdepartment\nemployees <- tibble(\n    name = c('john', 'mary', 'david', 'paul', 'susan', 'cynthia', 'Joss', 'dennis'),\n    age = c(45, 55, 35, 58, 40, 30, 39, 25),\n    gender = c('m', 'f', 'm', 'm', 'f', 'f', 'm', 'm'),\n    salary =c(40000, 50000, 35000, 25000, 48000, 32000, 20000, 45000),\n    department = c('commercial', 'production', NA, 'human resources', 'commercial', \n                   'commercial', 'production', NA),\n    subdepartment = c('marketing', 'production', NA, 'human resources', 'sales', \n                      'sales', 'production', NA))\nemployees\n#> # A tibble: 8 x 6\n#>   name      age gender salary department      subdepartment \n#>   <chr>   <dbl> <chr>   <dbl> <chr>           <chr>         \n#> 1 john       45 m       40000 commercial      marketing     \n#> 2 mary       55 f       50000 production      production    \n#> 3 david      35 m       35000 <NA>            <NA>          \n#> 4 paul       58 m       25000 human resources human resourc~\n#> 5 susan      40 f       48000 commercial      sales         \n#> 6 cynthia    30 f       32000 commercial      sales         \n#> 7 Joss       39 m       20000 production      production    \n#> 8 dennis     25 m       45000 <NA>            <NA>\n\ndepartments <- tibble(\n    department = c('commercial', 'commercial', 'human resources', 'production', \n                   'finance', 'finance', 'maintenance'),\n    subdepartment = c('marketing', 'sales', 'human resources', 'production', 'finance', \n                      'accounting', 'maintenance'),\n    location = c('washington', 'washington', 'london', 'paris', 'dubai', 'dubai', 'dublin'))\ndepartments\n#> # A tibble: 7 x 3\n#>   department      subdepartment   location  \n#>   <chr>           <chr>           <chr>     \n#> 1 commercial      marketing       washington\n#> 2 commercial      sales           washington\n#> 3 human resources human resources london    \n#> 4 production      production      paris     \n#> 5 finance         finance         dubai     \n#> 6 finance         accounting      dubai     \n#> 7 maintenance     maintenance     dublin\n\n# since columns have the same names, joining is done automatically\nleft_join(employees, departments)\n#> # A tibble: 8 x 7\n#>   name      age gender salary department      subdepartment \n#>   <chr>   <dbl> <chr>   <dbl> <chr>           <chr>         \n#> 1 john       45 m       40000 commercial      marketing     \n#> 2 mary       55 f       50000 production      production    \n#> 3 david      35 m       35000 <NA>            <NA>          \n#> 4 paul       58 m       25000 human resources human resourc~\n#> 5 susan      40 f       48000 commercial      sales         \n#> 6 cynthia    30 f       32000 commercial      sales         \n#> 7 Joss       39 m       20000 production      production    \n#> 8 dennis     25 m       45000 <NA>            <NA>          \n#> # ... with 1 more variable: location <chr>\n\n\n# declaring column names explicitly\nleft_join(employees, departments, by = c(\"department\", \"subdepartment\"))\n#> # A tibble: 8 x 7\n#>   name      age gender salary department      subdepartment \n#>   <chr>   <dbl> <chr>   <dbl> <chr>           <chr>         \n#> 1 john       45 m       40000 commercial      marketing     \n#> 2 mary       55 f       50000 production      production    \n#> 3 david      35 m       35000 <NA>            <NA>          \n#> 4 paul       58 m       25000 human resources human resourc~\n#> 5 susan      40 f       48000 commercial      sales         \n#> 6 cynthia    30 f       32000 commercial      sales         \n#> 7 Joss       39 m       20000 production      production    \n#> 8 dennis     25 m       45000 <NA>            <NA>          \n#> # ... with 1 more variable: location <chr>\n\n# with different names\nemployees <- tibble(\n    name = c('john', 'mary', 'david', 'paul', 'susan', 'cynthia', 'Joss', 'dennis'),\n    age = c(45, 55, 35, 58, 40, 30, 39, 25),\n    gender = c('m', 'f', 'm', 'm', 'f', 'f', 'm', 'm'),\n    salary =c(40000, 50000, 35000, 25000, 48000, 32000, 20000, 45000),\n    dep = c('commercial', 'production', NA, 'human resources', 'commercial', \n            'commercial', 'production', NA),\n    sub = c('marketing', 'production', NA, 'human resources', 'sales', \n            'sales', 'production', NA))\nemployees\n#> # A tibble: 8 x 6\n#>   name      age gender salary dep             sub           \n#>   <chr>   <dbl> <chr>   <dbl> <chr>           <chr>         \n#> 1 john       45 m       40000 commercial      marketing     \n#> 2 mary       55 f       50000 production      production    \n#> 3 david      35 m       35000 <NA>            <NA>          \n#> 4 paul       58 m       25000 human resources human resourc~\n#> 5 susan      40 f       48000 commercial      sales         \n#> 6 cynthia    30 f       32000 commercial      sales         \n#> 7 Joss       39 m       20000 production      production    \n#> 8 dennis     25 m       45000 <NA>            <NA>\n\nleft_join(employees, departments, by = c('dep' = 'department', 'sub' = 'subdepartment'))\n#> # A tibble: 8 x 7\n#>   name      age gender salary dep             sub   location\n#>   <chr>   <dbl> <chr>   <dbl> <chr>           <chr> <chr>   \n#> 1 john       45 m       40000 commercial      mark~ washing~\n#> 2 mary       55 f       50000 production      prod~ paris   \n#> 3 david      35 m       35000 <NA>            <NA>  <NA>    \n#> 4 paul       58 m       25000 human resources huma~ london  \n#> 5 susan      40 f       48000 commercial      sales washing~\n#> 6 cynthia    30 f       32000 commercial      sales washing~\n#> 7 Joss       39 m       20000 production      prod~ paris   \n#> 8 dennis     25 m       45000 <NA>            <NA>  <NA>"},{"path":"tidyverse-r.html","id":"tr-summary","chapter":"5 Tidyverse R","heading":"5.9 Aggregating and grouping data","text":"","code":""},{"path":"tidyverse-r.html","id":"aggregating","chapter":"5 Tidyverse R","heading":"5.9.1 Aggregating","text":"function summarise() aggregates data using various summarization functions Base R dplyr . addition summarization functions like mean(), median(), sum(), etc. come base R, dplyr comes following:n() counts rows,n_distinct() counts unique elementsfirst() first valuelast() last valuenth() nth valueThe function summarise_at() affects variables selected character vector vars().","code":"\ndata(gapminder)\n\n# performing aggregations\ngapminder %>%\n  filter(year == 2007) %>%\n  summarize(`total pop` = sum(pop, na.rm = T), \n            `mean pop` = mean(pop, na.rm = T), \n            `median pop` = median(pop, na.rm = T), \n            `country count` = n())\n#> # A tibble: 1 x 4\n#>   `total pop` `mean pop` `median pop` `country count`\n#>         <dbl>      <dbl>        <dbl>           <int>\n#> 1  6251013179  44021220.     10517531             142\n# using multiple summarization function\ngapminder %>%\n  filter(year == 2007) %>%\n  summarise_at(vars(lifeExp), list(mean = mean, median = median, count = ~n()))\n#> # A tibble: 1 x 3\n#>    mean median count\n#>   <dbl>  <dbl> <int>\n#> 1  67.0   71.9   142\n\ngapminder %>%\n  filter(year == 2007) %>%\n  summarise_at(vars(lifeExp), list(~ mean(.), ~ median(.), ~ n()))\n#> # A tibble: 1 x 3\n#>    mean median     n\n#>   <dbl>  <dbl> <int>\n#> 1  67.0   71.9   142\n\n# multiple columns with vars\ngapminder %>%\n  filter(year == 2007) %>%\n  summarise_at(vars(lifeExp, gdpPercap), list(mean = mean, median = median))\n#> # A tibble: 1 x 4\n#>   lifeExp_mean gdpPercap_mean lifeExp_median\n#>          <dbl>          <dbl>          <dbl>\n#> 1         67.0         11680.           71.9\n#> # ... with 1 more variable: gdpPercap_median <dbl>\n\n# multiple columns with vectors\ngapminder %>%\n  filter(year == 2007) %>%\n  summarise_at(c('lifeExp', 'gdpPercap'), list(mean = mean, median = median))\n#> # A tibble: 1 x 4\n#>   lifeExp_mean gdpPercap_mean lifeExp_median\n#>          <dbl>          <dbl>          <dbl>\n#> 1         67.0         11680.           71.9\n#> # ... with 1 more variable: gdpPercap_median <dbl>\n\n# using a custom function\ngapminder %>%\n  filter(year == 2007) %>%\n  summarise_at(vars(lifeExp, gdpPercap), list(mean = function(x)round(mean(x), 1), \n                                              median = function(x)round(median(x), 1)))  \n#> # A tibble: 1 x 4\n#>   lifeExp_mean gdpPercap_mean lifeExp_median\n#>          <dbl>          <dbl>          <dbl>\n#> 1           67         11680.           71.9\n#> # ... with 1 more variable: gdpPercap_median <dbl>"},{"path":"tidyverse-r.html","id":"grouping-data","chapter":"5 Tidyverse R","heading":"5.9.2 Grouping data","text":"function group_by() used group data function ungroup() used ungroup data applying grouping. always good idea ungroup data working groupings functions dplyr behave differently grouped data.","code":"\n# grouping by single column (continent)\ngapminder %>%\n  filter(year == 2007) %>%\n  group_by(continent) %>%\n  summarize(`total pop` = sum(pop, na.rm = T), \n            `mean pop` = mean(pop, na.rm = T), \n            `median pop` = median(pop, na.rm = T), \n            `country count` = n()) %>%\n  ungroup()\n#> # A tibble: 5 x 5\n#>   continent `total pop` `mean pop` `median pop`\n#>   <fct>           <dbl>      <dbl>        <dbl>\n#> 1 Africa      929539692  17875763.    10093310.\n#> 2 Americas    898871184  35954847.     9319622 \n#> 3 Asia       3811953827 115513752.    24821286 \n#> 4 Europe      586098529  19536618.     9493598 \n#> 5 Oceania      24549947  12274974.    12274974.\n#> # ... with 1 more variable: country count <int>\n\n# grouping by two categorical columns (continent and year)\ngapminder %>%\n  filter(year %in% c(1987, 2007)) %>%\n  group_by(continent, year) %>%\n  summarize(`total pop` = sum(pop, na.rm = T), \n            `mean pop` = mean(pop, na.rm = T), \n            `median pop` = median(pop, na.rm = T), \n            `country count` = n()) %>%\n  ungroup()\n#> # A tibble: 10 x 6\n#>    continent  year `total pop` `mean pop` `median pop`\n#>    <fct>     <int>       <dbl>      <dbl>        <dbl>\n#>  1 Africa     1987   574834110  11054502.     6635612.\n#>  2 Africa     2007   929539692  17875763.    10093310.\n#>  3 Americas   1987   682753971  27310159.     6655297 \n#>  4 Americas   2007   898871184  35954847.     9319622 \n#>  5 Asia       1987  2871220762  87006690.    16495304 \n#>  6 Asia       2007  3811953827 115513752.    24821286 \n#>  7 Europe     1987   543094160  18103139.     9101370.\n#>  8 Europe     2007   586098529  19536618.     9493598 \n#>  9 Oceania    1987    19574415   9787208.     9787208.\n#> 10 Oceania    2007    24549947  12274974.    12274974.\n#> # ... with 1 more variable: country count <int>\n\n# sorting by group\ngap_data <-\ngapminder %>%\n  group_by(year) %>%\n  arrange(pop, .by_group = TRUE) %>%\n  ungroup()\nhead(gap_data)\n#> # A tibble: 6 x 6\n#>   country               continent  year lifeExp    pop gdpPercap\n#>   <fct>                 <fct>     <int>   <dbl>  <int>     <dbl>\n#> 1 Sao Tome and Principe Africa     1952    46.5  60011      880.\n#> 2 Djibouti              Africa     1952    34.8  63149     2670.\n#> 3 Bahrain               Asia       1952    50.9 120447     9867.\n#> 4 Iceland               Europe     1952    72.5 147962     7268.\n#> 5 Comoros               Africa     1952    40.7 153936     1103.\n#> 6 Kuwait                Asia       1952    55.6 160000   108382.\n\ntail(gap_data)\n#> # A tibble: 6 x 6\n#>   country       continent  year lifeExp        pop gdpPercap\n#>   <fct>         <fct>     <int>   <dbl>      <int>     <dbl>\n#> 1 Pakistan      Asia       2007    65.5  169270617     2606.\n#> 2 Brazil        Americas   2007    72.4  190010647     9066.\n#> 3 Indonesia     Asia       2007    70.6  223547000     3541.\n#> 4 United States Americas   2007    78.2  301139947    42952.\n#> 5 India         Asia       2007    64.7 1110396331     2452.\n#> 6 China         Asia       2007    73.0 1318683096     4959.\n\n# ranking by group\nselect(mov, Title, Year, Revenue, Metascore) %>%\n  arrange(Year, Revenue) %>%\n  group_by(Year) %>%\n  mutate(rank_by_revenue = rank(Revenue, ties.method = \"first\")) %>%\n  ungroup() %>%\n  slice(43:47)\n#> # A tibble: 5 x 5\n#>   Title             Year Revenue Metascore rank_by_revenue\n#>   <chr>            <int>   <dbl>     <int>           <int>\n#> 1 Deja Vu           2006   NA           NA              43\n#> 2 Inland Empire     2006   NA           NA              44\n#> 3 The Babysitters   2007    0.04        35               1\n#> 4 Taare Zameen Par  2007    1.2         42               2\n#> 5 Funny Games       2007    1.29        NA               3\n\n## NB: Notice as ranking restarts once as 2007 is reached."},{"path":"tidyverse-r.html","id":"splitting-data-frame-by-groups","chapter":"5 Tidyverse R","heading":"5.9.3 Splitting data frame by groups","text":"group_split() like base::split() splits data frame.","code":"\nmovies_year <- \nselect(mov, Title, Year, Revenue, Metascore) %>%\n  group_split(Year)\nlength(movies_year)\n#> [1] 11\nmovies_year[1]\n#> <list_of<\n#>   tbl_df<\n#>     Title    : character\n#>     Year     : integer\n#>     Revenue  : double\n#>     Metascore: integer\n#>   >\n#> >[1]>\n#> [[1]]\n#> # A tibble: 44 x 4\n#>    Title                              Year Revenue Metascore\n#>    <chr>                             <int>   <dbl>     <int>\n#>  1 The Prestige                       2006    53.1        66\n#>  2 Pirates of the Caribbean: Dead M~  2006   423.         53\n#>  3 The Departed                       2006   132.         85\n#>  4 300                                2006   211.         52\n#>  5 Casino Royale                      2006   167.         80\n#>  6 Cars                               2006   244.         73\n#>  7 Pan's Labyrinth                    2006    37.6        98\n#>  8 Apocalypto                         2006    50.9        68\n#>  9 Children of Men                    2006    35.3        84\n#> 10 The Devil Wears Prada              2006   125.         62\n#> # ... with 34 more rows"},{"path":"tidyverse-r.html","id":"tr-reshape","chapter":"5 Tidyverse R","heading":"5.10 Pivoting and unpivoting data with tidyr","text":"","code":""},{"path":"tidyverse-r.html","id":"pivoting-1","chapter":"5 Tidyverse R","heading":"5.10.1 Pivoting","text":"function pivot_wider() pivots data converting long wide. expects following:names_from: rows move columnsvalues_from: values placed intersection rows columns (cell values)","code":"\nlibrary(tidyr)\n\n# preparing data\ndt <-\ngapminder %>%\n  filter(year %in% c(1987, 1997, 2007)) %>%\n  group_by(continent, year) %>%\n  summarize(total_pop = sum(pop, na.rm = T)) %>%\n  ungroup()\ndt\n#> # A tibble: 15 x 3\n#>    continent  year  total_pop\n#>    <fct>     <int>      <dbl>\n#>  1 Africa     1987  574834110\n#>  2 Africa     1997  743832984\n#>  3 Africa     2007  929539692\n#>  4 Americas   1987  682753971\n#>  5 Americas   1997  796900410\n#>  6 Americas   2007  898871184\n#>  7 Asia       1987 2871220762\n#>  8 Asia       1997 3383285500\n#>  9 Asia       2007 3811953827\n#> 10 Europe     1987  543094160\n#> 11 Europe     1997  568944148\n#> 12 Europe     2007  586098529\n#> 13 Oceania    1987   19574415\n#> 14 Oceania    1997   22241430\n#> 15 Oceania    2007   24549947\n\n# pivoting data\ndt %>%\n  pivot_wider(names_from = year, values_from = total_pop, names_prefix = 'Y')\n#> # A tibble: 5 x 4\n#>   continent      Y1987      Y1997      Y2007\n#>   <fct>          <dbl>      <dbl>      <dbl>\n#> 1 Africa     574834110  743832984  929539692\n#> 2 Americas   682753971  796900410  898871184\n#> 3 Asia      2871220762 3383285500 3811953827\n#> 4 Europe     543094160  568944148  586098529\n#> 5 Oceania     19574415   22241430   24549947"},{"path":"tidyverse-r.html","id":"unpivoting-1","chapter":"5 Tidyverse R","heading":"5.10.2 Unpivoting","text":"function pivot_longer() unpivots data, converting wide long. expects:cols: columns move rownames_to: name new column moved columnsvalues_to: name new column moved cell values","code":"\n# preparing data \ndt_wide <-\ndt %>%\n  pivot_wider(names_from = year, values_from = total_pop, names_prefix = 'Y')\ndt_wide\n#> # A tibble: 5 x 4\n#>   continent      Y1987      Y1997      Y2007\n#>   <fct>          <dbl>      <dbl>      <dbl>\n#> 1 Africa     574834110  743832984  929539692\n#> 2 Americas   682753971  796900410  898871184\n#> 3 Asia      2871220762 3383285500 3811953827\n#> 4 Europe     543094160  568944148  586098529\n#> 5 Oceania     19574415   22241430   24549947\n\n# unpivoting data\ndt_wide %>%\n  pivot_longer(cols = c(Y1987, Y1997, Y2007)) %>%\n  head()\n#> # A tibble: 6 x 3\n#>   continent name      value\n#>   <fct>     <chr>     <dbl>\n#> 1 Africa    Y1987 574834110\n#> 2 Africa    Y1997 743832984\n#> 3 Africa    Y2007 929539692\n#> 4 Americas  Y1987 682753971\n#> 5 Americas  Y1997 796900410\n#> 6 Americas  Y2007 898871184\n\n# replacing name and value\ndt_wide %>%\n  pivot_longer(cols = c(Y1987, Y1997, Y2007), names_to = 'year', values_to = 'population') %>%\n  head()\n#> # A tibble: 6 x 3\n#>   continent year  population\n#>   <fct>     <chr>      <dbl>\n#> 1 Africa    Y1987  574834110\n#> 2 Africa    Y1997  743832984\n#> 3 Africa    Y2007  929539692\n#> 4 Americas  Y1987  682753971\n#> 5 Americas  Y1997  796900410\n#> 6 Americas  Y2007  898871184"},{"path":"tidyverse-r.html","id":"dealing-with-duplicate-values-with-dplyr","chapter":"5 Tidyverse R","heading":"5.11 Dealing with duplicate values with dplyr","text":"function distinct() used extract unique values n_distinct() returns count unique values.","code":"\nlibrary(readr)\nlibrary(dplyr)\n\n# reading data\nmovies <- read.table(file = \"data/IMDB-Movie-Data.csv\", header = T, sep = \",\", dec = \".\", fileEncoding = \"UTF-8\", quote = \"\\\"\",\n                  comment.char = \"\")\n\n\n# preparing data\nmovies %>%\nselect(7, 12) %>%\nfilter(Year == 2006) %>%\narrange(Metascore) %>%\nhead()\n#>   Year Metascore\n#> 1 2006        36\n#> 2 2006        45\n#> 3 2006        45\n#> 4 2006        45\n#> 5 2006        46\n#> 6 2006        47\n\n# extracting unique values\nmovies %>%\nselect(7, 12) %>%\nfilter(Year == 2006) %>%\narrange(Metascore) %>%\ndistinct() %>%\nhead()\n#>   Year Metascore\n#> 1 2006        36\n#> 2 2006        45\n#> 3 2006        46\n#> 4 2006        47\n#> 5 2006        48\n#> 6 2006        51\n\n# count of unique values\nmovies %>%\nselect(7, 12) %>%\nfilter(Year == 2006) %>%\narrange(Year, Metascore) %>%\nn_distinct()\n#> [1] 27\n\n# extracting unique values by column\nmovies %>%\narrange(Year, Metascore) %>%\ndistinct(Year)\n#>    Year\n#> 1  2006\n#> 2  2007\n#> 3  2008\n#> 4  2009\n#> 5  2010\n#> 6  2011\n#> 7  2012\n#> 8  2013\n#> 9  2014\n#> 10 2015\n#> 11 2016\n\n# keeping other columns\nmovies %>%\nselect(7, 12) %>%\narrange(Year, Metascore) %>%\ndistinct(Year, .keep_all= TRUE)\n#>    Year Metascore\n#> 1  2006        36\n#> 2  2007        29\n#> 3  2008        15\n#> 4  2009        23\n#> 5  2010        20\n#> 6  2011        31\n#> 7  2012        31\n#> 8  2013        18\n#> 9  2014        22\n#> 10 2015        18\n#> 11 2016        11"},{"path":"tidyverse-r.html","id":"dealing-with-na-values-with-tidyr","chapter":"5 Tidyverse R","heading":"5.12 Dealing with NA values with tidyr","text":"","code":""},{"path":"tidyverse-r.html","id":"replacing-missing-values-by-locf","chapter":"5 Tidyverse R","heading":"5.12.1 Replacing missing values by LOCF","text":"function fill() performs NA replacement LOCF NOCB.","code":"\nlibrary(tidyr)\n\n\n# reading data\nmovies <- read.table(file = \"data/IMDB-Movie-Data.csv\", header = T, sep = \",\", dec = \".\", fileEncoding = \"UTF-8\", quote = \"\\\"\",\n                  comment.char = \"\")\n\n\nnames(movies)[c(2,7,11,12)] <- c('Title', 'Year', 'RevenueMillions', 'Metascore')\n\n# replacing NA values to values that precede it\nmovies %>%\ndplyr::arrange(Year) %>%\nfill(RevenueMillions, .direction = \"down\") %>%\ntail(10)\n#>      Rank                          Title\n#> 991   948                     King Cobra\n#> 992   950                          Kicks\n#> 993   965                        Custody\n#> 994   967                      L'odyssée\n#> 995   975                 Queen of Katwe\n#> 996   976     My Big Fat Greek Wedding 2\n#> 997   978                  Amateur Night\n#> 998   979 It's Only the End of the World\n#> 999   981           Miracles from Heaven\n#> 1000 1000                     Nine Lives\n#>                       Genre\n#> 991             Crime,Drama\n#> 992               Adventure\n#> 993                   Drama\n#> 994     Adventure,Biography\n#> 995   Biography,Drama,Sport\n#> 996   Comedy,Family,Romance\n#> 997                  Comedy\n#> 998                   Drama\n#> 999  Biography,Drama,Family\n#> 1000  Comedy,Family,Fantasy\n#>                                                                                                                                                                                                                                        Description\n#> 991                            This ripped-from-the-headlines drama covers the early rise of gay porn headliner Sean Paul Lockhart a.k.a. Brent Corrigan, before his falling out with the producer who made him famous. When... See full summary »\n#> 992  Brandon is a 15 year old whose dream is a pair of fresh Air Jordans. Soon after he gets his hands on them, they're stolen by a local hood, causing Brandon and his two friends to go on a dangerous mission through Oakland to retrieve them.\n#> 993                                                                                                                                            The lives of three women are unexpectedly changed when they cross paths at a New York Family Court.\n#> 994                 Highly influential and a fearlessly ambitious pioneer, innovator, filmmaker, researcher and conservationist, Jacques-Yves Cousteau's aquatic adventure covers roughly thirty years of an inarguably rich in achievements life.\n#> 995                                                                                                                                                      A Ugandan girl sees her world rapidly change after being introduced to the game of chess.\n#> 996                                                                                                                                 A Portokalos family secret brings the beloved characters back together for an even bigger and Greeker wedding.\n#> 997                               Guy Carter is an award-winning graduate student of architecture. He's got a beautiful wife and a baby on the way. The problem? He doesn't have \"his ducks in a row,\" which only fuels his ... See full summary »\n#> 998                                                                                                                        Louis (Gaspard Ulliel), a terminally ill writer, returns home after a long absence to tell his family that he is dying.\n#> 999                                                                                                                    A young girl suffering from a rare digestive disorder finds herself miraculously cured after surviving a terrible accident.\n#> 1000                                                                                                                                                               A stuffy businessman finds himself trapped inside the body of his family's cat.\n#>              Director\n#> 991      Justin Kelly\n#> 992    Justin Tipping\n#> 993      James Lapine\n#> 994      Jérôme Salle\n#> 995         Mira Nair\n#> 996        Kirk Jones\n#> 997      Lisa Addario\n#> 998      Xavier Dolan\n#> 999   Patricia Riggen\n#> 1000 Barry Sonnenfeld\n#>                                                                            Actors\n#> 991                Garrett Clayton, Christian Slater, Molly Ringwald,James Kelley\n#> 992  Jahking Guillory, Christopher Jordan Wallace,Christopher Meyer, Kofi Siriboe\n#> 993        Viola Davis, Hayden Panettiere, Catalina Sandino Moreno, Ellen Burstyn\n#> 994                     Lambert Wilson, Pierre Niney, Audrey Tautou,Laurent Lucas\n#> 995                Madina Nalwanga, David Oyelowo, Lupita Nyong'o, Martin Kabanza\n#> 996                 Nia Vardalos, John Corbett, Michael Constantine, Lainie Kazan\n#> 997                  Jason Biggs, Janet Montgomery,Ashley Tisdale, Bria L. Murphy\n#> 998                  Nathalie Baye, Vincent Cassel, Marion Cotillard, Léa Seydoux\n#> 999             Jennifer Garner, Kylie Rogers, Martin Henderson,Brighton Sharbino\n#> 1000                     Kevin Spacey, Jennifer Garner, Robbie Amell,Cheryl Hines\n#>      Year Runtime..Minutes. Rating Votes RevenueMillions\n#> 991  2016                91    5.6  3990            0.03\n#> 992  2016                80    6.1  2417            0.15\n#> 993  2016               104    6.9   280            0.15\n#> 994  2016               122    6.7  1810            0.15\n#> 995  2016               124    7.4  6753            8.81\n#> 996  2016                94    6.0 20966           59.57\n#> 997  2016                92    5.0  2229           59.57\n#> 998  2016                97    7.0 10658           59.57\n#> 999  2016               109    7.0 12048           61.69\n#> 1000 2016                87    5.3 12435           19.64\n#>      Metascore\n#> 991         48\n#> 992         69\n#> 993         72\n#> 994         70\n#> 995         73\n#> 996         37\n#> 997         38\n#> 998         48\n#> 999         44\n#> 1000        11"},{"path":"tidyverse-r.html","id":"replacing-missing-values-by-nocb","chapter":"5 Tidyverse R","heading":"5.12.2 Replacing missing values by NOCB","text":"","code":"\n# replacing NA values with proceeding values\nfill(movies, RevenueMillions, .direction = \"up\") %>%\nhead(10)\n#>    Rank                   Title                      Genre\n#> 1     1 Guardians of the Galaxy    Action,Adventure,Sci-Fi\n#> 2     2              Prometheus   Adventure,Mystery,Sci-Fi\n#> 3     3                   Split            Horror,Thriller\n#> 4     4                    Sing    Animation,Comedy,Family\n#> 5     5           Suicide Squad   Action,Adventure,Fantasy\n#> 6     6          The Great Wall   Action,Adventure,Fantasy\n#> 7     7              La La Land         Comedy,Drama,Music\n#> 8     8                Mindhorn                     Comedy\n#> 9     9      The Lost City of Z Action,Adventure,Biography\n#> 10   10              Passengers    Adventure,Drama,Romance\n#>                                                                                                                                                                                                                                        Description\n#> 1                                                                                                                  A group of intergalactic criminals are forced to work together to stop a fanatical warrior from taking control of the universe.\n#> 2                                                                                                                  Following clues to the origin of mankind, a team finds a structure on a distant moon, but they soon realize they are not alone.\n#> 3                                                                                    Three girls are kidnapped by a man with a diagnosed 23 distinct personalities. They must try to escape before the apparent emergence of a frightful new 24th.\n#> 4                   In a city of humanoid animals, a hustling theater impresario's attempt to save his theater with a singing competition becomes grander than he anticipates even as its finalists' find that their lives will never be the same.\n#> 5                                                              A secret government agency recruits some of the most dangerous incarcerated super-villains to form a defensive task force. Their first mission: save the world from the apocalypse.\n#> 6                                                                                               European mercenaries searching for black powder become embroiled in the defense of the Great Wall of China against a horde of monstrous creatures.\n#> 7                                                                                                                                                                                     A jazz pianist falls for an aspiring actress in Los Angeles.\n#> 8  A has-been actor best known for playing the title character in the 1980s detective series \"Mindhorn\" must work with the police when a serial killer says that he will only speak with Detective Mindhorn, whom he believes to be a real person.\n#> 9                                                                                        A true-life drama, centering on British explorer Col. Percival Fawcett, who disappeared while searching for a mysterious city in the Amazon in the 1920s.\n#> 10                                                        A spacecraft traveling to a distant colony planet and transporting thousands of people has a malfunction in its sleep chambers. As a result, two passengers are awakened 90 years early.\n#>                Director\n#> 1            James Gunn\n#> 2          Ridley Scott\n#> 3    M. Night Shyamalan\n#> 4  Christophe Lourdelet\n#> 5            David Ayer\n#> 6           Yimou Zhang\n#> 7       Damien Chazelle\n#> 8            Sean Foley\n#> 9            James Gray\n#> 10        Morten Tyldum\n#>                                                                        Actors\n#> 1                        Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana\n#> 2     Noomi Rapace, Logan Marshall-Green, Michael Fassbender, Charlize Theron\n#> 3            James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula\n#> 4  Matthew McConaughey,Reese Witherspoon, Seth MacFarlane, Scarlett Johansson\n#> 5                          Will Smith, Jared Leto, Margot Robbie, Viola Davis\n#> 6                               Matt Damon, Tian Jing, Willem Dafoe, Andy Lau\n#> 7                    Ryan Gosling, Emma Stone, Rosemarie DeWitt, J.K. Simmons\n#> 8             Essie Davis, Andrea Riseborough, Julian Barratt,Kenneth Branagh\n#> 9                Charlie Hunnam, Robert Pattinson, Sienna Miller, Tom Holland\n#> 10           Jennifer Lawrence, Chris Pratt, Michael Sheen,Laurence Fishburne\n#>    Year Runtime..Minutes. Rating  Votes RevenueMillions\n#> 1  2014               121    8.1 757074          333.13\n#> 2  2012               124    7.0 485820          126.46\n#> 3  2016               117    7.3 157606          138.12\n#> 4  2016               108    7.2  60545          270.32\n#> 5  2016               123    6.2 393727          325.02\n#> 6  2016               103    6.1  56036           45.13\n#> 7  2016               128    8.3 258682          151.06\n#> 8  2016                89    6.4   2490            8.01\n#> 9  2016               141    7.1   7188            8.01\n#> 10 2016               116    7.0 192177          100.01\n#>    Metascore\n#> 1         76\n#> 2         65\n#> 3         62\n#> 4         59\n#> 5         40\n#> 6         42\n#> 7         93\n#> 8         71\n#> 9         78\n#> 10        41\n\n# on more than one column\nfill(movies, c(RevenueMillions, Metascore), .direction = \"up\") %>%\nhead(10)\n#>    Rank                   Title                      Genre\n#> 1     1 Guardians of the Galaxy    Action,Adventure,Sci-Fi\n#> 2     2              Prometheus   Adventure,Mystery,Sci-Fi\n#> 3     3                   Split            Horror,Thriller\n#> 4     4                    Sing    Animation,Comedy,Family\n#> 5     5           Suicide Squad   Action,Adventure,Fantasy\n#> 6     6          The Great Wall   Action,Adventure,Fantasy\n#> 7     7              La La Land         Comedy,Drama,Music\n#> 8     8                Mindhorn                     Comedy\n#> 9     9      The Lost City of Z Action,Adventure,Biography\n#> 10   10              Passengers    Adventure,Drama,Romance\n#>                                                                                                                                                                                                                                        Description\n#> 1                                                                                                                  A group of intergalactic criminals are forced to work together to stop a fanatical warrior from taking control of the universe.\n#> 2                                                                                                                  Following clues to the origin of mankind, a team finds a structure on a distant moon, but they soon realize they are not alone.\n#> 3                                                                                    Three girls are kidnapped by a man with a diagnosed 23 distinct personalities. They must try to escape before the apparent emergence of a frightful new 24th.\n#> 4                   In a city of humanoid animals, a hustling theater impresario's attempt to save his theater with a singing competition becomes grander than he anticipates even as its finalists' find that their lives will never be the same.\n#> 5                                                              A secret government agency recruits some of the most dangerous incarcerated super-villains to form a defensive task force. Their first mission: save the world from the apocalypse.\n#> 6                                                                                               European mercenaries searching for black powder become embroiled in the defense of the Great Wall of China against a horde of monstrous creatures.\n#> 7                                                                                                                                                                                     A jazz pianist falls for an aspiring actress in Los Angeles.\n#> 8  A has-been actor best known for playing the title character in the 1980s detective series \"Mindhorn\" must work with the police when a serial killer says that he will only speak with Detective Mindhorn, whom he believes to be a real person.\n#> 9                                                                                        A true-life drama, centering on British explorer Col. Percival Fawcett, who disappeared while searching for a mysterious city in the Amazon in the 1920s.\n#> 10                                                        A spacecraft traveling to a distant colony planet and transporting thousands of people has a malfunction in its sleep chambers. As a result, two passengers are awakened 90 years early.\n#>                Director\n#> 1            James Gunn\n#> 2          Ridley Scott\n#> 3    M. Night Shyamalan\n#> 4  Christophe Lourdelet\n#> 5            David Ayer\n#> 6           Yimou Zhang\n#> 7       Damien Chazelle\n#> 8            Sean Foley\n#> 9            James Gray\n#> 10        Morten Tyldum\n#>                                                                        Actors\n#> 1                        Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana\n#> 2     Noomi Rapace, Logan Marshall-Green, Michael Fassbender, Charlize Theron\n#> 3            James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula\n#> 4  Matthew McConaughey,Reese Witherspoon, Seth MacFarlane, Scarlett Johansson\n#> 5                          Will Smith, Jared Leto, Margot Robbie, Viola Davis\n#> 6                               Matt Damon, Tian Jing, Willem Dafoe, Andy Lau\n#> 7                    Ryan Gosling, Emma Stone, Rosemarie DeWitt, J.K. Simmons\n#> 8             Essie Davis, Andrea Riseborough, Julian Barratt,Kenneth Branagh\n#> 9                Charlie Hunnam, Robert Pattinson, Sienna Miller, Tom Holland\n#> 10           Jennifer Lawrence, Chris Pratt, Michael Sheen,Laurence Fishburne\n#>    Year Runtime..Minutes. Rating  Votes RevenueMillions\n#> 1  2014               121    8.1 757074          333.13\n#> 2  2012               124    7.0 485820          126.46\n#> 3  2016               117    7.3 157606          138.12\n#> 4  2016               108    7.2  60545          270.32\n#> 5  2016               123    6.2 393727          325.02\n#> 6  2016               103    6.1  56036           45.13\n#> 7  2016               128    8.3 258682          151.06\n#> 8  2016                89    6.4   2490            8.01\n#> 9  2016               141    7.1   7188            8.01\n#> 10 2016               116    7.0 192177          100.01\n#>    Metascore\n#> 1         76\n#> 2         65\n#> 3         62\n#> 4         59\n#> 5         40\n#> 6         42\n#> 7         93\n#> 8         71\n#> 9         78\n#> 10        41\n\nfill(movies, RevenueMillions:Metascore, .direction = \"up\") %>%\nhead()\n#>   Rank                   Title                    Genre\n#> 1    1 Guardians of the Galaxy  Action,Adventure,Sci-Fi\n#> 2    2              Prometheus Adventure,Mystery,Sci-Fi\n#> 3    3                   Split          Horror,Thriller\n#> 4    4                    Sing  Animation,Comedy,Family\n#> 5    5           Suicide Squad Action,Adventure,Fantasy\n#> 6    6          The Great Wall Action,Adventure,Fantasy\n#>                                                                                                                                                                                                                      Description\n#> 1                                                                                                A group of intergalactic criminals are forced to work together to stop a fanatical warrior from taking control of the universe.\n#> 2                                                                                                Following clues to the origin of mankind, a team finds a structure on a distant moon, but they soon realize they are not alone.\n#> 3                                                                  Three girls are kidnapped by a man with a diagnosed 23 distinct personalities. They must try to escape before the apparent emergence of a frightful new 24th.\n#> 4 In a city of humanoid animals, a hustling theater impresario's attempt to save his theater with a singing competition becomes grander than he anticipates even as its finalists' find that their lives will never be the same.\n#> 5                                            A secret government agency recruits some of the most dangerous incarcerated super-villains to form a defensive task force. Their first mission: save the world from the apocalypse.\n#> 6                                                                             European mercenaries searching for black powder become embroiled in the defense of the Great Wall of China against a horde of monstrous creatures.\n#>               Director\n#> 1           James Gunn\n#> 2         Ridley Scott\n#> 3   M. Night Shyamalan\n#> 4 Christophe Lourdelet\n#> 5           David Ayer\n#> 6          Yimou Zhang\n#>                                                                       Actors\n#> 1                       Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana\n#> 2    Noomi Rapace, Logan Marshall-Green, Michael Fassbender, Charlize Theron\n#> 3           James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula\n#> 4 Matthew McConaughey,Reese Witherspoon, Seth MacFarlane, Scarlett Johansson\n#> 5                         Will Smith, Jared Leto, Margot Robbie, Viola Davis\n#> 6                              Matt Damon, Tian Jing, Willem Dafoe, Andy Lau\n#>   Year Runtime..Minutes. Rating  Votes RevenueMillions\n#> 1 2014               121    8.1 757074          333.13\n#> 2 2012               124    7.0 485820          126.46\n#> 3 2016               117    7.3 157606          138.12\n#> 4 2016               108    7.2  60545          270.32\n#> 5 2016               123    6.2 393727          325.02\n#> 6 2016               103    6.1  56036           45.13\n#>   Metascore\n#> 1        76\n#> 2        65\n#> 3        62\n#> 4        59\n#> 5        40\n#> 6        42"},{"path":"tidyverse-r.html","id":"replacing-na-values-by-a-constant","chapter":"5 Tidyverse R","heading":"5.12.3 Replacing NA values by a constant","text":"function replace_na() replaces NA values constant value. requires named list column names values replace NA values . Pass empty strings columns affected.","code":"\n# creating a named list of column values\nlst <- list('','', 200, 50)\nnames(lst) <- names(movies)[1:3]\nlst\n#> $Rank\n#> [1] \"\"\n#> \n#> $Title\n#> [1] \"\"\n#> \n#> $Genre\n#> [1] 200\n#> \n#> $<NA>\n#> [1] 50\n\n# replacing NA values with the named list\nreplace_na(movies, lst) %>%\nhead(10)\n#>    Rank                   Title                      Genre\n#> 1     1 Guardians of the Galaxy    Action,Adventure,Sci-Fi\n#> 2     2              Prometheus   Adventure,Mystery,Sci-Fi\n#> 3     3                   Split            Horror,Thriller\n#> 4     4                    Sing    Animation,Comedy,Family\n#> 5     5           Suicide Squad   Action,Adventure,Fantasy\n#> 6     6          The Great Wall   Action,Adventure,Fantasy\n#> 7     7              La La Land         Comedy,Drama,Music\n#> 8     8                Mindhorn                     Comedy\n#> 9     9      The Lost City of Z Action,Adventure,Biography\n#> 10   10              Passengers    Adventure,Drama,Romance\n#>                                                                                                                                                                                                                                        Description\n#> 1                                                                                                                  A group of intergalactic criminals are forced to work together to stop a fanatical warrior from taking control of the universe.\n#> 2                                                                                                                  Following clues to the origin of mankind, a team finds a structure on a distant moon, but they soon realize they are not alone.\n#> 3                                                                                    Three girls are kidnapped by a man with a diagnosed 23 distinct personalities. They must try to escape before the apparent emergence of a frightful new 24th.\n#> 4                   In a city of humanoid animals, a hustling theater impresario's attempt to save his theater with a singing competition becomes grander than he anticipates even as its finalists' find that their lives will never be the same.\n#> 5                                                              A secret government agency recruits some of the most dangerous incarcerated super-villains to form a defensive task force. Their first mission: save the world from the apocalypse.\n#> 6                                                                                               European mercenaries searching for black powder become embroiled in the defense of the Great Wall of China against a horde of monstrous creatures.\n#> 7                                                                                                                                                                                     A jazz pianist falls for an aspiring actress in Los Angeles.\n#> 8  A has-been actor best known for playing the title character in the 1980s detective series \"Mindhorn\" must work with the police when a serial killer says that he will only speak with Detective Mindhorn, whom he believes to be a real person.\n#> 9                                                                                        A true-life drama, centering on British explorer Col. Percival Fawcett, who disappeared while searching for a mysterious city in the Amazon in the 1920s.\n#> 10                                                        A spacecraft traveling to a distant colony planet and transporting thousands of people has a malfunction in its sleep chambers. As a result, two passengers are awakened 90 years early.\n#>                Director\n#> 1            James Gunn\n#> 2          Ridley Scott\n#> 3    M. Night Shyamalan\n#> 4  Christophe Lourdelet\n#> 5            David Ayer\n#> 6           Yimou Zhang\n#> 7       Damien Chazelle\n#> 8            Sean Foley\n#> 9            James Gray\n#> 10        Morten Tyldum\n#>                                                                        Actors\n#> 1                        Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana\n#> 2     Noomi Rapace, Logan Marshall-Green, Michael Fassbender, Charlize Theron\n#> 3            James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula\n#> 4  Matthew McConaughey,Reese Witherspoon, Seth MacFarlane, Scarlett Johansson\n#> 5                          Will Smith, Jared Leto, Margot Robbie, Viola Davis\n#> 6                               Matt Damon, Tian Jing, Willem Dafoe, Andy Lau\n#> 7                    Ryan Gosling, Emma Stone, Rosemarie DeWitt, J.K. Simmons\n#> 8             Essie Davis, Andrea Riseborough, Julian Barratt,Kenneth Branagh\n#> 9                Charlie Hunnam, Robert Pattinson, Sienna Miller, Tom Holland\n#> 10           Jennifer Lawrence, Chris Pratt, Michael Sheen,Laurence Fishburne\n#>    Year Runtime..Minutes. Rating  Votes RevenueMillions\n#> 1  2014               121    8.1 757074          333.13\n#> 2  2012               124    7.0 485820          126.46\n#> 3  2016               117    7.3 157606          138.12\n#> 4  2016               108    7.2  60545          270.32\n#> 5  2016               123    6.2 393727          325.02\n#> 6  2016               103    6.1  56036           45.13\n#> 7  2016               128    8.3 258682          151.06\n#> 8  2016                89    6.4   2490              NA\n#> 9  2016               141    7.1   7188            8.01\n#> 10 2016               116    7.0 192177          100.01\n#>    Metascore\n#> 1         76\n#> 2         65\n#> 3         62\n#> 4         59\n#> 5         40\n#> 6         42\n#> 7         93\n#> 8         71\n#> 9         78\n#> 10        41\n\n# creating named list of computed values\nlst <- list('',\n            '', \n            round(median(movies$RevenueMillions, na.rm = T), 2), \n            round(mean(movies$Metascore, na.rm = T)))\nnames(lst) <- names(movies)[1:4]\nlst\n#> $Rank\n#> [1] \"\"\n#> \n#> $Title\n#> [1] \"\"\n#> \n#> $Genre\n#> [1] 47.98\n#> \n#> $Description\n#> [1] 59\n\n# replacing NA values\nreplace_na(movies, lst) %>%\nhead(10)\n#>    Rank                   Title                      Genre\n#> 1     1 Guardians of the Galaxy    Action,Adventure,Sci-Fi\n#> 2     2              Prometheus   Adventure,Mystery,Sci-Fi\n#> 3     3                   Split            Horror,Thriller\n#> 4     4                    Sing    Animation,Comedy,Family\n#> 5     5           Suicide Squad   Action,Adventure,Fantasy\n#> 6     6          The Great Wall   Action,Adventure,Fantasy\n#> 7     7              La La Land         Comedy,Drama,Music\n#> 8     8                Mindhorn                     Comedy\n#> 9     9      The Lost City of Z Action,Adventure,Biography\n#> 10   10              Passengers    Adventure,Drama,Romance\n#>                                                                                                                                                                                                                                        Description\n#> 1                                                                                                                  A group of intergalactic criminals are forced to work together to stop a fanatical warrior from taking control of the universe.\n#> 2                                                                                                                  Following clues to the origin of mankind, a team finds a structure on a distant moon, but they soon realize they are not alone.\n#> 3                                                                                    Three girls are kidnapped by a man with a diagnosed 23 distinct personalities. They must try to escape before the apparent emergence of a frightful new 24th.\n#> 4                   In a city of humanoid animals, a hustling theater impresario's attempt to save his theater with a singing competition becomes grander than he anticipates even as its finalists' find that their lives will never be the same.\n#> 5                                                              A secret government agency recruits some of the most dangerous incarcerated super-villains to form a defensive task force. Their first mission: save the world from the apocalypse.\n#> 6                                                                                               European mercenaries searching for black powder become embroiled in the defense of the Great Wall of China against a horde of monstrous creatures.\n#> 7                                                                                                                                                                                     A jazz pianist falls for an aspiring actress in Los Angeles.\n#> 8  A has-been actor best known for playing the title character in the 1980s detective series \"Mindhorn\" must work with the police when a serial killer says that he will only speak with Detective Mindhorn, whom he believes to be a real person.\n#> 9                                                                                        A true-life drama, centering on British explorer Col. Percival Fawcett, who disappeared while searching for a mysterious city in the Amazon in the 1920s.\n#> 10                                                        A spacecraft traveling to a distant colony planet and transporting thousands of people has a malfunction in its sleep chambers. As a result, two passengers are awakened 90 years early.\n#>                Director\n#> 1            James Gunn\n#> 2          Ridley Scott\n#> 3    M. Night Shyamalan\n#> 4  Christophe Lourdelet\n#> 5            David Ayer\n#> 6           Yimou Zhang\n#> 7       Damien Chazelle\n#> 8            Sean Foley\n#> 9            James Gray\n#> 10        Morten Tyldum\n#>                                                                        Actors\n#> 1                        Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana\n#> 2     Noomi Rapace, Logan Marshall-Green, Michael Fassbender, Charlize Theron\n#> 3            James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula\n#> 4  Matthew McConaughey,Reese Witherspoon, Seth MacFarlane, Scarlett Johansson\n#> 5                          Will Smith, Jared Leto, Margot Robbie, Viola Davis\n#> 6                               Matt Damon, Tian Jing, Willem Dafoe, Andy Lau\n#> 7                    Ryan Gosling, Emma Stone, Rosemarie DeWitt, J.K. Simmons\n#> 8             Essie Davis, Andrea Riseborough, Julian Barratt,Kenneth Branagh\n#> 9                Charlie Hunnam, Robert Pattinson, Sienna Miller, Tom Holland\n#> 10           Jennifer Lawrence, Chris Pratt, Michael Sheen,Laurence Fishburne\n#>    Year Runtime..Minutes. Rating  Votes RevenueMillions\n#> 1  2014               121    8.1 757074          333.13\n#> 2  2012               124    7.0 485820          126.46\n#> 3  2016               117    7.3 157606          138.12\n#> 4  2016               108    7.2  60545          270.32\n#> 5  2016               123    6.2 393727          325.02\n#> 6  2016               103    6.1  56036           45.13\n#> 7  2016               128    8.3 258682          151.06\n#> 8  2016                89    6.4   2490              NA\n#> 9  2016               141    7.1   7188            8.01\n#> 10 2016               116    7.0 192177          100.01\n#>    Metascore\n#> 1         76\n#> 2         65\n#> 3         62\n#> 4         59\n#> 5         40\n#> 6         42\n#> 7         93\n#> 8         71\n#> 9         78\n#> 10        41"},{"path":"tidyverse-r.html","id":"replacing-na-values-by-groups","chapter":"5 Tidyverse R","heading":"5.12.4 Replacing NA values by groups","text":"","code":"\n# splitting data frame\nmovies_split <- base::split(movies, movies$Year)\n\n# replacing NA values\nlapply(movies_split, function(x) {\n    lst <- list('',\n                '', \n                round(median(x[x$RevenueMillions, 'RevenueMillions'], na.rm = T),2), \n                round(mean(x[x$Metascore, 'Metascore'], na.rm = T)))\n    names(lst) <- names(movies)[1:4]\n    x <- replace_na(x, lst)\n    return(x)\n}) %>%\ndplyr::bind_rows() %>%\ntail(10)\n#>      Rank                          Title\n#> 991   948                     King Cobra\n#> 992   950                          Kicks\n#> 993   965                        Custody\n#> 994   967                      L'odyssée\n#> 995   975                 Queen of Katwe\n#> 996   976     My Big Fat Greek Wedding 2\n#> 997   978                  Amateur Night\n#> 998   979 It's Only the End of the World\n#> 999   981           Miracles from Heaven\n#> 1000 1000                     Nine Lives\n#>                       Genre\n#> 991             Crime,Drama\n#> 992               Adventure\n#> 993                   Drama\n#> 994     Adventure,Biography\n#> 995   Biography,Drama,Sport\n#> 996   Comedy,Family,Romance\n#> 997                  Comedy\n#> 998                   Drama\n#> 999  Biography,Drama,Family\n#> 1000  Comedy,Family,Fantasy\n#>                                                                                                                                                                                                                                        Description\n#> 991                            This ripped-from-the-headlines drama covers the early rise of gay porn headliner Sean Paul Lockhart a.k.a. Brent Corrigan, before his falling out with the producer who made him famous. When... See full summary »\n#> 992  Brandon is a 15 year old whose dream is a pair of fresh Air Jordans. Soon after he gets his hands on them, they're stolen by a local hood, causing Brandon and his two friends to go on a dangerous mission through Oakland to retrieve them.\n#> 993                                                                                                                                            The lives of three women are unexpectedly changed when they cross paths at a New York Family Court.\n#> 994                 Highly influential and a fearlessly ambitious pioneer, innovator, filmmaker, researcher and conservationist, Jacques-Yves Cousteau's aquatic adventure covers roughly thirty years of an inarguably rich in achievements life.\n#> 995                                                                                                                                                      A Ugandan girl sees her world rapidly change after being introduced to the game of chess.\n#> 996                                                                                                                                 A Portokalos family secret brings the beloved characters back together for an even bigger and Greeker wedding.\n#> 997                               Guy Carter is an award-winning graduate student of architecture. He's got a beautiful wife and a baby on the way. The problem? He doesn't have \"his ducks in a row,\" which only fuels his ... See full summary »\n#> 998                                                                                                                        Louis (Gaspard Ulliel), a terminally ill writer, returns home after a long absence to tell his family that he is dying.\n#> 999                                                                                                                    A young girl suffering from a rare digestive disorder finds herself miraculously cured after surviving a terrible accident.\n#> 1000                                                                                                                                                               A stuffy businessman finds himself trapped inside the body of his family's cat.\n#>              Director\n#> 991      Justin Kelly\n#> 992    Justin Tipping\n#> 993      James Lapine\n#> 994      Jérôme Salle\n#> 995         Mira Nair\n#> 996        Kirk Jones\n#> 997      Lisa Addario\n#> 998      Xavier Dolan\n#> 999   Patricia Riggen\n#> 1000 Barry Sonnenfeld\n#>                                                                            Actors\n#> 991                Garrett Clayton, Christian Slater, Molly Ringwald,James Kelley\n#> 992  Jahking Guillory, Christopher Jordan Wallace,Christopher Meyer, Kofi Siriboe\n#> 993        Viola Davis, Hayden Panettiere, Catalina Sandino Moreno, Ellen Burstyn\n#> 994                     Lambert Wilson, Pierre Niney, Audrey Tautou,Laurent Lucas\n#> 995                Madina Nalwanga, David Oyelowo, Lupita Nyong'o, Martin Kabanza\n#> 996                 Nia Vardalos, John Corbett, Michael Constantine, Lainie Kazan\n#> 997                  Jason Biggs, Janet Montgomery,Ashley Tisdale, Bria L. Murphy\n#> 998                  Nathalie Baye, Vincent Cassel, Marion Cotillard, Léa Seydoux\n#> 999             Jennifer Garner, Kylie Rogers, Martin Henderson,Brighton Sharbino\n#> 1000                     Kevin Spacey, Jennifer Garner, Robbie Amell,Cheryl Hines\n#>      Year Runtime..Minutes. Rating Votes RevenueMillions\n#> 991  2016                91    5.6  3990            0.03\n#> 992  2016                80    6.1  2417            0.15\n#> 993  2016               104    6.9   280              NA\n#> 994  2016               122    6.7  1810              NA\n#> 995  2016               124    7.4  6753            8.81\n#> 996  2016                94    6.0 20966           59.57\n#> 997  2016                92    5.0  2229              NA\n#> 998  2016                97    7.0 10658              NA\n#> 999  2016               109    7.0 12048           61.69\n#> 1000 2016                87    5.3 12435           19.64\n#>      Metascore\n#> 991         48\n#> 992         69\n#> 993         72\n#> 994         70\n#> 995         73\n#> 996         37\n#> 997         38\n#> 998         48\n#> 999         44\n#> 1000        11"},{"path":"tidyverse-r.html","id":"dropping-na-values","chapter":"5 Tidyverse R","heading":"5.12.5 Dropping NA values","text":"function drop_na() drops rows containing NA values.","code":"\ndrop_na(movies) %>%\nhead(10)\n#>    Rank                                   Title\n#> 1     1                 Guardians of the Galaxy\n#> 2     2                              Prometheus\n#> 3     3                                   Split\n#> 4     4                                    Sing\n#> 5     5                           Suicide Squad\n#> 6     6                          The Great Wall\n#> 7     7                              La La Land\n#> 8     9                      The Lost City of Z\n#> 9    10                              Passengers\n#> 10   11 Fantastic Beasts and Where to Find Them\n#>                         Genre\n#> 1     Action,Adventure,Sci-Fi\n#> 2    Adventure,Mystery,Sci-Fi\n#> 3             Horror,Thriller\n#> 4     Animation,Comedy,Family\n#> 5    Action,Adventure,Fantasy\n#> 6    Action,Adventure,Fantasy\n#> 7          Comedy,Drama,Music\n#> 8  Action,Adventure,Biography\n#> 9     Adventure,Drama,Romance\n#> 10   Adventure,Family,Fantasy\n#>                                                                                                                                                                                                                       Description\n#> 1                                                                                                 A group of intergalactic criminals are forced to work together to stop a fanatical warrior from taking control of the universe.\n#> 2                                                                                                 Following clues to the origin of mankind, a team finds a structure on a distant moon, but they soon realize they are not alone.\n#> 3                                                                   Three girls are kidnapped by a man with a diagnosed 23 distinct personalities. They must try to escape before the apparent emergence of a frightful new 24th.\n#> 4  In a city of humanoid animals, a hustling theater impresario's attempt to save his theater with a singing competition becomes grander than he anticipates even as its finalists' find that their lives will never be the same.\n#> 5                                             A secret government agency recruits some of the most dangerous incarcerated super-villains to form a defensive task force. Their first mission: save the world from the apocalypse.\n#> 6                                                                              European mercenaries searching for black powder become embroiled in the defense of the Great Wall of China against a horde of monstrous creatures.\n#> 7                                                                                                                                                                    A jazz pianist falls for an aspiring actress in Los Angeles.\n#> 8                                                                       A true-life drama, centering on British explorer Col. Percival Fawcett, who disappeared while searching for a mysterious city in the Amazon in the 1920s.\n#> 9                                        A spacecraft traveling to a distant colony planet and transporting thousands of people has a malfunction in its sleep chambers. As a result, two passengers are awakened 90 years early.\n#> 10                                                                      The adventures of writer Newt Scamander in New York's secret community of witches and wizards seventy years before Harry Potter reads his book in school.\n#>                Director\n#> 1            James Gunn\n#> 2          Ridley Scott\n#> 3    M. Night Shyamalan\n#> 4  Christophe Lourdelet\n#> 5            David Ayer\n#> 6           Yimou Zhang\n#> 7       Damien Chazelle\n#> 8            James Gray\n#> 9         Morten Tyldum\n#> 10          David Yates\n#>                                                                        Actors\n#> 1                        Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana\n#> 2     Noomi Rapace, Logan Marshall-Green, Michael Fassbender, Charlize Theron\n#> 3            James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula\n#> 4  Matthew McConaughey,Reese Witherspoon, Seth MacFarlane, Scarlett Johansson\n#> 5                          Will Smith, Jared Leto, Margot Robbie, Viola Davis\n#> 6                               Matt Damon, Tian Jing, Willem Dafoe, Andy Lau\n#> 7                    Ryan Gosling, Emma Stone, Rosemarie DeWitt, J.K. Simmons\n#> 8                Charlie Hunnam, Robert Pattinson, Sienna Miller, Tom Holland\n#> 9            Jennifer Lawrence, Chris Pratt, Michael Sheen,Laurence Fishburne\n#> 10               Eddie Redmayne, Katherine Waterston, Alison Sudol,Dan Fogler\n#>    Year Runtime..Minutes. Rating  Votes RevenueMillions\n#> 1  2014               121    8.1 757074          333.13\n#> 2  2012               124    7.0 485820          126.46\n#> 3  2016               117    7.3 157606          138.12\n#> 4  2016               108    7.2  60545          270.32\n#> 5  2016               123    6.2 393727          325.02\n#> 6  2016               103    6.1  56036           45.13\n#> 7  2016               128    8.3 258682          151.06\n#> 8  2016               141    7.1   7188            8.01\n#> 9  2016               116    7.0 192177          100.01\n#> 10 2016               133    7.5 232072          234.02\n#>    Metascore\n#> 1         76\n#> 2         65\n#> 3         62\n#> 4         59\n#> 5         40\n#> 6         42\n#> 7         93\n#> 8         78\n#> 9         41\n#> 10        66\n\ndrop_na(movies) %>%\nnrow()\n#> [1] 838"},{"path":"tidyverse-r.html","id":"outliers","chapter":"5 Tidyverse R","heading":"5.13 Outliers","text":"","code":""},{"path":"tidyverse-r.html","id":"what-is-an-outlier-1","chapter":"5 Tidyverse R","heading":"5.13.1 What is an outlier?","text":"Outliers also known anomalies values deviate extremely values within group data. occur errors committed collecting recording data, performing calculations just data points extreme values.","code":""},{"path":"tidyverse-r.html","id":"identifying-outlier-1","chapter":"5 Tidyverse R","heading":"5.13.2 Identifying outlier","text":"","code":""},{"path":"tidyverse-r.html","id":"using-summary-statistics-1","chapter":"5 Tidyverse R","heading":"5.13.2.1 Using summary statistics","text":"first step outlier detection look summary statistics, especially minimum, maximum, median, mean. example, dataset people’s ages, maximum 200 minimum negative, problem., see median mean 10 million 44 million respectively maximum value 1.3 billion. tells us outliers since maximum value varies greatly centre data.","code":"\nlibrary(gapminder)\ndata(gapminder)\ngapminder_2007 <- subset(gapminder, year == '2007', select = -year)\nhead(gapminder_2007)\n#> # A tibble: 6 x 5\n#>   country     continent lifeExp      pop gdpPercap\n#>   <fct>       <fct>       <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia         43.8 31889923      975.\n#> 2 Albania     Europe       76.4  3600523     5937.\n#> 3 Algeria     Africa       72.3 33333216     6223.\n#> 4 Angola      Africa       42.7 12420476     4797.\n#> 5 Argentina   Americas     75.3 40301927    12779.\n#> 6 Australia   Oceania      81.2 20434176    34435.\n\nsummary(gapminder_2007$pop/1e6)\n#>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n#>    0.1996    4.5080   10.5175   44.0212   31.2100 1318.6831"},{"path":"tidyverse-r.html","id":"using-plots-1","chapter":"5 Tidyverse R","heading":"5.13.3 Using plots","text":"Outliers identified using univariate plots histogram, density plot boxplot.data visualizations, boxplot relevant shows spread data outliers. boxplot reveals following:minimum value,first quantile (Q1),median (second quantile),third quantile (Q3),maximum value excluding outliers andoutliers.difference Q3 Q1 known Interquartile Range (IQR).outliers within box plot calculated value falls beyond 1.5 * IQR.function boxplot.stats() computes data used draw box plot. Using function, can get outliers.first element returned summary statistic calculated summary().last element returned outliers.Recall outliers calculated 1.5 * IQR, can changed using argument coef. default, set 1.5 can changed need .","code":"\n# plotting variable using histogram\nhist(gapminder_2007$gdpPercap, breaks = 18)\n\n\n# density plot\nplot(density(gapminder_2007$gdpPercap))\n\n\n# boxplot of population\nboxplot(gapminder_2007$gdpPercap)\nboxplot.stats(gapminder_2007$gdpPercap)\n#> $stats\n#> [1]   277.5519  1598.4351  6124.3711 18008.9444 40675.9964\n#> \n#> $n\n#> [1] 142\n#> \n#> $conf\n#> [1] 3948.491 8300.251\n#> \n#> $out\n#> [1] 47306.99 49357.19 47143.18 42951.65\nboxplot.stats(gapminder_2007$gdpPercap)$stats\n#> [1]   277.5519  1598.4351  6124.3711 18008.9444 40675.9964\nsummary(gapminder_2007$gdpPercap)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   277.6  1624.8  6124.4 11680.1 18008.8 49357.2\nboxplot.stats(gapminder_2007$gdpPercap)$out\n#> [1] 47306.99 49357.19 47143.18 42951.65\n# changing coef\nboxplot.stats(gapminder_2007$gdpPercap, coef = 0.8)$out\n#>  [1] 34435.37 36126.49 33692.61 36319.24 35278.42 33207.08\n#>  [7] 32170.37 39724.98 36180.79 40676.00 31656.07 47306.99\n#> [13] 36797.93 49357.19 47143.18 33859.75 37506.42 33203.26\n#> [19] 42951.65\nboxplot.stats(gapminder_2007$gdpPercap, coef = 1)$out\n#>  [1] 34435.37 36126.49 36319.24 35278.42 39724.98 36180.79\n#>  [7] 40676.00 47306.99 36797.93 49357.19 47143.18 37506.42\n#> [13] 42951.65\nboxplot.stats(gapminder_2007$gdpPercap, coef = 1.2)$out\n#> [1] 39724.98 40676.00 47306.99 49357.19 47143.18 42951.65\n\n# selecting outliers\nsubset(gapminder_2007, gdpPercap >= min(boxplot.stats(gdpPercap)$out))\n#> # A tibble: 4 x 5\n#>   country       continent lifeExp       pop gdpPercap\n#>   <fct>         <fct>       <dbl>     <int>     <dbl>\n#> 1 Kuwait        Asia         77.6   2505559    47307.\n#> 2 Norway        Europe       80.2   4627926    49357.\n#> 3 Singapore     Asia         80.0   4553009    47143.\n#> 4 United States Americas     78.2 301139947    42952."},{"path":"tidyverse-r.html","id":"outliers-by-groups","chapter":"5 Tidyverse R","heading":"5.13.4 Outliers by groups","text":"","code":"\n# boxplot by continent\nboxplot(gdpPercap ~ continent, gapminder_2007)\n\n\n# splitting data frame\ngap_split <- split(gapminder_2007, gapminder_2007$continent)\n\noutliers_2007 <- \nlapply(gap_split, function(x) {\n    x <- boxplot.stats(x$gdpPercap)$out\n    return(x)\n})\noutliers_2007\n#> $Africa\n#> [1] 12569.852 12154.090 13206.485 12057.499 10956.991\n#> [6]  9269.658\n#> \n#> $Americas\n#> [1] 36319.24 42951.65\n#> \n#> $Asia\n#> numeric(0)\n#> \n#> $Europe\n#> numeric(0)\n#> \n#> $Oceania\n#> numeric(0)"},{"path":"tidyverse-r.html","id":"tr-string","chapter":"5 Tidyverse R","heading":"5.14 String manipulation with stringr","text":"","code":""},{"path":"tidyverse-r.html","id":"determine-string-length","chapter":"5 Tidyverse R","heading":"5.14.1 Determine string length","text":"function str_length() returns count letters string.","code":"\nlibrary(stringr)\nmonth.name\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\nstr_length(month.name)\n#>  [1] 7 8 5 5 3 4 4 6 9 7 8 8"},{"path":"tidyverse-r.html","id":"strings-formatting-case-conversion","chapter":"5 Tidyverse R","heading":"5.14.2 Strings formatting (case conversion)","text":"functions str_to_upper(), str_to_lower(), str_to_title() str_to_sentence() used convert upper, lower, title sentence cases respectively.function str_pad() used pad characters /string.\nfunction str_trunc() used truncate string.","code":"\n# lowercase\nstr_to_lower('It is an everyday thing', locale = \"en\")\n#> [1] \"it is an everyday thing\"\n\n# uppercase\nstr_to_upper('It is an everyday thing', locale = \"en\")\n#> [1] \"IT IS AN EVERYDAY THING\"\n\n# title case\nstr_to_title('It is an everyday thing', locale = \"en\")\n#> [1] \"It Is An Everyday Thing\"\n\n# sentence case\nstr_to_sentence('iT is aN everyDay thIng', locale = \"en\")\n#> [1] \"It is an everyday thing\"\n\n# padding string\nstr_pad(c(12, 235, 'abd', 'ame'), width = 5, pad = '0')\n#> [1] \"00012\" \"00235\" \"00abd\" \"00ame\"\nstr_pad(c(12, 235, 'abd', 'ame'), width = 5, pad = 'X', side = 'right')\n#> [1] \"12XXX\" \"235XX\" \"abdXX\" \"ameXX\"\nstr_pad(c(12, 235, 'abd', 'ame'), width = 5, pad = '-', side = 'both')\n#> [1] \"-12--\" \"-235-\" \"-abd-\" \"-ame-\"\n\n# truncate a character string\nstr_trunc(state.name[1:8], width = 6)\n#> [1] \"Ala...\" \"Alaska\" \"Ari...\" \"Ark...\" \"Cal...\" \"Col...\"\n#> [7] \"Con...\" \"Del...\"\nstr_trunc(state.name[1:8], 6, side  = 'left')\n#> [1] \"...ama\" \"Alaska\" \"...ona\" \"...sas\" \"...nia\" \"...ado\"\n#> [7] \"...cut\" \"...are\"\nstr_trunc(state.name[1:8], 6, side  = 'right', ellipsis = '')\n#> [1] \"Alabam\" \"Alaska\" \"Arizon\" \"Arkans\" \"Califo\" \"Colora\"\n#> [7] \"Connec\" \"Delawa\""},{"path":"tidyverse-r.html","id":"join-and-split-strings-1","chapter":"5 Tidyverse R","heading":"5.14.3 Join and Split strings","text":"","code":""},{"path":"tidyverse-r.html","id":"joining-strings-with-str_c","chapter":"5 Tidyverse R","heading":"5.14.3.1 joining strings with str_c()","text":"function str_c() joins two vectors element wise single character vector, optionally inserting separator (sep) input vectors.","code":"\n# combining elements into a character vector\nstr_c('a', 'b')\n#> [1] \"ab\"\nstr_c(1, 2, 3, 4)\n#> [1] \"1234\"\n\n# using sep\nstr_c('a', 'b', sep = ' ')\n#> [1] \"a b\"\nstr_c(1, 2, 3, 4, sep = ' ')\n#> [1] \"1 2 3 4\"\nstr_c(1:10, sep = ' ')\n#>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n\n# on a single vector\nstr_c(c('a', 'b'), sep = ' <> ')\n#> [1] \"a\" \"b\"\nstr_c(c(1, 2), sep = ' <> ')\n#> [1] \"1\" \"2\"\n\n# two or more vectors\nstr_c(c('a', 'b'), c('c', 'd'), sep = ' <> ')\n#> [1] \"a <> c\" \"b <> d\"\nstr_c(1:5, 10:20, sep = ' ')\n#>  [1] \"1 10\" \"2 11\" \"3 12\" \"4 13\" \"5 14\" \"1 15\" \"2 16\" \"3 17\"\n#>  [9] \"4 18\" \"5 19\" \"1 20\"\nstr_c(1:5, 10:20, c('a','b','c'), sep = ' ')\n#>  [1] \"1 10 a\" \"2 11 b\" \"3 12 c\" \"4 13 a\" \"5 14 b\" \"1 15 c\"\n#>  [7] \"2 16 a\" \"3 17 b\" \"4 18 c\" \"5 19 a\" \"1 20 b\"\n# collapsing vectors\nstr_c(1:10, collapse = '~')\n#> [1] \"1~2~3~4~5~6~7~8~9~10\"\nstr_c(c('a', 'b'), c('c', 'd'), collapse = ' <> ')\n#> [1] \"ac <> bd\"\nstr_c(month.name[1:6], collapse = \" - \")\n#> [1] \"January - February - March - April - May - June\"\n\na <- month.name[1]\nb <- month.name[2]\nc <- month.name[3]\n\n# combining character and variables\nstr_c(b,'comes after', a ,'but comes before', c, sep = \" \")\n#> [1] \"February comes after January but comes before March\"\nstr_c(b,'comes after', a ,'but comes before', c, sep = \"/\")\n#> [1] \"February/comes after/January/but comes before/March\"\nstr_c('version 1.', 1:5, sep = '')\n#> [1] \"version 1.1\" \"version 1.2\" \"version 1.3\" \"version 1.4\"\n#> [5] \"version 1.5\""},{"path":"tidyverse-r.html","id":"joining-using-str_glue","chapter":"5 Tidyverse R","heading":"5.14.4 Joining using str_glue()","text":"function str_glue() returns character vector containing formatted combination text variable values.formatting integersFormatting stringsFormatting doubles floating points","code":"\nx <- 2\nstr_glue('{x} * {x} = {x ** 2}')\n#> 2 * 2 = 4\n\nx <- c(1:4)\nstr_glue('{x} squared is equal to {x ** 2}')\n#> 1 squared is equal to 1\n#> 2 squared is equal to 4\n#> 3 squared is equal to 9\n#> 4 squared is equal to 16\n\nnum <- c(123, 1, 100, 200, 10200, 25000)\nstr_glue('my registration number is {str_pad(num, 5, pad = \"0\")}')\n#> my registration number is 00123\n#> my registration number is 00001\n#> my registration number is 00100\n#> my registration number is 00200\n#> my registration number is 10200\n#> my registration number is 25000\nx <- 'my name is'\ny <- 'james'\nz <- 'london'\nstr_glue('{x} {y} and i live and work in {z}')\n#> my name is james and i live and work in london\n\n\nx <- 'my name is'\ny <- 'james'\nz <- 35\nstr_glue('{str_to_title(x)} {str_to_upper(y)} and i am {z} years')\n#> My Name Is JAMES and i am 35 years\n\nnames <- c('paul', 'alphonse', 'michael', 'james', 'samson', 'terence', 'derin')\nage <- c(30, 35, 32, 37, 29, 40, 30)\nstr_glue('i am {str_to_title(names)} and i am {age} years old')\n#> i am Paul and i am 30 years old\n#> i am Alphonse and i am 35 years old\n#> i am Michael and i am 32 years old\n#> i am James and i am 37 years old\n#> i am Samson and i am 29 years old\n#> i am Terence and i am 40 years old\n#> i am Derin and i am 30 years old\nx <- 1000/6\nx\n#> [1] 166.6667\nstr_glue('1000 divided by 3 is {x}')\n#> 1000 divided by 3 is 166.666666666667\nstr_glue('1000 divided by 3 is {round(x, 3)}')\n#> 1000 divided by 3 is 166.667\nstr_glue('1000 divided by 3 is {round(x)}')\n#> 1000 divided by 3 is 167\nstr_glue('1000 divided by 3 is {paste0(\"+\", round(x))}')\n#> 1000 divided by 3 is +167\nstr_glue('1000 divided by 3 is{paste0(\" \", round(x))}')\n#> 1000 divided by 3 is 167"},{"path":"tidyverse-r.html","id":"splitting-strings-using-str_split-and-str_split_fixed","chapter":"5 Tidyverse R","heading":"5.14.5 Splitting strings using str_split() and str_split_fixed()","text":"function str_split() splits elements character vector substrings specific pattern.\nfunction str_split_fixed() splits elements character fixed number pieces.","code":"\nstr(str_split(c('2020-01-01', '2019-03-31', '2018-06-30'), pattern = \"-\"))\n#> List of 3\n#>  $ : chr [1:3] \"2020\" \"01\" \"01\"\n#>  $ : chr [1:3] \"2019\" \"03\" \"31\"\n#>  $ : chr [1:3] \"2018\" \"06\" \"30\"\nstr(str_split(c('2020 01 01', '2019 03 31', '2018 06 30'), pattern = \" \"))\n#> List of 3\n#>  $ : chr [1:3] \"2020\" \"01\" \"01\"\n#>  $ : chr [1:3] \"2019\" \"03\" \"31\"\n#>  $ : chr [1:3] \"2018\" \"06\" \"30\"\n\n# splitting into two substrings\nstr(str_split(c('2020-01-01', '2019-03-31', '2018-06-30'), pattern = \"-\", n = 2))\n#> List of 3\n#>  $ : chr [1:2] \"2020\" \"01-01\"\n#>  $ : chr [1:2] \"2019\" \"03-31\"\n#>  $ : chr [1:2] \"2018\" \"06-30\"\nstr(str_split(c('2020 01 01', '2019 03 31', '2018 06 30'), pattern = \" \", n = 2))\n#> List of 3\n#>  $ : chr [1:2] \"2020\" \"01 01\"\n#>  $ : chr [1:2] \"2019\" \"03 31\"\n#>  $ : chr [1:2] \"2018\" \"06 30\"\n\n# returning a matrix\nstr_split_fixed(c('2020-01-01', '2019-03-31', '2018-06-30'), '-', 2)\n#>      [,1]   [,2]   \n#> [1,] \"2020\" \"01-01\"\n#> [2,] \"2019\" \"03-31\"\n#> [3,] \"2018\" \"06-30\"\nstr_split_fixed(c('2020-01-01', '2019-03-31', '2018-06-30'), '-', 3)\n#>      [,1]   [,2] [,3]\n#> [1,] \"2020\" \"01\" \"01\"\n#> [2,] \"2019\" \"03\" \"31\"\n#> [3,] \"2018\" \"06\" \"30\""},{"path":"tidyverse-r.html","id":"extract-and-replace-part-of-a-string","chapter":"5 Tidyverse R","heading":"5.14.6 Extract and Replace part of a string","text":"","code":""},{"path":"tidyverse-r.html","id":"extracting-string-values-using-str_sub","chapter":"5 Tidyverse R","heading":"5.14.6.1 Extracting string values using str_sub()","text":"function str_sub() extracts substring string indexing. uses start beginning position stop ending position. like indexing applied string.","code":"\nvar <- c('2020-01-01', '2019-03-31', '2018-06-30')\nstr_sub(var, start = 1, end = 4)\n#> [1] \"2020\" \"2019\" \"2018\"\nstr_sub(var, 6, 7)\n#> [1] \"01\" \"03\" \"06\"\nstr_sub(var, 9, 10)\n#> [1] \"01\" \"31\" \"30\"\n\n# using negative numbers\nstr_sub(var, -2, -1)\n#> [1] \"01\" \"31\" \"30\"\nstr_sub(var, -5, -4)\n#> [1] \"01\" \"03\" \"06\"\nstr_sub(var, -10, -7)\n#> [1] \"2020\" \"2019\" \"2018\""},{"path":"tidyverse-r.html","id":"replacing-string-values-using-str_sub","chapter":"5 Tidyverse R","heading":"5.14.6.2 Replacing string values using str_sub()","text":"function str_sub() also used replace substring string assigning different string extracted substring.","code":"\nvar <- c('2020-01-01', '2019-03-31', '2018-06-30')\nstr_sub(var, 1, 4) <- c('2010', '2011', '2012')\nvar\n#> [1] \"2010-01-01\" \"2011-03-31\" \"2012-06-30\""},{"path":"tidyverse-r.html","id":"replacing-string-values-using-str_replace","chapter":"5 Tidyverse R","heading":"5.14.7 Replacing string values using str_replace()","text":"function str_replace() replaces substring first occurrence.","code":"\nvar <- c('2020-01-01', '2019-03-31', '2018-06-30')\nstr_replace(var, \"-\", \"\")\n#> [1] \"202001-01\" \"201903-31\" \"201806-30\"\nstr_replace(var, \"-\", \"/\")\n#> [1] \"2020/01-01\" \"2019/03-31\" \"2018/06-30\""},{"path":"tidyverse-r.html","id":"replacing-string-values-using-str_replace_all","chapter":"5 Tidyverse R","heading":"5.14.8 Replacing string values using str_replace_all()","text":"function str_replace_all() replaces substring throughout string.","code":"\nvar <- c('2020-01-01', '2019-03-31', '2018-06-30')\nstr_replace_all(var, \"-\", \" \")\n#> [1] \"2020 01 01\" \"2019 03 31\" \"2018 06 30\"\nstr_replace_all(var, \"-\", \"/\")\n#> [1] \"2020/01/01\" \"2019/03/31\" \"2018/06/30\""},{"path":"tidyverse-r.html","id":"remove-white-spaces-and-clean-string-values-1","chapter":"5 Tidyverse R","heading":"5.14.8.1 Remove white spaces and clean string values","text":"function:str_trim() removes white spaces.str_squish() removes repeated spaces.str_remove() removes first repeated spaces.str_remove_all() removes repeated spaces.","code":"\n# both sides\nstr_trim(c(' 2020-01-01 ', ' 2019-03-31 ', ' 2018-06-30 '))\n#> [1] \"2020-01-01\" \"2019-03-31\" \"2018-06-30\"\n\n# left side\nstr_trim(c(' 2020-01-01 ', ' 2019-03-31 ', ' 2018-06-30 '), side = 'left')\n#> [1] \"2020-01-01 \" \"2019-03-31 \" \"2018-06-30 \"\n\n# right side\nstr_trim(c(' 2020-01-01 ', ' 2019-03-31 ', ' 2018-06-30 '), side = 'right')\n#> [1] \" 2020-01-01\" \" 2019-03-31\" \" 2018-06-30\"\n\nstr_squish('removing   all    repeated   spaces in a string  ')\n#> [1] \"removing all repeated spaces in a string\"\n\nstr_remove('removing   first  repeated   spaces in a string  ', '  ')\n#> [1] \"removing first  repeated   spaces in a string  \"\nstr_remove_all('removing   all  repeated   spaces in a string  ', '  ')\n#> [1] \"removing allrepeated spaces in a string\""},{"path":"tidyverse-r.html","id":"sorting","chapter":"5 Tidyverse R","heading":"5.14.9 Sorting","text":"function:str_order() sorts character vector returns sorted indices.str_sort() sorts character vector returns sorted values.","code":"\nstr_order(month.name)\n#>  [1]  4  8 12  2  1  7  6  3  5 11 10  9\nstr_order(month.name, decreasing = T)\n#>  [1]  9 10 11  5  3  6  7  1  2 12  8  4\n\nstr_sort(month.name)\n#>  [1] \"April\"     \"August\"    \"December\"  \"February\" \n#>  [5] \"January\"   \"July\"      \"June\"      \"March\"    \n#>  [9] \"May\"       \"November\"  \"October\"   \"September\"\nstr_sort(month.name, decreasing = T)\n#>  [1] \"September\" \"October\"   \"November\"  \"May\"      \n#>  [5] \"March\"     \"June\"      \"July\"      \"January\"  \n#>  [9] \"February\"  \"December\"  \"August\"    \"April\""},{"path":"tidyverse-r.html","id":"duplicating-strings","chapter":"5 Tidyverse R","heading":"5.14.10 Duplicating strings","text":"function str_dup() duplicates concatenate strings within character vector.","code":"\nstr_dup('jan', 2)\n#> [1] \"janjan\"\nstr_dup('jan', 1:3)\n#> [1] \"jan\"       \"janjan\"    \"janjanjan\""},{"path":"tidyverse-r.html","id":"pattern-matching-using-regular-expression-1","chapter":"5 Tidyverse R","heading":"5.14.11 Pattern matching using regular expression","text":"","code":""},{"path":"tidyverse-r.html","id":"regex-functions-1","chapter":"5 Tidyverse R","heading":"5.14.11.1 Regex functions","text":"str_which(),str_detect()andstr_subset()`str_count()str_starts() str_ends()str_locate() str_locate_all()str_extract() str_extract_all()str_match() str_match_all()str_view() str_view_all()str_replace() str_replace_all()","code":""},{"path":"tidyverse-r.html","id":"the-functions-str_detect-str_which-and-str_subset","chapter":"5 Tidyverse R","heading":"5.14.11.1.1 The functions str_detect(), str_which() and str_subset()","text":"function:str_detect() detects presence absence pattern string equivalent grepl(pattern, x).str_which() detects position matched pattern equivalent grep(pattern, x).str_subset() keeps string matching pattern equivalent grep(pattern, x, value = TRUE).","code":"\nstr_detect(month.name, 'uary')\n#>  [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#> [10] FALSE FALSE FALSE\nmonth.name[str_detect(month.name, 'uary')]\n#> [1] \"January\"  \"February\"\nstr_detect(month.name, 'uary', negate = T)\n#>  [1] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n#> [10]  TRUE  TRUE  TRUE\nmonth.name[str_detect(month.name, 'uary', negate = T)]\n#>  [1] \"March\"     \"April\"     \"May\"       \"June\"     \n#>  [5] \"July\"      \"August\"    \"September\" \"October\"  \n#>  [9] \"November\"  \"December\"\nstr_which(month.name, 'uary')\n#> [1] 1 2\nmonth.name[str_which(month.name, 'uary')]\n#> [1] \"January\"  \"February\"\n\nstr_which(month.name, 'uary', negate = T)\n#>  [1]  3  4  5  6  7  8  9 10 11 12\nmonth.name[str_which(month.name, 'uary', negate = T)]\n#>  [1] \"March\"     \"April\"     \"May\"       \"June\"     \n#>  [5] \"July\"      \"August\"    \"September\" \"October\"  \n#>  [9] \"November\"  \"December\"\n\nstr_subset(month.name, pattern = 'ber')\n#> [1] \"September\" \"October\"   \"November\"  \"December\"\nstr_subset(month.name, pattern = 'ber', negate = TRUE)\n#> [1] \"January\"  \"February\" \"March\"    \"April\"    \"May\"     \n#> [6] \"June\"     \"July\"     \"August\""},{"path":"tidyverse-r.html","id":"the-function-str_count","chapter":"5 Tidyverse R","heading":"5.14.11.1.2 The function str_count()","text":"function str_count() counts number matches string.","code":"\nvar <- c('2020-01-01', '2019-03-31', '2018-06-30')\nstr_count(var, pattern = '-')\n#> [1] 2 2 2"},{"path":"tidyverse-r.html","id":"the-functions-str_starts-and-str_ends","chapter":"5 Tidyverse R","heading":"5.14.11.2 The functions str_starts() and str_ends()","text":"function:str_starts() detects presence pattern beginning string.str_ends() detects presence pattern end string.","code":"\nstr_starts(month.name, 'J')\n#>  [1]  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE\n#> [10] FALSE FALSE FALSE\nmonth.name[str_starts(month.name, 'J')]\n#> [1] \"January\" \"June\"    \"July\"\nstr_ends(month.name, 'ber')\n#>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n#> [10]  TRUE  TRUE  TRUE\nmonth.name[str_ends(month.name, 'ber')]\n#> [1] \"September\" \"October\"   \"November\"  \"December\""},{"path":"tidyverse-r.html","id":"the-functions-str_locate-and-str_locate_all","chapter":"5 Tidyverse R","heading":"5.14.11.2.1 The functions str_locate() and str_locate_all()","text":"function:str_locate() locates position first pattern match string.str_locate_all() locates position pattern matches string.","code":"\nstr_locate(month.name, 'ber')\n#>       start end\n#>  [1,]    NA  NA\n#>  [2,]    NA  NA\n#>  [3,]    NA  NA\n#>  [4,]    NA  NA\n#>  [5,]    NA  NA\n#>  [6,]    NA  NA\n#>  [7,]    NA  NA\n#>  [8,]    NA  NA\n#>  [9,]     7   9\n#> [10,]     5   7\n#> [11,]     6   8\n#> [12,]     6   8"},{"path":"tidyverse-r.html","id":"the-functions-str_extract-and-str_extract_all","chapter":"5 Tidyverse R","heading":"5.14.11.2.2 The functions str_extract() and str_extract_all()","text":"function:str_extract() extracts first matching pattern string.str_extract_all() extracts matching patterns string.","code":"\nstr_extract(string = month.name, pattern = 'ber')\n#>  [1] NA    NA    NA    NA    NA    NA    NA    NA    \"ber\"\n#> [10] \"ber\" \"ber\" \"ber\""},{"path":"tidyverse-r.html","id":"the-functions-str_view-and-str_view_all","chapter":"5 Tidyverse R","heading":"5.14.11.2.3 The functions str_view() and str_view_all()","text":"functions str_view() str_view_all() Views HTML rendering regular expression match, first matching first occurrence later occurrences.","code":"\nstr_view(month.name, 'uary')"},{"path":"tidyverse-r.html","id":"regex-operations-1","chapter":"5 Tidyverse R","heading":"5.14.11.3 Regex Operations","text":"matching spacesmatching alphabetic charactersmatching numerical digitsmatching letters numbers (alphanumeric characters)matching punctuationmatching letters, numbers, punctuationmatching whitespacematching newline tapmatching metacharactersalternates rangesgroupsanchorsquantifiers","code":"\nvar <- c('2020 01 01', '2019 03 31', '2018 06 30')\nstr_replace_all(var, '[[:space:]]', '-')\n#> [1] \"2020-01-01\" \"2019-03-31\" \"2018-06-30\"\nstr_replace_all(var, '\\\\s', '-')\n#> [1] \"2020-01-01\" \"2019-03-31\" \"2018-06-30\"\nstr(str_split(var, '\\\\s'))\n#> List of 3\n#>  $ : chr [1:3] \"2020\" \"01\" \"01\"\n#>  $ : chr [1:3] \"2019\" \"03\" \"31\"\n#>  $ : chr [1:3] \"2018\" \"06\" \"30\"\nstr_replace_all(var, '\\\\S', '-')\n#> [1] \"---- -- --\" \"---- -- --\" \"---- -- --\"\nvar <- 'a1b2c3d4e5f'\nstr_replace_all(var, '[[:alpha:]]', '')\n#> [1] \"12345\"\n# lowercase letters\nstr_replace_all(month.name, '[[:lower:]]', '')\n#>  [1] \"J\" \"F\" \"M\" \"A\" \"M\" \"J\" \"J\" \"A\" \"S\" \"O\" \"N\" \"D\"\nvar <- 'a1b2c3d4e5f'\nstr_replace_all(var, '[[:digit:]]', '')\n#> [1] \"abcdef\"\nstr_replace_all(var, '\\\\d', '')\n#> [1] \"abcdef\"\nvar <- 'a1@; 2#4c $8`*%f^!1~0&^h*()j'\nstr_replace_all(var, '[[:alnum:]]', '')\n#> [1] \"@; # $`*%^!~&^*()\"\n\nstr_replace_all(var, '[[:xdigit:]]', '')\n#> [1] \"@; # $`*%^!~&^h*()j\"\n\nstr_replace_all(var, '\\\\w', '')\n#> [1] \"@; # $`*%^!~&^*()\"\nvar <- 'a1@; 2#4c $8`*%f^!1~0&^h*()j'\nstr_replace_all(var, '[[:punct:]]', '')\n#> [1] \"a1 24c $8`f^1~0^hj\"\n\nstr_replace_all(var, '\\\\W', '')\n#> [1] \"a124c8f10hj\"\nvar <- 'a1@; 2#4c $8`*%f^!1~0&^h*()j'\nstr_replace_all(var, '[[:graph:]]', ' ')\n#> [1] \"                            \"\n\nstr_replace_all(var, '.', ' ')\n#> [1] \"                            \"\nstr_replace_all(c(' 2020-01-01 ', ' 2019-03-31 ', ' 2018-06-30 '), '\\\\s', '')\n#> [1] \"2020-01-01\" \"2019-03-31\" \"2018-06-30\"\ncat('good morning \\n i am fru kinglsy \\n i will be your instructor')\n#> good morning \n#>  i am fru kinglsy \n#>  i will be your instructor\n\n# replacing new line\nstr_replace_all('good morning \\n i am fru kinglsy \\n i will be your instructor', '\\\\n', '\\t')\n#> [1] \"good morning \\t i am fru kinglsy \\t i will be your instructor\"\ncat(str_replace_all('good morning \\n i am fru kinglsy \\n i will be your instructor', '\\\\n', '\\t'))\n#> good morning      i am fru kinglsy    i will be your instructor\n\n# replacing tab\nstr_replace_all('good morning \\t i am fru kinglsy \\t i will be your instructor', '\\\\t', '\\n')\n#> [1] \"good morning \\n i am fru kinglsy \\n i will be your instructor\"\ncat(str_replace_all('good morning \\t i am fru kinglsy \\t i will be your instructor', '\\\\t', '\\n'))\n#> good morning \n#>  i am fru kinglsy \n#>  i will be your instructor\nsales <- c('$25000', '$20000', '$22500', '$24000', '$30000', '$35000')\nstr_replace(sales, '\\\\$', '')\n#> [1] \"25000\" \"20000\" \"22500\" \"24000\" \"30000\" \"35000\"\n\nsales <- c('+25000', '+20000', '+22500', '+24000', '+30000', '+35000')\nstr_replace(sales, '\\\\+', '')\n#> [1] \"25000\" \"20000\" \"22500\" \"24000\" \"30000\" \"35000\"\n\ndates <- c('01.01.2012', '01.02.2012', '01.03.2012', '01.04.2012', '01.05.2012', '01.06.2012')\nstr_replace_all(dates, '\\\\.', '-')\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n\ndates <- c('01*01*2012', '01*02*2012', '01*03*2012', '01*04*2012', '01*05*2012', '01*06*2012')\nstr_replace_all(dates, '\\\\*', '-')\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n\ndates <- c('01^01^2012', '01^02^2012', '01^03^2012', '01^04^2012', '01^05^2012', '01^06^2012')\nstr_replace_all(dates, '\\\\^', '-')\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n\ndates <- c('01|01|2012', '01|02|2012', '01|03|2012', '01|04|2012', '01|05|2012', '01|06|2012')\nstr_replace_all(dates, '\\\\|', '-')\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n\ndates <- c('01\\\\01\\\\2012', '01\\\\02\\\\2012', '01\\\\03\\\\2012', '01\\\\04\\\\2012', '01\\\\05\\\\2012', '01\\\\06\\\\2012')\nstr_replace_all(dates, '\\\\\\\\', '-')\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n\ndates <- c('01\\\\.01\\\\.2012', '01\\\\.02\\\\.2012', '01\\\\.03\\\\.2012', '01\\\\.04\\\\.2012', '01\\\\.05\\\\.2012', '01\\\\.06\\\\.2012')\nstr_replace_all(dates, '\\\\\\\\\\\\.', '-')\n#> [1] \"01-01-2012\" \"01-02-2012\" \"01-03-2012\" \"01-04-2012\"\n#> [5] \"01-05-2012\" \"01-06-2012\"\n# either or\nstr_view_all(month.name, 'uary|ember|ober', '*')\nstr_subset(pattern = '(s{2})e', state.name)\n#> [1] \"Tennessee\"\n# start of a string\nstr_replace_all(month.name, '^J', 'j')\n#>  [1] \"january\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"june\"      \"july\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\n\n# end of a string\nstr_replace_all(month.name, 'ber$', 'ba')\n#>  [1] \"January\"  \"February\" \"March\"    \"April\"    \"May\"     \n#>  [6] \"June\"     \"July\"     \"August\"   \"Septemba\" \"Octoba\"  \n#> [11] \"Novemba\"  \"Decemba\"\n# match 's' zero or one time\nstr_subset(month.name, 's?')\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\n# match 'J' one or more times\nstr_subset(month.name, 'J+')\n#> [1] \"January\" \"June\"    \"July\"\n# match 'e' one or more times\nstr_subset(state.name, 'e+')\n#>  [1] \"Connecticut\"   \"Delaware\"      \"Georgia\"      \n#>  [4] \"Kentucky\"      \"Maine\"         \"Massachusetts\"\n#>  [7] \"Minnesota\"     \"Nebraska\"      \"Nevada\"       \n#> [10] \"New Hampshire\" \"New Jersey\"    \"New Mexico\"   \n#> [13] \"New York\"      \"Oregon\"        \"Pennsylvania\" \n#> [16] \"Rhode Island\"  \"Tennessee\"     \"Texas\"        \n#> [19] \"Vermont\"       \"West Virginia\"\n# matched 'y', zero or more times\nstr_subset(month.name, 'y*')\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\n# matched 'a', zero or more times\nstr_subset(month.name, 'a*')\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\"\n# match 'a' zero or more times and 'y'\nstr_subset(month.name, 'a*y')\n#> [1] \"January\"  \"February\" \"May\"      \"July\"\n# match 'y' zero or more times and 'a'\nstr_subset(month.name, 'y*a')\n#> [1] \"January\"  \"February\" \"March\"    \"May\"\n# match 's', exactly 2 times\nstr_subset(state.name, \"s{2}\")\n#> [1] \"Massachusetts\" \"Mississippi\"   \"Missouri\"     \n#> [4] \"Tennessee\"\n# match 's', exactly 1 or more times\nstr_subset(state.name, \"s{1,}\")\n#>  [1] \"Alaska\"        \"Arkansas\"      \"Illinois\"     \n#>  [4] \"Kansas\"        \"Louisiana\"     \"Massachusetts\"\n#>  [7] \"Minnesota\"     \"Mississippi\"   \"Missouri\"     \n#> [10] \"Nebraska\"      \"New Hampshire\" \"New Jersey\"   \n#> [13] \"Pennsylvania\"  \"Rhode Island\"  \"Tennessee\"    \n#> [16] \"Texas\"         \"Washington\"    \"West Virginia\"\n#> [19] \"Wisconsin\"\n# match 's', exactly 1 or 2 times\nstr_subset(state.name, \"s{1,2}\")\n#>  [1] \"Alaska\"        \"Arkansas\"      \"Illinois\"     \n#>  [4] \"Kansas\"        \"Louisiana\"     \"Massachusetts\"\n#>  [7] \"Minnesota\"     \"Mississippi\"   \"Missouri\"     \n#> [10] \"Nebraska\"      \"New Hampshire\" \"New Jersey\"   \n#> [13] \"Pennsylvania\"  \"Rhode Island\"  \"Tennessee\"    \n#> [16] \"Texas\"         \"Washington\"    \"West Virginia\"\n#> [19] \"Wisconsin\""},{"path":"modern-graphics.html","id":"modern-graphics","chapter":"6 Modern graphics","heading":"6 Modern graphics","text":"","code":""},{"path":"modern-graphics.html","id":"overview","chapter":"6 Modern graphics","heading":"6.1 Overview","text":"ggplot2 created Hadley Wickham back 2005 implementation Leland Wilkinson’s grammar graphics.\ngeneral idea behind grammar graphics plot can broken different elements assembled adding elements together. reasoning foundation popular data visualization package ggplot2.ggplot2 built premise graphically data can represented either:Points e.g. case scatter plotsLines e.g. case line plotsBars e.g. case histograms bar plotsOr combination e.g. dot plotThese collectively known geometric objects. geometric objects can different attributes (colours, shape, size). attributes can either mapped set plotting.Mapping simply means colour, shape size added manner linked underlying data represented geometric objects. add information understanding plot often changes underlying data changes.setting, hand, linked underlying data rather adds beauty information. add little information, setting done care especially using size shape.ggplot2 consist seven layers :data: holds data plottedgeom: determines type plot, type geometric object used e.g. geom_point(), geom_line(), geom_bar(), etc.aesthetics: maps data attributes (colour, shape, size) geomstat: performs statistical transformationposition adjustment: determines elements positioned plot relative otherscoordinate-system: manipulates coordinate systemfaceting: used creating subplots","code":"\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(gapminder)\ndata(gapminder)\n\n# data preparation\ngapminder_2007 <- gapminder %>%\n  filter(year == '2007' & continent != 'Oceania') %>%\n  select(-3) %>%\n  mutate(pop = round(pop/1e6, 2))\n\nhead(gapminder_2007)\n#> # A tibble: 6 x 5\n#>   country     continent lifeExp   pop gdpPercap\n#>   <fct>       <fct>       <dbl> <dbl>     <dbl>\n#> 1 Afghanistan Asia         43.8  31.9      975.\n#> 2 Albania     Europe       76.4   3.6     5937.\n#> 3 Algeria     Africa       72.3  33.3     6223.\n#> 4 Angola      Africa       42.7  12.4     4797.\n#> 5 Argentina   Americas     75.3  40.3    12779.\n#> 6 Austria     Europe       79.8   8.2    36126."},{"path":"modern-graphics.html","id":"the-data-layer","chapter":"6 Modern graphics","heading":"6.2 The data layer","text":"function ggplot() initializes ggplot object. can used pass data aesthetic. Data aesthetic passed becomes available subsequent layers can overridden need within subsequent layers.","code":"\n# initializing plot with data\nggplot(data = gapminder_2007)\n# mapping data to x and y-axis\nggplot(data = gapminder_2007,  mapping = aes(y = lifeExp, x = gdpPercap))"},{"path":"modern-graphics.html","id":"the-geom-layer","chapter":"6 Modern graphics","heading":"6.3 The geom layer","text":"geom layer declares type plot produced. next chapter.","code":"\n# adding the geom layer\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point()\n\n# Both data and axis can be declared within the geom layer.\nggplot(data = gapminder_2007) + \n  geom_point(mapping = aes(y = lifeExp, x = gdpPercap))\n\nggplot() + \n  geom_point(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap))"},{"path":"modern-graphics.html","id":"shape","chapter":"6 Modern graphics","heading":"6.4 Shape","text":"Shapes controlled using argument shape.","code":""},{"path":"modern-graphics.html","id":"setting-shapes","chapter":"6 Modern graphics","heading":"6.4.1 Setting shapes","text":"Shapes set passing shape geom_* must placed outside aes() aes() meant mapping. Shape expects arguments pch base graphics , integers ranging 1 25 characters.","code":"\n# changing shapes\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap), shape = 21)\n# using a character\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap), shape = '*')"},{"path":"modern-graphics.html","id":"mapping-shapes","chapter":"6 Modern graphics","heading":"6.4.2 Mapping shapes","text":"mapping data shapes allows us shapes groups categories example different shapes different continents. map data shapes, shape argument passed categorical variable placed within aes().","code":"\n# shapes by continent\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, shape = continent))"},{"path":"modern-graphics.html","id":"scaling-shapes","chapter":"6 Modern graphics","heading":"6.4.3 Scaling shapes","text":"function scale_shape_manual() used scale shapes determine shapes use plot.","code":"\n# using shapes ranging from 15 to 19\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, shape = continent)) +\n  scale_shape_manual(values = 15:19)"},{"path":"modern-graphics.html","id":"size","chapter":"6 Modern graphics","heading":"6.5 Size","text":"size controlled using argument size=.","code":""},{"path":"modern-graphics.html","id":"setting-size","chapter":"6 Modern graphics","heading":"6.5.1 Setting size","text":"","code":"\n# adjusting size\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap), size = 3)"},{"path":"modern-graphics.html","id":"mapping-size","chapter":"6 Modern graphics","heading":"6.5.2 Mapping size","text":"Size mapped assigning continuous variable placing within aes().","code":"\n# size by population\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, size = pop), shape = 21)"},{"path":"modern-graphics.html","id":"colour","chapter":"6 Modern graphics","heading":"6.6 Colour","text":"Colour controlled using argument color= colour=.","code":""},{"path":"modern-graphics.html","id":"setting-colours","chapter":"6 Modern graphics","heading":"6.6.1 Setting colours","text":"","code":"\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap), colour = 'darkblue', size = 3, shape = 19)"},{"path":"modern-graphics.html","id":"fill-vs-colour","chapter":"6 Modern graphics","heading":"6.6.2 Fill vs colour","text":"shapes 21 25 bars, argument fill used fill shapes colour used colour borders (outlines).","code":"\n# using colour and fill\nggplot(gapminder_2007) + \ngeom_point(aes(y = lifeExp, x = gdpPercap), colour = 'darkblue', fill = 'lightblue', \n           size = 3, shape = 21)"},{"path":"modern-graphics.html","id":"stroke","chapter":"6 Modern graphics","heading":"6.6.3 Stroke","text":"border outline size controlled using argument stroke=.","code":"\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap), colour = 'darkblue', fill = 'lightblue', \n           size = 3, shape = 21, stroke = 1)"},{"path":"modern-graphics.html","id":"transparency","chapter":"6 Modern graphics","heading":"6.6.4 Transparency","text":"Transparency controlled argument alpha=. accepts values 0 1.","code":"\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap), \n           colour = 'darkblue', fill = 'lightblue', size = 3, shape = 21, \n           stroke = 1, alpha = 0.5)"},{"path":"modern-graphics.html","id":"mapping-colours-to-discrete-variables","chapter":"6 Modern graphics","heading":"6.6.5 Mapping colours to discrete variables","text":"shapes, colours mapped assigning discrete variable placing within aes().","code":"\n# colour by continent\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, \n             shape = 19, alpha = 0.5)\n# fill by continent\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, fill = continent), \n             colour = 'darkblue', size = 4, shape = 21, alpha = 0.5, stroke = 1)"},{"path":"modern-graphics.html","id":"default-colours","chapter":"6 Modern graphics","heading":"6.6.6 Default colours","text":"functions scale_colour_hue() scale_fill_hue() sets default colour fill scale discrete variables.","code":"\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, \n             shape = 19, alpha = 0.5) +\n  scale_colour_hue()\n# Adjust luminosity and chroma\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, \n             shape = 19, alpha = 0.5) +\n  scale_colour_hue(l = 70, c = 150)\n\n\n# Changing the range of hues used\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, \n             shape = 19, alpha = 0.5) +\n  scale_colour_hue(h = c(0, 90))"},{"path":"modern-graphics.html","id":"grey-colours","chapter":"6 Modern graphics","heading":"6.6.7 Grey colours","text":"function scale_colour_grey() defines grey colours discrete variables.","code":"\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, \n             shape = 19, alpha = 0.5) +\n  scale_colour_grey()"},{"path":"modern-graphics.html","id":"manually-specifying-colours","chapter":"6 Modern graphics","heading":"6.6.8 Manually specifying colours","text":"functions scale_colour_manual() scale_fill_manual() specify colour fill, respectively.","code":"\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, \n             shape = 19, alpha = 0.5) +\n  scale_colour_manual(values = c('lightblue', 'lightgreen', 'purple', 'orange', 'pink'))"},{"path":"modern-graphics.html","id":"mapping-colours-by-continuous-variables","chapter":"6 Modern graphics","heading":"6.6.9 Mapping colours by continuous variables","text":"sizes, colours mapped assigning continuous variable placing within aes().","code":"\n# colour by pop\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, size = pop, col = pop), shape = 19) +\n  scale_radius(range = c(1, 24))\n# reversing colour with desc()\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, size = pop, colour = desc(pop)), shape = 19) +\n  scale_radius(range = c(1, 24))"},{"path":"modern-graphics.html","id":"manually-defining-colours","chapter":"6 Modern graphics","heading":"6.6.10 Manually defining colours","text":"functions:scale_colour_gradient() scale_fill_gradient() defines two-colour gradient\nscale_colour_gradient2() scale_fill_gradient2() defines three-colour gradient (low-mid-high)\nscale_colour_gradientn() scale_fill_gradientn() defines three colour gradient","code":"\n# two colour gradient\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, size = pop, col = desc(log(pop))), \n           shape = 19, alpha = 0.8) +\n  scale_radius(range = c(1, 24)) +\n  scale_colour_gradient(low = 'lightgreen', high = 'darkgreen')\n# three colour gradient\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, size = pop, col = pop), \n           shape = 19, alpha = 0.8) +\n  scale_radius(range = c(1, 24)) +\n  scale_colour_gradient2(low = 'blue', mid = 'red', high = 'green', \n                         midpoint = mean(gapminder_2007$pop))\n# five colour gradient\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, size = pop, col = pop), shape = 19) +\n  scale_radius(range = c(1, 24)) +\n  scale_colour_gradientn(colors = c('lightblue', 'lightgreen', 'purple', 'orange', 'pink'))"},{"path":"modern-graphics.html","id":"colour-palettes","chapter":"6 Modern graphics","heading":"6.7 Colour palettes","text":"","code":""},{"path":"modern-graphics.html","id":"rcolorbrewer","chapter":"6 Modern graphics","heading":"6.7.1 rcolorbrewer","text":"RcolorBrewer R’s implementation ColorBrewer. classifies colours three board classes:seq (sequential): suited data order, progressing low high\ndiv (diverging): suited data two extremes, one positive negative values\nqual (qualitative): suited data colour bears meaning. (nominal categorical data)functions scale_colour_brewer() scale_fill_brewer() defines colour scale discrete variables.argument direction reverses order colours.type palette specified argument type.functions scale_colour_distiller() scale_fill_distiller() defines colour scale continuous variables.","code":"\nlibrary(RColorBrewer)\n# displays all the various palettes in RcolorBrewer\ndisplay.brewer.all()\n\n\n# display sequential colours\ndisplay.brewer.all(type = \"seq\")\n\n\n# display diverging colours\ndisplay.brewer.all(type = \"div\")\n\n\n# display qualitative colours\ndisplay.brewer.all(type = \"qual\")\n\n\n# displaying a particular colour palette\ndisplay.brewer.pal(n = 8, name = 'Dark2')\n# discrete variable\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, shape = 19, \n             alpha = 0.5) +\n  scale_colour_brewer(palette = \"Dark2\")\n# reversing colours with direction\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, shape = 19, \n             alpha = 0.5) +\n  scale_colour_brewer(palette = \"Dark2\", direction = -1)\n# specifying palette class\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, shape = 19, \n             alpha = 0.5) +\n  scale_colour_brewer(type = 'qual', palette = 1)\n# specifying palette class\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, shape = 19, \n             alpha = 0.5) +\n  scale_colour_brewer(type = 'seq', palette = 3)\n# continuous variable\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, size = pop, col = log(pop)), shape = 19) +\n  scale_radius(range = c(1, 24)) +\n  scale_colour_distiller(palette = 'Blues')\n# continuous variable\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, size = pop, col = log(pop)), shape = 19) +\n  scale_radius(range = c(1, 24)) +\n  scale_colour_distiller(palette = 1, direction = 1)"},{"path":"modern-graphics.html","id":"the-viridis-color-palettes","chapter":"6 Modern graphics","heading":"6.7.2 The viridis color palettes","text":"viridis package brings R colour scales created Stéfan van der Walt Nathaniel Smith Python data visualization package matplotlib. viridis comes following colour palettes:Viridis (default)magmaplasmainfernoThe functions scale_colour_viridis() scale_fill_viridis() defines colour scale discrete continuous variables, discrete = TRUE indicating discrete discrete = FALSE indicating continuous. specific, use scale_colour_viridis_d() discrete andscale_colour_viridis_c() continuous.","code":"\nlibrary(viridis)\n# discrete variable\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, \n           shape = 19, alpha = 0.8) +\n  scale_colour_viridis(discrete = TRUE)\n# discrete variable\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, colour = continent), size = 3, \n             shape = 19, alpha = 0.8) +\n  scale_colour_viridis_d(option = 'plasma')\n\n# continuous variable\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, size = pop, col = log(pop)), shape = 19) +\n  scale_radius(range = c(1, 24)) +\n  scale_colour_viridis()\n# continuous variable\nggplot(gapminder_2007) + \n  geom_point(aes(y = lifeExp, x = gdpPercap, size = pop, col = log(pop)), shape = 19) +\n  scale_radius(range = c(1, 24)) +\n  scale_colour_viridis_c(option = 'inferno', direction = -1, alpha = 0.5)"},{"path":"modern-graphics.html","id":"text","chapter":"6 Modern graphics","heading":"6.8 Text","text":"function geom_text() adds text plot.","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(size = pop, colour = continent)) +\n  scale_size_area(max_size = 12) +\n  geom_text(aes(label = country), size = 2, alpha = 0.5)"},{"path":"modern-graphics.html","id":"fitting-a-regression-line-to-a-plot","chapter":"6 Modern graphics","heading":"6.9 Fitting a regression line to a plot","text":"function geom_smooth() adds regression line plot. use arguments:method = lm linear,\nmethod = loess loess \nse = FALSE remove confidence intervals.","code":"\n# adding a linear line\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(colour = 'red', size = 3, shape = 19, alpha = 0.5, stroke = 1) +\n  geom_smooth(method = lm)\n# changing to loess\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(colour = 'red', size = 3, shape = 19, alpha = 0.5, stroke = 1) +\n  geom_smooth(method = loess)\n# removing the confidence intervals\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(colour = 'red', size = 3, shape = 19, alpha = 0.5, stroke = 1) +\n  geom_smooth(method = loess, se = FALSE)"},{"path":"modern-graphics.html","id":"adding-some-rug","chapter":"6 Modern graphics","heading":"6.10 Adding some rug","text":"function geom_rug() adds rug plot.","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(colour = 'red', size = 3, shape = 19, alpha = 0.5, stroke = 1) +\n  geom_smooth(method = loess, se = FALSE) +\n  geom_rug()"},{"path":"modern-graphics.html","id":"position-adjustment","chapter":"6 Modern graphics","heading":"6.11 Position adjustment","text":"Position adjustments determine arrange geoms otherwise occupy space.","code":"\nggplot() + \n  geom_point(data = gapminder_2007, aes(y = 0, x = gdpPercap, colour = continent), \n             alpha = 0.5, size = 3)\n# changing the position to jitter\nggplot() + \n  geom_point(data = gapminder_2007, aes(y = 0, x = gdpPercap, colour = continent), \n             alpha = 0.5, size = 3, position = \"jitter\")"},{"path":"modern-graphics.html","id":"coordinate-system","chapter":"6 Modern graphics","heading":"6.12 Coordinate system","text":"function coord_cartesian() zooms plot. expects ylim /xlim arguments.function coord_fixed() controls aspect ratio. expects ratio y/x.function coord_flip() flips plot along diagonal.","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(size = pop, colour = continent)) +\n  scale_size_area(max_size = 12) +\n  geom_text(aes(label = country), size = 2, alpha = 0.5) +\n  coord_cartesian(ylim = c(60, 85), xlim = c(0, 10000))\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(size = pop, colour = continent)) +\n  scale_size_area(max_size = 12) +\n  coord_fixed(ratio = 500)\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(size = pop, colour = continent)) +\n  scale_size_area(max_size = 12) +\n  coord_flip()"},{"path":"modern-graphics.html","id":"faceting-layer","chapter":"6 Modern graphics","heading":"6.13 Faceting layer","text":"functions facet_grid() facet_wrap() controls faceting. former forms matrix panels defined row column faceting variables later wraps 1d sequence panels 2d.default, axis scale, using argument scales = ‘free’ can render scales plot independent.","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap, colour = continent)) + \n  geom_point(size = 3, shape = 19, alpha = 0.5, stroke = 1) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  facet_grid(.~ continent)\n\n\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap, colour = continent)) + \n  geom_point(size = 3, shape = 19, alpha = 0.5, stroke = 1) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  facet_grid(continent ~ .)\n\n\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap, colour = continent)) + \n  geom_point(size = 3, shape = 19, alpha = 0.5, stroke = 1) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  facet_grid(continent ~ ., )\n\n\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap, colour = continent)) + \n  geom_point(size = 3, shape = 19, alpha = 0.5, stroke = 1) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  facet_wrap(continent ~ ., )\n# independent axis\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap, colour = continent)) + \n  geom_point(size = 3, shape = 19, alpha = 0.5, stroke = 1) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  facet_wrap(continent ~ ., scales = 'free')"},{"path":"modern-graphics.html","id":"plot-elements","chapter":"6 Modern graphics","heading":"6.14 Plot elements","text":"","code":""},{"path":"modern-graphics.html","id":"title-captions-and-labels","chapter":"6 Modern graphics","heading":"6.14.1 Title, captions and labels","text":"function labs() used add title labels.function:ggtitle() adds title plotxlab() adds x-axis labelylab() adds y-axis labellabs() adds ","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(size = pop, colour = continent)) +\n  scale_size_area(max_size = 12) +\n  labs(y = 'Life Expectancy', x = 'GDP per capita', title = 'Life Expectancy vs GDP per capita')\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(size = pop, colour = continent)) +\n  scale_size_area(max_size = 12) +\n  ggtitle('Life Expectancy vs GDP per capita', \n          subtitle = \"Below $4000, Life expectancy does not vary with GDP\") +\n  ylab('Life Expectancy') +\n  xlab('GDP per capita')"},{"path":"modern-graphics.html","id":"legend","chapter":"6 Modern graphics","heading":"6.14.2 Legend","text":"function theme() used customize non-data components plot. shall use customize legends.Legend position\nargument legend.position determines position legend. accepts ‘bottom,’ ‘left,’ ‘top’ ‘right.’Removing legends using theme()\nargument legend.position = “none” removes legends plot.","code":"\n# position legend at the bottom\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(colour = continent)) +\n  theme(legend.position = \"bottom\")\n# removing legend\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(size = pop, colour = continent)) +\n  scale_size_area(max_size = 12) +\n  theme(legend.position = \"none\")"},{"path":"modern-graphics.html","id":"removing-legends-using-guides","chapter":"6 Modern graphics","heading":"6.14.3 Removing legends using guides()","text":"function guides() removes legends specific scale. legend scale can removed passing either ‘none’ FALSE .","code":"\n# removing the size legend\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(size = pop, colour = continent)) +\n  scale_size_area(max_size = 12) +\n  theme(legend.position = \"top\") +\n  guides(size = FALSE)"},{"path":"modern-graphics.html","id":"removing-legend-using-geom","chapter":"6 Modern graphics","heading":"6.14.4 Removing legend using geom","text":"argument show.legend = F within geom, removes legend geom.","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(size = pop, colour = continent), show.legend = F) +\n  scale_size_area(max_size = 12) +\n  theme(legend.position = \"top\")"},{"path":"modern-graphics.html","id":"legend-title","chapter":"6 Modern graphics","heading":"6.14.4.1 Legend title","text":"argument name within scale_* used control legend title.####Changing legend labelsThe argument label within scale_* used change legend labels.","code":"\n# renaming legend\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(colour = continent)) +\n  scale_colour_brewer(palette = \"Dark2\", name = 'Continents:') +\n  theme(legend.position = \"top\")\n# drop legend title\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(colour = continent)) +\n  scale_colour_brewer(palette = \"Dark2\", name = '') +\n  theme(legend.position = \"top\")\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(colour = continent)) +\n  scale_colour_brewer(palette = \"Dark2\", name = '', label = c('AF', 'AM', 'AS', 'EU', 'OC')) +\n  theme(legend.position = \"top\")"},{"path":"modern-graphics.html","id":"built-in-themes","chapter":"6 Modern graphics","heading":"6.14.5 Built-in themes","text":"ggplot2 comes built-themes customizing plots. includes:theme_grey()\ntheme_bw()\ntheme_linedraw()\ntheme_light()\ntheme_dark()\ntheme_minimal()\ntheme_classic()\ntheme_void()\ntheme_test()","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(colour = continent)) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  theme_bw() +\n  theme(legend.position = \"top\")\nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(colour = continent)) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  theme_bw() +\n  theme_classic() +\n  theme(legend.position = \"bottom\")"},{"path":"modern-graphics.html","id":"saving-plots","chapter":"6 Modern graphics","heading":"6.15 Saving plots","text":"two ways saving plots ggplot2 using:graphic devicesggsave()","code":""},{"path":"modern-graphics.html","id":"saving-plots-using-graphic-devices","chapter":"6 Modern graphics","heading":"6.15.1 Saving plots using graphic devices","text":"method, must first open graphic device using following rendering functions:pdf()svg()png()jpeg()tiff()bmp()produce plot finally, close device using dev.().","code":"\n# preparing plot\nplt <- \nggplot(data = gapminder_2007, aes(y = lifeExp, x = gdpPercap)) + \n  geom_point(alpha = 0.5, stroke = 1, aes(size = pop, colour = continent)) +\n  scale_size_area(max_size = 12) +\n  theme(legend.position = \"top\") +\n  guides(size = FALSE) \n\n# initiating device\npdf('world.pdf', width = 8, height = 8)\n\n# saving plot\nprint(plt)\n\n# closing device\ndev.off()\n#> png \n#>   2\n\n# initiating device\npng('world.png', width = 800, height = 600)\n\n# saving plot\nprint(plt)\n\n# closing device\ndev.off()\n#> png \n#>   2\n\n# checking files\nfile.exists(c('world.pdf', 'world.png'))\n#> [1] TRUE TRUE\n\n# removing files\nfile.remove(c('world.pdf', 'world.png'))\n#> [1] TRUE TRUE"},{"path":"modern-graphics.html","id":"saving-plots-using-ggsave","chapter":"6 Modern graphics","heading":"6.15.2 Saving plots using ggsave()","text":"function ggsave() saves plot directly disc.","code":"\nggsave('world.pdf', plt, width = 16, height = 16, units = 'cm')\nggsave('world.png', plt, width = 8, height = 8, units = 'cm')\n\n# checking files\nfile.exists(c('world.pdf', 'world.png'))\n#> [1] TRUE TRUE\n\n# removing files\nfile.remove(c('world.pdf', 'world.png'))\n#> [1] TRUE TRUE"},{"path":"modern-graphics.html","id":"statistical-plots-with-ggplot2","chapter":"6 Modern graphics","heading":"6.16 Statistical plots with ggplot2","text":"","code":""},{"path":"modern-graphics.html","id":"bar-and-column-chart","chapter":"6 Modern graphics","heading":"6.16.1 Bar and column chart","text":"functions geom_bar() geom_col() used create bar charts. former works categorical column, returning bar count category, later requires numeric column y-axis category names x-axis.","code":"\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(gapminder)\nlibrary(RColorBrewer)\n\ngapminder_2007 <- \ngapminder %>%\nfilter(year == '2007' & continent != 'Oceania') %>%\nmutate(pop = round(pop/1e6, 1)) %>%\nselect(-year)\nhead(gapminder_2007)\n#> # A tibble: 6 x 5\n#>   country     continent lifeExp   pop gdpPercap\n#>   <fct>       <fct>       <dbl> <dbl>     <dbl>\n#> 1 Afghanistan Asia         43.8  31.9      975.\n#> 2 Albania     Europe       76.4   3.6     5937.\n#> 3 Algeria     Africa       72.3  33.3     6223.\n#> 4 Angola      Africa       42.7  12.4     4797.\n#> 5 Argentina   Americas     75.3  40.3    12779.\n#> 6 Austria     Europe       79.8   8.2    36126.\n\n# count of countries by continent\nggplot(gapminder_2007, aes(x = continent)) + \n   geom_bar()\n\n\n# preparing data\npop_2007 <- \ngapminder_2007 %>%\ngroup_by(continent) %>%\nsummarise(pop = sum(pop, na.rm = T))\npop_2007\n#> # A tibble: 4 x 2\n#>   continent   pop\n#>   <fct>     <dbl>\n#> 1 Africa     930.\n#> 2 Americas   899.\n#> 3 Asia      3812.\n#> 4 Europe     586.\n\n# population by continent\npop_2007 %>%\nggplot(aes(x = continent, y = pop)) + \n   geom_col()\n\n\n# sorting columns ascending\nggplot(pop_2007, aes(x = reorder(continent, pop), y = pop)) + \n   geom_col()\n# sorting columns descending\nggplot(pop_2007, aes(x = reorder(continent, desc(pop)), y = pop)) + \n   geom_col()"},{"path":"modern-graphics.html","id":"borders-and-colours","chapter":"6 Modern graphics","heading":"6.16.1.1 Borders and colours","text":"argument:fill=: fills barscolour=: colours borderssize=: controls border sizewidth=: controls bar width","code":"\nggplot(pop_2007, aes(x = reorder(continent, desc(pop)), y = pop)) + \n   geom_col(fill = 'lightgreen', colour = 'darkgreen', alpha = 0.5, size = 0.8, width = 0.7) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"adding-labels","chapter":"6 Modern graphics","heading":"6.16.1.2 Adding labels","text":"functions geom_text() geom_label() used add data labels.","code":"\nggplot(data = pop_2007, aes(x = reorder(continent, desc(pop)), y = pop)) + \n   geom_col(fill = 'lightgreen', colour = 'darkgreen', alpha = 0.5) +\n   geom_text(aes(label = round(pop)), nudge_y = 90) +\n   theme_classic()\n# placing label at centre of bars\nggplot(data = pop_2007) + \ngeom_col(aes(x = reorder(continent, desc(pop)), y = pop), \n         fill = 'lightgreen', colour = 'darkgreen', alpha = 0.5) +\n   geom_label(aes(x = reorder(continent, desc(pop)), \n                  y = pop/2, label = round(pop)), nudge_y = 100) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"customizing-plot","chapter":"6 Modern graphics","heading":"6.16.1.3 Customizing plot","text":"","code":"\nggplot(pop_2007, aes(x = reorder(continent, desc(pop)), y = pop)) + \n   geom_col(fill = 'lightgreen', colour = 'darkgreen', alpha = 0.5) +\n   geom_text(aes(label = round(pop)), nudge_y = 90) + \n   ggtitle('2007 World Population by Continents', \n           subtitle = \"Asia accounts for more than half of the world's population\") +\n   xlab('Continents') +\n   ylab('Pop in Millions') +\n   theme_classic()"},{"path":"modern-graphics.html","id":"column-chart","chapter":"6 Modern graphics","heading":"6.16.1.4 Column chart","text":"Using function coord_flip(), can flip bar chart column chart.","code":"\n# producing a column chart\nggplot(pop_2007, aes(x = reorder(continent, pop), y = pop)) + \n   geom_col(fill = 'lightgreen', colour = 'darkgreen', alpha = 0.5) +\n   labs(x = 'Continents',y = 'Pop in Millions',title = '2007 World Population by Continents') +\n   geom_label(aes(label = round(pop), y = pop/2)) +\n   theme_classic() +\n   coord_flip()"},{"path":"modern-graphics.html","id":"stacked-bar-chart","chapter":"6 Modern graphics","heading":"6.16.1.5 Stacked bar chart","text":"create stacked column bars, use fill argument mapping continuous variable.","code":"\n# preparing data\ndt <- \ngapminder %>%\nfilter(year >= 1992) %>%\ngroup_by(year, continent) %>%\nsummarise(pop = round(sum(pop/1e6, na.rm = T)))\nhead(dt)\n#> # A tibble: 6 x 3\n#> # Groups:   year [2]\n#>    year continent   pop\n#>   <int> <fct>     <dbl>\n#> 1  1992 Africa      659\n#> 2  1992 Americas    739\n#> 3  1992 Asia       3133\n#> 4  1992 Europe      558\n#> 5  1992 Oceania      21\n#> 6  1997 Africa      744\n\n# producing a stacked bar chart\nggplot(dt, aes(x = as.factor(year), y = pop, fill = reorder(continent, pop))) + \n   geom_col() +\n   theme_classic() +\n   scale_fill_brewer(palette = \"Dark2\")"},{"path":"modern-graphics.html","id":"the-100-stacked-bar-chart","chapter":"6 Modern graphics","heading":"6.16.1.6 The 100% stacked bar chart","text":"create 100% stacked bar chart, set position = \"fill\" inside geom_col().","code":"\nggplot(dt, aes(x = as.factor(year), y = pop, fill = reorder(continent, pop))) + \n   geom_col(position = \"fill\") +\n   theme_classic() +\n   scale_fill_brewer(palette = \"Dark2\")"},{"path":"modern-graphics.html","id":"clustered-bar-chart","chapter":"6 Modern graphics","heading":"6.16.1.7 Clustered bar chart","text":"create clustered bar chart, set position = \"dodge\" inside geom_col().","code":"\nggplot(dt, aes(x = as.factor(year), y = pop, fill = reorder(continent, pop))) + \n   geom_col(position = \"dodge\") +\n   theme_classic() +\n   scale_fill_brewer(palette = \"Dark2\")\n\n\n# adding space between bars\nggplot(dt, aes(x = as.factor(year), y = pop, fill = reorder(continent, pop))) + \n   geom_col(position = position_dodge(width = 1)) +\n   theme_classic() +\n   scale_fill_brewer(palette = \"Dark2\")\n\n\n# adding data labels\nggplot(dt, aes(x = as.factor(year), y = pop, fill = reorder(continent, pop))) + \n   geom_col(position = position_dodge(width = 1)) +\n   theme_classic() +\n   scale_fill_brewer(palette = \"Dark2\") +\n   geom_text(aes(label = round(pop), y = pop), position = position_dodge(0.9), \n             size = 3, vjust = -0.5, hjust = 0.5)"},{"path":"modern-graphics.html","id":"pie-chart","chapter":"6 Modern graphics","heading":"6.16.2 Pie chart","text":"geom producing pie charts using coord_polar(), can produce pie charts.","code":"\n# data\npop_2007\n#> # A tibble: 4 x 2\n#>   continent   pop\n#>   <fct>     <dbl>\n#> 1 Africa     930.\n#> 2 Americas   899.\n#> 3 Asia      3812.\n#> 4 Europe     586.\n\nggplot(pop_2007, aes(y = pop, x = '', fill = continent)) + \n   geom_col() +\n   coord_polar(\"y\", start = 0)"},{"path":"modern-graphics.html","id":"customizing-plot-1","chapter":"6 Modern graphics","heading":"6.16.2.1 Customizing plot","text":"","code":"\nggplot(pop_2007, aes(y = pop, x = '', fill = continent)) + \n   geom_col(colour = grey(0.85), size = 0.5) +\n   coord_polar(\"y\", start = 0) +\n   scale_fill_brewer(palette = \"Dark2\", label = c('Americas', 'Africa', 'Asia', 'Europe')) +\n   theme_minimal() +\n   labs(x = '', y = '') +\n   theme(legend.position = \"top\", \n         axis.ticks = element_blank(), \n         panel.grid=element_blank(), \n         axis.text.x=element_blank(), \n         legend.title = element_blank()\n)"},{"path":"modern-graphics.html","id":"adding-data-labels","chapter":"6 Modern graphics","heading":"6.16.2.2 Adding data labels","text":"","code":"\n# preparing label\npop_2007 %>%\narrange(desc(pop)) %>%\nmutate(label_y = cumsum(pop))\n#> # A tibble: 4 x 3\n#>   continent   pop label_y\n#>   <fct>     <dbl>   <dbl>\n#> 1 Asia      3812.   3812.\n#> 2 Africa     930.   4742.\n#> 3 Americas   899.   5640.\n#> 4 Europe     586.   6227.\n\npop_2007 %>%\narrange(desc(pop)) %>%\nmutate(label_y = cumsum(pop)) %>%\n\nggplot(aes(y = pop, x = '', fill = continent)) + \n   geom_col(colour = grey(0.85), size = 0.5) +\n   coord_polar(\"y\", start = 0) +\n   scale_fill_brewer(palette = \"Dark2\", label = c('Americas', 'Africa', 'Asia', 'Europe')) +\n   theme_minimal() +\n   labs(x = '', y = '') +\n   theme(legend.position = \"top\", \n         axis.ticks = element_blank(), \n         panel.grid=element_blank(), \n         axis.text.x=element_blank(), \n         legend.title = element_blank()) +\n   geom_text(aes(y = label_y, label = round(pop)), hjust = -0.5)\n\n# preparing data\npop_2007 %>%\narrange(desc(pop)) %>%\nmutate(label_y = cumsum(pop)) %>%\nmutate(label_per = round(pop/sum(pop),3))\n#> # A tibble: 4 x 4\n#>   continent   pop label_y label_per\n#>   <fct>     <dbl>   <dbl>     <dbl>\n#> 1 Asia      3812.   3812.     0.612\n#> 2 Africa     930.   4742.     0.149\n#> 3 Americas   899.   5640.     0.144\n#> 4 Europe     586.   6227.     0.094\n\npop_2007 %>%\narrange(desc(pop)) %>%\nmutate(label_y = cumsum(pop)) %>%\nmutate(label_per = round(pop/sum(pop),3)) %>%\n\nggplot(aes(y = pop, x = '', fill = continent)) + \n   geom_col(colour = grey(0.85), size = 0.5) +\n   coord_polar(\"y\", start = 0) +\n   scale_fill_brewer(palette = \"Dark2\") +\n   theme_minimal() +\n   labs(x = '', y = '') +\n   theme(legend.position = \"none\", \n         axis.ticks = element_blank(),\n         panel.grid=element_blank(), \n         axis.text.x=element_blank(), \n         legend.title = element_blank()) +\ngeom_text(aes(y = label_y, label = paste0(continent,':- ', scales::percent(label_per, 0.1))), \n          hjust = 0.1, size = 4, colour = grey(0.25))"},{"path":"modern-graphics.html","id":"dot-plot","chapter":"6 Modern graphics","heading":"6.16.3 Dot plot","text":"","code":""},{"path":"modern-graphics.html","id":"wilkinson-dot-plot","chapter":"6 Modern graphics","heading":"6.16.3.1 Wilkinson dot plot","text":"function geom_dotplot() used create dot plot.","code":"\nggplot(gapminder_2007, aes(x = lifeExp)) +\n   geom_dotplot() +\n   theme_classic()\n\n\nggplot(gapminder_2007, aes(x = lifeExp)) +\n   geom_dotplot(aes(fill = continent), alpha = 0.5, colour = NA) +\n   theme_classic()\n\n\nggplot(gapminder_2007, aes(x = lifeExp)) +\n   geom_dotplot(aes(fill = continent), alpha = 0.5, colour = NA, method = 'histodot') +\n   theme_classic()"},{"path":"modern-graphics.html","id":"grouped-dot-plot","chapter":"6 Modern graphics","heading":"6.16.3.2 Grouped dot plot","text":"","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp, x = continent)) + \n   geom_dotplot(binaxis = 'y', stackdir = 'center') +\n   theme_classic()"},{"path":"modern-graphics.html","id":"customizing-plot-2","chapter":"6 Modern graphics","heading":"6.16.3.3 Customizing plot","text":"","code":"\nggplot(data = gapminder_2007, \naes(y = lifeExp, x = continent, colour = continent, fill = continent)) + \n   geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 0.6, alpha = 0.5) +\n   theme(legend.position = \"none\") +\n   theme_classic()"},{"path":"modern-graphics.html","id":"histogram","chapter":"6 Modern graphics","heading":"6.16.4 Histogram","text":"function geom_histogram() used create histograms.","code":"\nggplot(gapminder_2007) +\n   geom_histogram(aes(x = lifeExp)) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"controlling-the-number-of-bins","chapter":"6 Modern graphics","heading":"6.16.4.1 Controlling the number of bins","text":"argument bins controls number bins.","code":"\nggplot(gapminder_2007) +\n   geom_histogram(aes(x = lifeExp), bins = 10) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"controlling-bin-size","chapter":"6 Modern graphics","heading":"6.16.4.2 Controlling bin size","text":"argument binwidth controls width bins.","code":"\nggplot(gapminder_2007) +\n   geom_histogram(aes(x = lifeExp), binwidth = 5) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"colour-and-fill","chapter":"6 Modern graphics","heading":"6.16.4.3 Colour and fill","text":"","code":"\nggplot(gapminder_2007, aes(x = lifeExp)) + \n   geom_histogram(binwidth = 3, fill = 'black', colour = 'white') +\n   theme_classic()"},{"path":"modern-graphics.html","id":"density-histogram","chapter":"6 Modern graphics","heading":"6.16.4.4 Density Histogram","text":"argument y = ..density.. used create density histogram. default, histograms count combine density plot, need convert density histograms.","code":"\nggplot(gapminder_2007, aes(x = lifeExp, y = ..density..)) + \n   geom_histogram(fill = 'black', colour = 'white', binwidth = 3) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"density-plot","chapter":"6 Modern graphics","heading":"6.16.5 Density plot","text":"function geom_density() creates density plots.","code":"\nggplot(gapminder_2007, aes(x = lifeExp)) + \n   geom_density(colour = 'blue', size = 0.5) +\n   theme_classic()\n\n\n# expanding x-axis\nggplot(gapminder_2007, aes(x = lifeExp)) + \n   geom_density(colour = 'blue', size = 0.5) +\n   theme_classic() +\nxlim(30, 95)\n\n\n# filling area under the curve\nggplot(gapminder_2007, aes(x = lifeExp)) + \n   geom_density(colour = NA, fill = 'lightgreen', alpha = 0.7) +\n   theme_classic() +\n   xlim(30, 95)\n\n\n# fill and colour\nggplot(gapminder_2007, aes(x = lifeExp)) + \n   geom_density(colour = 'blue', fill = 'lightgreen', alpha = 0.7) +\n   theme_classic() +\n   xlim(30, 95)\n\n\n# plotting density with geom_line()\nggplot(gapminder_2007, aes(x = lifeExp)) + \n   geom_line(colour = 3, stat = 'density', size = 0.8, adjust = 0.5) +\n   geom_line(colour = 4, stat = 'density', size = 0.8, adjust = 1) +\n   geom_line(colour = 5, stat = 'density', size = 0.8, adjust = 1.5) +\n   geom_line(colour = 6, stat = 'density', size = 0.8, adjust = 2) +\n   theme_classic() +\n   xlim(25, 95)"},{"path":"modern-graphics.html","id":"adding-rug","chapter":"6 Modern graphics","heading":"6.16.5.1 Adding rug","text":"","code":"\n# adding rug\nggplot(gapminder_2007, aes(x = lifeExp)) + \n   geom_density(colour = 3) +\n   xlim(30, 95) +\n   theme_classic() +\n   geom_rug() "},{"path":"modern-graphics.html","id":"density-plot-by-groups","chapter":"6 Modern graphics","heading":"6.16.5.2 Density plot by groups","text":"","code":"\n# by groups\nggplot(gapminder_2007, aes(x = lifeExp, colour = continent)) +\n   geom_density(size = 0.5, alpha = 0.5) +\n   xlim(30, 95) +\n   geom_rug() +\n   theme_classic() \n# subplots\nggplot(gapminder_2007, aes(x = lifeExp, colour = continent)) +\n   geom_density(size = 0.5, alpha = 0.5) +\n   xlim(30, 95) +\n   theme_light() +\n   facet_wrap(continent ~ ., nrow = 5, ncol = 1, scales = 'free_y')"},{"path":"modern-graphics.html","id":"combining-density-and-histogram","chapter":"6 Modern graphics","heading":"6.16.5.3 Combining density and histogram","text":"","code":"\n# combining density and histogram\nggplot(gapminder_2007, aes(x = lifeExp, y = ..density..)) + \n   geom_density(colour = 3, size = 0.5) +\n   geom_histogram(alpha = 0.3, bins = 15) +\n   theme_classic() +\n   xlim(30, 95)"},{"path":"modern-graphics.html","id":"q-q-plot","chapter":"6 Modern graphics","heading":"6.16.6 Q-Q plot","text":"function geom_qq() creates q-q plot.","code":"\nggplot(data = gapminder_2007) + \ngeom_qq(aes(sample = lifeExp)) +\ntheme_classic()\n\n\n# adding a line\nggplot(data = gapminder_2007, aes(sample = lifeExp)) + \n   geom_qq() + \n   geom_qq_line() +\n   theme_classic()\n\n\n# by groups\nggplot(data = gapminder_2007, aes(sample = lifeExp, colour = continent, shape = continent)) + \n   geom_qq(size = 2) + \n   geom_qq_line() +\n   scale_colour_brewer(palette = \"Dark2\") +\n   scale_shape_manual(values = 15:19) +\n   guides(shape = 'none') +\n   theme_classic()"},{"path":"modern-graphics.html","id":"boxplot","chapter":"6 Modern graphics","heading":"6.16.7 Boxplot","text":"function geom_boxplot() creates boxplot.","code":"\nggplot(data = gapminder_2007) + \n   geom_boxplot(aes(y = lifeExp))"},{"path":"modern-graphics.html","id":"customizing-plot-3","chapter":"6 Modern graphics","heading":"6.16.7.1 Customizing plot","text":"","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp)) + \n   geom_boxplot(width = 20, \n                fill = 'lightgreen', \n                colour = 'darkgreen', \n                alpha = 0.7,\n                size = 0.5) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"adding-notch","chapter":"6 Modern graphics","heading":"6.16.7.2 Adding notch","text":"argument notch used add notch notchwidth used adjust notch size.","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp)) + \n   geom_boxplot(fill = 'lightgreen', \n                colour = 'darkgreen', \n                alpha = 0.5,\n                size = 0.6,\n                notch = TRUE, \n                notchwidth = 0.7) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"boxplot-by-groups","chapter":"6 Modern graphics","heading":"6.16.7.3 Boxplot by groups","text":"","code":"\nggplot(data = gapminder_2007) + \n   geom_boxplot(aes(y = lifeExp, x = continent), \n                fill = 'lightgreen', \n                colour = 'darkgreen',\n                alpha = 0.5,\n                size = 0.7) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"removing-outliers","chapter":"6 Modern graphics","heading":"6.16.7.4 Removing outliers","text":"argument outlier.shape = NA used remove outliers.","code":"\n# removing outliers\nggplot(data = gapminder_2007) + \n   geom_boxplot(aes(y = gdpPercap, x = continent), \n                fill = 'lightgreen', \n                colour = 'darkgreen', \n                size = 0.6, \n                alpha = 0.6, \n                outlier.shape = NA) +\n   coord_flip() +\n   theme_classic()"},{"path":"modern-graphics.html","id":"box-width","chapter":"6 Modern graphics","heading":"6.16.7.5 Box width","text":"argument width controls box width.argument varwidth = TRUE enables box width proportionate square root count values group.","code":"\n# box width\nggplot(data = gapminder_2007) + \n   geom_boxplot(aes(y = gdpPercap, x = continent), \n                fill = 'lightgreen', \n                colour = 'darkgreen', \n                size = 0.6, \n                alpha = 0.6, \n                outlier.shape = NA, \n                width = 0.3) +\n   theme_classic()\n# width by the count of values\nggplot(data = gapminder_2007) + \n   geom_boxplot(aes(y = gdpPercap, x = continent), \n                fill = 'lightgreen', \n                colour = 'darkgreen', \n                size = 0.6, \n                alpha = 0.6,              \n                outlier.shape = NA, \n                varwidth = TRUE) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"adding-mean-and-median","chapter":"6 Modern graphics","heading":"6.16.7.6 Adding mean and median","text":"function stat_summary() can used add mean median values.","code":"\n# adding mean\nggplot(data = gapminder_2007, aes(y = lifeExp, x = continent), ) + \n   geom_boxplot(fill = 'lightgreen', \n                colour = 'darkgreen', \n                size = 0.6, \n                alpha = 0.6, \n                width = 0.4) +\n   stat_summary(fun.y = mean, geom = 'point', shape = '-', size = 10, colour = 'white') +\n   theme_classic()"},{"path":"modern-graphics.html","id":"adding-jitter","chapter":"6 Modern graphics","heading":"6.16.7.7 Adding jitter","text":"function geom_jitter() used add jitter plot.","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp, x = continent)) + \n   geom_boxplot(fill = 'lightgreen', \n                colour = 'darkgreen', \n                size = 0.6, \n                alpha = 0.6, \n                width = 0.3) +\n   stat_summary(fun.y = mean, geom = 'point', shape = '-', size = 10, colour = 'white') +\n   geom_jitter(width = 0.2, alpha = 0.7, colour = 'darkgreen') +\n   theme_classic()"},{"path":"modern-graphics.html","id":"strip-plot","chapter":"6 Modern graphics","heading":"6.16.8 Strip plot","text":"specific geom create strip plot using geom_jitter(), can create strip plot.","code":"\nggplot(data = gapminder_2007, aes(x = lifeExp, y = continent, colour = continent)) + \n   geom_jitter() +\n   theme_classic() +\n   theme(legend.position = \"none\")\n\n\nggplot(data = gapminder_2007, aes(x = lifeExp, y = continent, colour = continent)) + \n   geom_jitter(position = position_jitter(height = 0.1)) +\n   theme_classic() +\n   theme(legend.position = \"none\")\n\n\nggplot(data = gapminder_2007, aes(y = lifeExp, x = continent, colour = continent)) + \n   geom_jitter(position = position_jitter(width = 0.2)) +\n   theme_classic() +\n   theme(legend.position = \"none\")\n\n\nggplot(data = gapminder_2007, \n       aes(y = lifeExp, x = continent, colour = continent, fill = continent)) + \n   geom_boxplot(size = 0.3, alpha = 0.6, width = 0.3) +\n   stat_summary(fun.y = mean, geom = 'point', shape = '-', size = 8) +\n   geom_jitter(position = position_jitter(width = 0.2), alpha = 0.5) +\n   scale_colour_brewer(palette = \"Dark2\") +\n   scale_fill_brewer(palette = \"Dark2\") +\n   theme_classic() +\n   theme(legend.position = \"none\")"},{"path":"modern-graphics.html","id":"violin-plot","chapter":"6 Modern graphics","heading":"6.16.9 Violin plot","text":"function geom_violin() creates violin plot.","code":"\nggplot(data = gapminder_2007, aes(y = lifeExp, x = '')) + \n   geom_violin() +\n   theme_classic()"},{"path":"modern-graphics.html","id":"remove-trimming","chapter":"6 Modern graphics","heading":"6.16.9.1 Remove trimming","text":"argument trim = FALSE removes trimming.","code":"\n# removing trim\nggplot(data = gapminder_2007, aes(y = lifeExp, x = '')) + \n   geom_violin(trim = FALSE) +\n   theme_classic()"},{"path":"modern-graphics.html","id":"adding-mean-and-median-1","chapter":"6 Modern graphics","heading":"6.16.9.2 Adding mean and median","text":"","code":"\n# adding mean and median\nggplot(data = gapminder_2007, aes(y = lifeExp, x = '')) + \n   geom_violin(trim = FALSE) +\n   stat_summary(fun.y = mean, geom = 'point', shape = '-', size = 10) +\n   stat_summary(fun.y = median, geom = 'point', shape = 19, size = 3) +\n   theme_classic() \n\n\nggplot(data = gapminder_2007, aes(y = lifeExp, x = continent)) + \n   geom_violin() +\n   stat_summary(fun.y = mean, geom = 'point', shape = '-', size = 10) +\n   stat_summary(fun.y = median, geom = 'point', shape = 19, size = 3) +\n   theme_classic()\n\n\nggplot(data = gapminder_2007, \n       aes(y = lifeExp, x = continent, color = continent, shape = continent)) + \n   geom_violin(size = 0.8) +\n   stat_summary(fun.y = mean, geom = 'point', shape = '-', size = 10) +\n   stat_summary(fun.y = median, geom = 'point', shape = 19, size = 3) +\n   geom_jitter(position = position_jitter(width = 0.2), alpha = 0.7) +\n   scale_colour_brewer(palette = \"Dark2\") +\n   theme_classic() +\n   theme(legend.position = \"none\")"},{"path":"modern-graphics.html","id":"line-graph","chapter":"6 Modern graphics","heading":"6.16.10 Line graph","text":"function geom_line() produces line plot.","code":"\n# preparing plot\npop_growth <-\ngapminder %>%\ngroup_by(year) %>%\nsummarise(pop = round(sum(pop/1e9, na.rm = T), 2))\npop_growth\n#> # A tibble: 12 x 2\n#>     year   pop\n#>    <int> <dbl>\n#>  1  1952  2.41\n#>  2  1957  2.66\n#>  3  1962  2.9 \n#>  4  1967  3.22\n#>  5  1972  3.58\n#>  6  1977  3.93\n#>  7  1982  4.29\n#>  8  1987  4.69\n#>  9  1992  5.11\n#> 10  1997  5.52\n#> 11  2002  5.89\n#> 12  2007  6.25\n\nggplot(data = pop_growth, aes(y = pop/1e9, x = year)) + \n  geom_point()\n\n\n# adding line\nggplot(data = pop_growth, aes(y = pop/1e9, x = year)) + \n  geom_line()\n\n\n# combining line and points\nggplot(data = pop_growth, aes(y = pop/1e9, x = year)) + \n  geom_line() + \n  geom_point()\n\n\n# adding data label\nggplot(data = pop_growth, aes(y = pop, x = year)) + \n  geom_line() + \n  geom_point() +\n  geom_text(aes(label = round(pop, 2)), nudge_x = -3) +\n  theme_classic()\n\n\nggplot(data = pop_growth, aes(y = pop, x = year)) + \n  geom_segment(aes(y = pop, x = year, yend = 0, xend = year)) +\n  theme_classic()"},{"path":"modern-graphics.html","id":"line-width","chapter":"6 Modern graphics","heading":"6.16.10.1 Line width","text":"argument size=, control line width.","code":"\nggplot(data = pop_growth, aes(y = pop, x = year)) + \n  geom_line(size = 1) +\n  theme_classic()"},{"path":"modern-graphics.html","id":"line-style","chapter":"6 Modern graphics","heading":"6.16.10.2 Line style","text":"argument linetype= controls line style. accepts values base graphics , integers ranging 0 6 ‘blank’ = 0,‘solid’ = 1 (default)‘dashed’ = 2‘dotted’ = 3‘dotdash’ = 4‘longdash’ = 5‘twodash’ = 6","code":"\nggplot(data = pop_growth, aes(y = pop, x = year)) + \n  geom_line(size = 1, linetype = 2) +\n  theme_classic()\n\nggplot(data = pop_growth, aes(y = pop, x = year)) + \n  geom_line(size = 1, linetype = 'twodash') +\n  theme_classic()"},{"path":"modern-graphics.html","id":"multiple-line-plot","chapter":"6 Modern graphics","heading":"6.16.10.3 Multiple line plot","text":"","code":"\n# preparing data\npop_growth_cont <- aggregate(pop ~ year + continent, gapminder, sum)\nhead(pop_growth_cont)\n#>   year continent       pop\n#> 1 1952    Africa 237640501\n#> 2 1957    Africa 264837738\n#> 3 1962    Africa 296516865\n#> 4 1967    Africa 335289489\n#> 5 1972    Africa 379879541\n#> 6 1977    Africa 433061021\n\nggplot(data = pop_growth_cont, \n       aes(y = pop/1e6, x = year, colour = continent, fill = continent)) + \n  geom_line() + \n  geom_point()\nggplot(data = pop_growth_cont, aes(y = pop, x = year, colour = continent, fill = continent)) + \n  geom_area() + \n  scale_colour_brewer(palette = \"Dark2\") +\n  theme_classic()"},{"path":"modern-graphics.html","id":"lollipop-plot","chapter":"6 Modern graphics","heading":"6.16.11 Lollipop plot","text":"combining functions geom_segment() geom_point(), can produce lollipop plot.","code":"\nggplot(data = pop_growth, aes(y = pop, x = year)) + \n  geom_segment(aes(yend = 0, xend = year)) +\n  geom_point(aes(y = pop, x = year), size = 3) +\n  theme_classic()"},{"path":"modern-graphics.html","id":"area-plot","chapter":"6 Modern graphics","heading":"6.16.12 Area plot","text":"function geom_area() used create area plot.","code":"\nggplot(data = pop_growth, aes(y = pop, x = year)) + \n  geom_area() +\n  theme_classic()"},{"path":"modern-graphics.html","id":"step-plot","chapter":"6 Modern graphics","heading":"6.16.13 Step plot","text":"function geom_step() used create step plot argument direction indicating direction plot.","code":"\nggplot(data = pop_growth, aes(y = pop, x = year)) + \n  geom_step(aes(y = pop, x = year)) + \n  theme_classic()\n# vh (vertical then horizontal)\nggplot(data = pop_growth, aes(y = pop, x = year)) + \n  geom_step(aes(y = pop, x = year), direction = 'vh') +\n  theme_classic()"},{"path":"bioconductor.html","id":"bioconductor","chapter":"7 Bioconductor","heading":"7 Bioconductor","text":"","code":""},{"path":"bioconductor.html","id":"introduction-1","chapter":"7 Bioconductor","heading":"7.1 Introduction","text":"Bioconductor project open source repository R packages, datasets workflows specific analyzing biological data. Bioconductor project useful extension CRAN, R Archive, provides us software tools explore, understand, solve simple complex molecular biology questions. Hence, Bioconductor’s tagline “open source software bioinformatics.”Bioconductor site: https://www.bioconductor.org/","code":""},{"path":"bioconductor.html","id":"how-to-install-bioconductor-packages","chapter":"7 Bioconductor","heading":"7.2 How to install Bioconductor packages?","text":"Bioconductor package collection forms repository release schedule different R Archive. Bioconductor ’s base functions updates, packages installed differently. install Bioconductor packages need lines code, shown .First, use function install.packages(\"BiocManager\"). function install BiocInstaller package. , use function BiocManager::install() name package want install. use BiocManager::install(), informed new versions Bioconductor available, also see prompt update R version needed. Updating packages, regularly, important get new features. case upgrades packages dependencies, asked update , , none packages.","code":"\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install()                  # install core packages\nBiocManager::install(\"GenomicFeatures\") # install GenomicFeatures package"},{"path":"bioconductor.html","id":"bioconductor-version-and-package-version","chapter":"7 Bioconductor","heading":"7.2.1 Bioconductor version and package version","text":"Bioconductor constant development, can check version Bioconductor using syntax BiocManager::version(). load package use function library() like CRAN packages. ’s important reproducibility always check versions packages. can use function sessionInfo() gives list loaded packages versions, can inquire version package using packageVersion() packageName. Finally, interested know --date packages, use function BiocManager::valid().BSgenome Bioconductor data package contains representations several genomes. package already installed , installing dependencies usually takes time, using following code:","code":"\nversion                  # detailed information about the version of R running\nsessionInfo()            # version information about R, the OS and attached or loaded packages\nBiocManager::version()   # version of Bioconductor currently in use\nBiocManager::valid()     # Validate installed package versions against correct versions\npackageVersion(\"GenomicFeatures\")  # package version\n\n# to install some new packages\n.libPaths()\nBiocManager::install(c(\n    \"backports\", \"Cairo\", \"loo\", \"openssl\", \"Rcpp\", \"svglite\", \"vdiffr\"\n  ), update = TRUE, ask = FALSE)\n# Installing and loading BSGenome package\n# BiocManager::install(\"BSgenome\", lib=\"C:/Program Files/R/R-4.1.1patched/library\" )\nlibrary(BSgenome)"},{"path":"bioconductor.html","id":"oo-systems","chapter":"7 Bioconductor","heading":"7.3 OO systems","text":"R functional programming language, means working series functions. achieve goal sequencing nested function calls. use Tidyverse R pipe operator greatly facilitates interpretation modification multiple nested functions.However, R also object-oriented capabilities, capabilities expand greatly using R.R can use several object-oriented systems parallel (details https://adv-r.hadley.nz/oo.html):S3 - simplest OO system, tied basic data typesS4 - Bioconductor developed (details: S4 System Development Bioconductor S4 classes methodsRC - Reference classes, latest OO system R (version 2.12 R)review two object-oriented systems, systems S3 S4. R packets use S3 system, Bioconductor handles S4.","code":""},{"path":"bioconductor.html","id":"s3","chapter":"7 Bioconductor","heading":"7.3.1 S3","text":"Advantages S3:simple powerfulflexible interactiveuses generic functionfunctionality depends first argument.good example S3 plot () function, can draw 30 different figures, depending input.However, S3 strong type evaluation selection. example, give function wrong type, try printing error. Naming difficulties (dot dot) inheritance work, depends input.","code":"\nmethods(plot) # List Methods for S3 Generic Functions or Classes of plot()\n#>  [1] plot,ANY,ANY-method            \n#>  [2] plot,profile.mle,missing-method\n#>  [3] plot.acf*                      \n#>  [4] plot.data.frame*               \n#>  [5] plot.decomposed.ts*            \n#>  [6] plot.default                   \n#>  [7] plot.dendrogram*               \n#>  [8] plot.density*                  \n#>  [9] plot.ecdf                      \n#> [10] plot.factor*                   \n#> [11] plot.formula*                  \n#> [12] plot.function                  \n#> [13] plot.hclust*                   \n#> [14] plot.histogram*                \n#> [15] plot.HoltWinters*              \n#> [16] plot.isoreg*                   \n#> [17] plot.lm*                       \n#> [18] plot.medpolish*                \n#> [19] plot.mlm*                      \n#> [20] plot.ppr*                      \n#> [21] plot.prcomp*                   \n#> [22] plot.princomp*                 \n#> [23] plot.profile.nls*              \n#> [24] plot.R6*                       \n#> [25] plot.raster*                   \n#> [26] plot.shingle*                  \n#> [27] plot.spec*                     \n#> [28] plot.stepfun                   \n#> [29] plot.stl*                      \n#> [30] plot.table*                    \n#> [31] plot.trellis*                  \n#> [32] plot.ts                        \n#> [33] plot.tskernel*                 \n#> [34] plot.TukeyHSD*                 \n#> see '?methods' for accessing help and source code\nx <- rbinom(n = 10, size = 4, prob = 0.5)\nplot(x)\nplot(factor(x))\nplot(table(x))"},{"path":"bioconductor.html","id":"bases","chapter":"7 Bioconductor","heading":"7.3.1.1 Bases","text":"S3 widely used object-oriented system CRAN packages. base stats packages use system.S3 object class attribute, course can attributes store different information.generic functions R define interface uses different implementation depending argument received. R functions generic, print () plot () seen earlier.can know whether function generic .class S3 object printed class (), inherits () provides logical value object instance class.job S3 generic perform method dispatch, .e. find specific implementation class. Method dispatch performed UseMethod(), every generic calls. UseMethod() work? basically creates vector method names, paste0(\"generic\", \".\", c(class(x), \"default\")), looks potential method turn. can see action sloop::s3_dispatch(). give call S3 generic, lists possible methods.","code":"\nf <- factor(c(\"a\", \"b\", \"c\"))\ntypeof(f)     # The Type of an Object\n#> [1] \"integer\"\nattributes(f) # Object Attribute Lists\n#> $levels\n#> [1] \"a\" \"b\" \"c\"\n#> \n#> $class\n#> [1] \"factor\"\nunclass(f)    # returns f with its class attribute removed \n#> [1] 1 2 3\n#> attr(,\"levels\")\n#> [1] \"a\" \"b\" \"c\"\nsloop::otype(f) # Determine the type of an object\n#> [1] \"S3\"\nprint(f)\n#> [1] a b c\n#> Levels: a b c\nprint(unclass(f))\n#> [1] 1 2 3\n#> attr(,\"levels\")\n#> [1] \"a\" \"b\" \"c\"\nsloop::ftype(str)    # Determine function type.\n#> [1] \"S3\"      \"generic\"\nsloop::ftype(print)\n#> [1] \"S3\"      \"generic\"\nsloop::ftype(unclass)\n#> [1] \"primitive\"\nsloop::ftype(mean)\n#> [1] \"S4\"      \"generic\"\nsloop::s3_dispatch(print(f))\n#> => print.factor\n#>  * print.default"},{"path":"bioconductor.html","id":"classes","chapter":"7 Bioconductor","heading":"7.3.1.2 Classes","text":"S3 system, formal definition objects. want create class, need specify class attribute. can also create object class structure () function later class () function.class S3 object printed class (), inherits () provides logical value object instance class.easy ruin existing object modifying class.","code":"\nx <- structure(1:10, class=\"my_class\")\nsloop::otype(x)\n#> [1] \"S3\"\n\nx <- 1:10\nclass(x) <- \"my_class\"\nx\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n#> attr(,\"class\")\n#> [1] \"my_class\"\nsloop::otype(x)\n#> [1] \"S3\"\nclass(x)\n#> [1] \"my_class\"\ninherits(x, \"my_class\")\n#> [1] TRUE\nx <- factor(1:10)\nx\n#>  [1] 1  2  3  4  5  6  7  8  9  10\n#> Levels: 1 2 3 4 5 6 7 8 9 10\nclass(x)\n#> [1] \"factor\"\nclass(x) <- \"lm\"\n# x  hibaüzenet"},{"path":"bioconductor.html","id":"s4","chapter":"7 Bioconductor","heading":"7.3.2 S4","text":"S4 system motivation implement object-oriented style programming. base concept define data first work . object defined, generalized class defining kind data contains actions functions manipulate . see detail coming chapters, biological representations complex often interconnected. Bioconductor , recommends re-using methods classes implementing new representations. S4 classes formal definition, hence lot better check input types, definition inheritance. can create new object class like example. created new genome description. object contain slots describe . S4 requires bit work implement, serves extend code others can reuse framework.Benefits S4formal definition classesBioconductor reusabilityhas validation typesnaming conventions.Use new () function create new object. object contain slots describe data. S4 system bit complex S3.easy decide whether object object defined S4 . can also said isS4 () str () functions. first case TRUE displayed second caseFormal class.can use function sloop::otype().","code":"\nmydescr <- new(\"GenomeDescription\") # create a new object from a class\nisS4(mydescr)\n#> [1] TRUE\nisS4(mean(1:10))\n#> [1] FALSE\nstr(mydescr)\n#> Formal class 'GenomeDescription' [package \"GenomeInfoDb\"] with 7 slots\n#>   ..@ organism        : chr(0) \n#>   ..@ common_name     : chr(0) \n#>   ..@ provider        : chr(0) \n#>   ..@ provider_version: chr(0) \n#>   ..@ release_date    : chr(0) \n#>   ..@ release_name    : chr(0) \n#>   ..@ seqinfo         :Formal class 'Seqinfo' [package \"GenomeInfoDb\"] with 4 slots\n#>   .. .. ..@ seqnames   : chr(0) \n#>   .. .. ..@ seqlengths : int(0) \n#>   .. .. ..@ is_circular: logi(0) \n#>   .. .. ..@ genome     : chr(0)\nsloop::otype(mydescr)\n#> [1] \"S4\"\nattributes(mydescr)\n#> $organism\n#> character(0)\n#> \n#> $common_name\n#> character(0)\n#> \n#> $provider\n#> character(0)\n#> \n#> $provider_version\n#> character(0)\n#> \n#> $release_date\n#> character(0)\n#> \n#> $release_name\n#> character(0)\n#> \n#> $seqinfo\n#> Seqinfo object with no sequences:\n#> \n#> $class\n#> [1] \"GenomeDescription\"\n#> attr(,\"package\")\n#> [1] \"GenomeInfoDb\""},{"path":"bioconductor.html","id":"s4-class-definition","chapter":"7 Bioconductor","heading":"7.3.2.1 S4 class definition","text":"S4 class describes representation object name slots (also called methods fields). class optionally describes inheritance. class allows us define characteristics concerning object gives us code reusability. example, create class using setClass(). name MyEpicProject three slots: ini, end milestone. class inherits class MyProject. means can reuse slots .S4 class definitionA class describes representation:nameslots (methids/fields)contains (inheritance definition)","code":"\nMyEpicProject <- setClass(\n  \"MyEpicProject\",        # define class name with UpperCamelCase\n  slots = c(ini = \"Date\", # define slots, helpful for validation\n            end = \"Date\",\n            milestone = \"character\"), \n  contains = \"MyProject\" # define inheritance\n)"},{"path":"bioconductor.html","id":"s4-accessors","chapter":"7 Bioconductor","heading":"7.3.2.2 S4 accessors","text":"Basic information S4 object accessed accessor-functions, also called methods. seen, class definition includes slots describing object. function .S4methods() used main classes gives summary accessors. subclasses use showMethods() function, gives breakdown, might bit long look . want object summary, use accessor function show(). use accessors coming exercises.use class BSgenome, already loaded . Let’s check formal definition class using function showClass(\"className\"). Check BSgenome class results find parent classes (Extends) classes inherit (Subclasses).BSgenome powerful class inherits Annotated, see later , MaskedBSgenome subclass.","code":"\nlibrary(BSgenome) # load the package\n.S4methods(class = \"BSgenome\") # accessors from the main class\n#>  [1] $               [[              as.list        \n#>  [4] coerce          commonName      countPWM       \n#>  [7] export          extractAt       getSeq         \n#> [10] injectSNPs      length          masknames      \n#> [13] matchPWM        mseqnames       names          \n#> [16] organism        provider        providerVersion\n#> [19] releaseDate     releaseName     seqinfo        \n#> [22] seqinfo<-       seqnames        seqnames<-     \n#> [25] show            snpcount        snplocs        \n#> [28] SNPlocs_pkgname sourceUrl       vcountPattern  \n#> [31] Views           vmatchPattern   vcountPDict    \n#> [34] vmatchPDict     bsgenomeName    metadata       \n#> [37] metadata<-     \n#> see '?methods' for accessing help and source code\n#showMethods(classes = \"BSgenome\") # too long output\nshowClass(\"BSgenome\") # parents and children\n#> Class \"BSgenome\" [package \"BSgenome\"]\n#> \n#> Slots:\n#>                                                 \n#> Name:               pkgname     single_sequences\n#> Class:            character OnDiskNamedSequences\n#>                                                 \n#> Name:    multiple_sequences              seqinfo\n#> Class:        RdaCollection              Seqinfo\n#>                                                 \n#> Name:         user_seqnames   injectSNPs_handler\n#> Class:            character    InjectSNPsHandler\n#>                                                 \n#> Name:           .seqs_cache         .link_counts\n#> Class:          environment          environment\n#>                            \n#> Name:              metadata\n#> Class:                 list\n#> \n#> Extends: \"Annotated\"\n#> \n#> Known Subclasses: \"MaskedBSgenome\"\n\n# new object and object summary\nsetClass(\"track\", slots = c(x=\"numeric\", y=\"numeric\"))\nt1 <- new(\"track\", x=1:20, y=(1:20)^2)\nshow(t1) \n#> An object of class \"track\"\n#> Slot \"x\":\n#>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18\n#> [19] 19 20\n#> \n#> Slot \"y\":\n#>  [1]   1   4   9  16  25  36  49  64  81 100 121 144 169 196\n#> [15] 225 256 289 324 361 400"},{"path":"bioconductor.html","id":"introducing-genomic-datasets","chapter":"7 Bioconductor","heading":"7.4 Introducing genomic datasets","text":"organisms genome makes , dictates responses external influences. genome complete genetic material organism stored mostly chromosomes, ’s known blueprint living. genome made long sequences DNA, based four-letter-alphabet, T, , G C.interested locating describing specific locations genome allows us learn diversity, evolution, hereditary changes, . understand better subdivide genome. written information genome uses DNA alphabet. Think genome set books book chromosome. Chromosome numbers genome highly variable. Usually, chromosomes come pairs, multiple sets common . chromosome ordered genetic sequences, think chapters book. find specific genetic instructions look genes. like pages book, containing recipe make proteins. genes produce proteins won’t. called coding non-coding genes. Coding genes expressed proteins responsible specific functions. Proteins come following two-step process, DNA--RNA, step known transcription, RNA--protein step called translation.example, going study Yeast genome, single cell microorganism. fungus people love. Yeast used fermentation production beer, bread, kefir, kombucha foods, well used bioremediation. scientific name Saccharomyces cerevisiae s. cerevisiae. Yeast well studied organism, due fast development, many experiments use model.","code":""},{"path":"bioconductor.html","id":"yeast-genome","chapter":"7 Bioconductor","heading":"7.4.1 Yeast genome","text":"yeast genome dataset available UCSC. picked genome small size. BSgenome package provides us many genome datasets. get list BSgenome available datasets, use function available.genomes(). , using common accessors functions, can learn genome, example, number chromosomes using length(), names chromosomes using names(), length chromosome DNA base pairs, using seqlengths().Specific genes regions interesting functions. can retrieve sections genome function getSeq(). minimum argument required BSgenome object. first example give sequences yeast genome. , can specify parameters, select sequences chromosome M use “chrM.” Next, can specify locations subsequences extract, using start=, end=, width=. Using, end=10, selects first 10 base pairs chromosome genome.Let’s continue exploring possibilities BSgenome package. chromosome can also referred object name$chromosome.name.","code":"\n# BiocManager::install(\"BSgenome.Scerevisiae.UCSC.sacCer3\")\n# Load the yeast genome\nlibrary(BSgenome.Scerevisiae.UCSC.sacCer3)\n\n# Assign data to the yeastGenome object\nyeastGenome <- BSgenome.Scerevisiae.UCSC.sacCer3\n\n# interested in other genomes\navailable.genomes()\n#>   [1] \"BSgenome.Alyrata.JGI.v1\"                   \n#>   [2] \"BSgenome.Amellifera.BeeBase.assembly4\"     \n#>   [3] \"BSgenome.Amellifera.NCBI.AmelHAv3.1\"       \n#>   [4] \"BSgenome.Amellifera.UCSC.apiMel2\"          \n#>   [5] \"BSgenome.Amellifera.UCSC.apiMel2.masked\"   \n#>   [6] \"BSgenome.Aofficinalis.NCBI.V1\"             \n#>   [7] \"BSgenome.Athaliana.TAIR.04232008\"          \n#>   [8] \"BSgenome.Athaliana.TAIR.TAIR9\"             \n#>   [9] \"BSgenome.Btaurus.UCSC.bosTau3\"             \n#>  [10] \"BSgenome.Btaurus.UCSC.bosTau3.masked\"      \n#>  [11] \"BSgenome.Btaurus.UCSC.bosTau4\"             \n#>  [12] \"BSgenome.Btaurus.UCSC.bosTau4.masked\"      \n#>  [13] \"BSgenome.Btaurus.UCSC.bosTau6\"             \n#>  [14] \"BSgenome.Btaurus.UCSC.bosTau6.masked\"      \n#>  [15] \"BSgenome.Btaurus.UCSC.bosTau8\"             \n#>  [16] \"BSgenome.Btaurus.UCSC.bosTau9\"             \n#>  [17] \"BSgenome.Carietinum.NCBI.v1\"               \n#>  [18] \"BSgenome.Celegans.UCSC.ce10\"               \n#>  [19] \"BSgenome.Celegans.UCSC.ce11\"               \n#>  [20] \"BSgenome.Celegans.UCSC.ce2\"                \n#>  [21] \"BSgenome.Celegans.UCSC.ce6\"                \n#>  [22] \"BSgenome.Cfamiliaris.UCSC.canFam2\"         \n#>  [23] \"BSgenome.Cfamiliaris.UCSC.canFam2.masked\"  \n#>  [24] \"BSgenome.Cfamiliaris.UCSC.canFam3\"         \n#>  [25] \"BSgenome.Cfamiliaris.UCSC.canFam3.masked\"  \n#>  [26] \"BSgenome.Cjacchus.UCSC.calJac3\"            \n#>  [27] \"BSgenome.Creinhardtii.JGI.v5.6\"            \n#>  [28] \"BSgenome.Dmelanogaster.UCSC.dm2\"           \n#>  [29] \"BSgenome.Dmelanogaster.UCSC.dm2.masked\"    \n#>  [30] \"BSgenome.Dmelanogaster.UCSC.dm3\"           \n#>  [31] \"BSgenome.Dmelanogaster.UCSC.dm3.masked\"    \n#>  [32] \"BSgenome.Dmelanogaster.UCSC.dm6\"           \n#>  [33] \"BSgenome.Drerio.UCSC.danRer10\"             \n#>  [34] \"BSgenome.Drerio.UCSC.danRer11\"             \n#>  [35] \"BSgenome.Drerio.UCSC.danRer5\"              \n#>  [36] \"BSgenome.Drerio.UCSC.danRer5.masked\"       \n#>  [37] \"BSgenome.Drerio.UCSC.danRer6\"              \n#>  [38] \"BSgenome.Drerio.UCSC.danRer6.masked\"       \n#>  [39] \"BSgenome.Drerio.UCSC.danRer7\"              \n#>  [40] \"BSgenome.Drerio.UCSC.danRer7.masked\"       \n#>  [41] \"BSgenome.Dvirilis.Ensembl.dvircaf1\"        \n#>  [42] \"BSgenome.Ecoli.NCBI.20080805\"              \n#>  [43] \"BSgenome.Gaculeatus.UCSC.gasAcu1\"          \n#>  [44] \"BSgenome.Gaculeatus.UCSC.gasAcu1.masked\"   \n#>  [45] \"BSgenome.Ggallus.UCSC.galGal3\"             \n#>  [46] \"BSgenome.Ggallus.UCSC.galGal3.masked\"      \n#>  [47] \"BSgenome.Ggallus.UCSC.galGal4\"             \n#>  [48] \"BSgenome.Ggallus.UCSC.galGal4.masked\"      \n#>  [49] \"BSgenome.Ggallus.UCSC.galGal5\"             \n#>  [50] \"BSgenome.Ggallus.UCSC.galGal6\"             \n#>  [51] \"BSgenome.Hsapiens.1000genomes.hs37d5\"      \n#>  [52] \"BSgenome.Hsapiens.NCBI.GRCh38\"             \n#>  [53] \"BSgenome.Hsapiens.UCSC.hg17\"               \n#>  [54] \"BSgenome.Hsapiens.UCSC.hg17.masked\"        \n#>  [55] \"BSgenome.Hsapiens.UCSC.hg18\"               \n#>  [56] \"BSgenome.Hsapiens.UCSC.hg18.masked\"        \n#>  [57] \"BSgenome.Hsapiens.UCSC.hg19\"               \n#>  [58] \"BSgenome.Hsapiens.UCSC.hg19.masked\"        \n#>  [59] \"BSgenome.Hsapiens.UCSC.hg38\"               \n#>  [60] \"BSgenome.Hsapiens.UCSC.hg38.dbSNP151.major\"\n#>  [61] \"BSgenome.Hsapiens.UCSC.hg38.dbSNP151.minor\"\n#>  [62] \"BSgenome.Hsapiens.UCSC.hg38.masked\"        \n#>  [63] \"BSgenome.Mdomestica.UCSC.monDom5\"          \n#>  [64] \"BSgenome.Mfascicularis.NCBI.5.0\"           \n#>  [65] \"BSgenome.Mfuro.UCSC.musFur1\"               \n#>  [66] \"BSgenome.Mmulatta.UCSC.rheMac10\"           \n#>  [67] \"BSgenome.Mmulatta.UCSC.rheMac2\"            \n#>  [68] \"BSgenome.Mmulatta.UCSC.rheMac2.masked\"     \n#>  [69] \"BSgenome.Mmulatta.UCSC.rheMac3\"            \n#>  [70] \"BSgenome.Mmulatta.UCSC.rheMac3.masked\"     \n#>  [71] \"BSgenome.Mmulatta.UCSC.rheMac8\"            \n#>  [72] \"BSgenome.Mmusculus.UCSC.mm10\"              \n#>  [73] \"BSgenome.Mmusculus.UCSC.mm10.masked\"       \n#>  [74] \"BSgenome.Mmusculus.UCSC.mm39\"              \n#>  [75] \"BSgenome.Mmusculus.UCSC.mm8\"               \n#>  [76] \"BSgenome.Mmusculus.UCSC.mm8.masked\"        \n#>  [77] \"BSgenome.Mmusculus.UCSC.mm9\"               \n#>  [78] \"BSgenome.Mmusculus.UCSC.mm9.masked\"        \n#>  [79] \"BSgenome.Osativa.MSU.MSU7\"                 \n#>  [80] \"BSgenome.Ppaniscus.UCSC.panPan1\"           \n#>  [81] \"BSgenome.Ppaniscus.UCSC.panPan2\"           \n#>  [82] \"BSgenome.Ptroglodytes.UCSC.panTro2\"        \n#>  [83] \"BSgenome.Ptroglodytes.UCSC.panTro2.masked\" \n#>  [84] \"BSgenome.Ptroglodytes.UCSC.panTro3\"        \n#>  [85] \"BSgenome.Ptroglodytes.UCSC.panTro3.masked\" \n#>  [86] \"BSgenome.Ptroglodytes.UCSC.panTro5\"        \n#>  [87] \"BSgenome.Ptroglodytes.UCSC.panTro6\"        \n#>  [88] \"BSgenome.Rnorvegicus.UCSC.rn4\"             \n#>  [89] \"BSgenome.Rnorvegicus.UCSC.rn4.masked\"      \n#>  [90] \"BSgenome.Rnorvegicus.UCSC.rn5\"             \n#>  [91] \"BSgenome.Rnorvegicus.UCSC.rn5.masked\"      \n#>  [92] \"BSgenome.Rnorvegicus.UCSC.rn6\"             \n#>  [93] \"BSgenome.Rnorvegicus.UCSC.rn7\"             \n#>  [94] \"BSgenome.Scerevisiae.UCSC.sacCer1\"         \n#>  [95] \"BSgenome.Scerevisiae.UCSC.sacCer2\"         \n#>  [96] \"BSgenome.Scerevisiae.UCSC.sacCer3\"         \n#>  [97] \"BSgenome.Sscrofa.UCSC.susScr11\"            \n#>  [98] \"BSgenome.Sscrofa.UCSC.susScr3\"             \n#>  [99] \"BSgenome.Sscrofa.UCSC.susScr3.masked\"      \n#> [100] \"BSgenome.Tgondii.ToxoDB.7.0\"               \n#> [101] \"BSgenome.Tguttata.UCSC.taeGut1\"            \n#> [102] \"BSgenome.Tguttata.UCSC.taeGut1.masked\"     \n#> [103] \"BSgenome.Tguttata.UCSC.taeGut2\"            \n#> [104] \"BSgenome.Vvinifera.URGI.IGGP12Xv0\"         \n#> [105] \"BSgenome.Vvinifera.URGI.IGGP12Xv2\"         \n#> [106] \"BSgenome.Vvinifera.URGI.IGGP8X\"\n# BiocManager::install(\"BSgenome.Vvinifera.URGI.IGGP8X\")\n\n# Object Classes\nclass(yeastGenome)  # \"BSgenome\"\n#> [1] \"BSgenome\"\n#> attr(,\"package\")\n#> [1] \"BSgenome\"\n\n# all classes\nis(yeastGenome)  # \"BSgenome\", \"Annotated\"\n#> [1] \"BSgenome\"  \"Annotated\"\n\n# S4 system?\nisS4(yeastGenome)  # TRUE\n#> [1] TRUE\n\n# list accessors\n.S4methods(class = \"BSgenome\")\n#>  [1] $               [[              as.list        \n#>  [4] coerce          commonName      countPWM       \n#>  [7] export          extractAt       getSeq         \n#> [10] injectSNPs      length          masknames      \n#> [13] matchPWM        mseqnames       names          \n#> [16] organism        provider        providerVersion\n#> [19] releaseDate     releaseName     seqinfo        \n#> [22] seqinfo<-       seqnames        seqnames<-     \n#> [25] show            snpcount        snplocs        \n#> [28] SNPlocs_pkgname sourceUrl       vcountPattern  \n#> [31] Views           vmatchPattern   vcountPDict    \n#> [34] vmatchPDict     bsgenomeName    metadata       \n#> [37] metadata<-     \n#> see '?methods' for accessing help and source code\n\n# examples for accessors\norganism(yeastGenome)\n#> [1] \"Saccharomyces cerevisiae\"\nprovider(yeastGenome)\n#> [1] \"UCSC\"\nseqinfo(yeastGenome)\n#> Seqinfo object with 17 sequences (1 circular) from sacCer3 genome:\n#>   seqnames seqlengths isCircular  genome\n#>   chrI         230218      FALSE sacCer3\n#>   chrII        813184      FALSE sacCer3\n#>   chrIII       316620      FALSE sacCer3\n#>   chrIV       1531933      FALSE sacCer3\n#>   chrV         576874      FALSE sacCer3\n#>   ...             ...        ...     ...\n#>   chrXIII      924431      FALSE sacCer3\n#>   chrXIV       784333      FALSE sacCer3\n#>   chrXV       1091291      FALSE sacCer3\n#>   chrXVI       948066      FALSE sacCer3\n#>   chrM          85779       TRUE sacCer3\n\n# Chromosome numbers\nlength(yeastGenome)\n#> [1] 17\n\n# Chromosome names\nnames(yeastGenome)\n#>  [1] \"chrI\"    \"chrII\"   \"chrIII\"  \"chrIV\"   \"chrV\"   \n#>  [6] \"chrVI\"   \"chrVII\"  \"chrVIII\" \"chrIX\"   \"chrX\"   \n#> [11] \"chrXI\"   \"chrXII\"  \"chrXIII\" \"chrXIV\"  \"chrXV\"  \n#> [16] \"chrXVI\"  \"chrM\"\n\n# length of each chromosome by DNA base pairs\nseqlengths(yeastGenome)\n#>    chrI   chrII  chrIII   chrIV    chrV   chrVI  chrVII \n#>  230218  813184  316620 1531933  576874  270161 1090940 \n#> chrVIII   chrIX    chrX   chrXI  chrXII chrXIII  chrXIV \n#>  562643  439888  745751  666816 1078177  924431  784333 \n#>   chrXV  chrXVI    chrM \n#> 1091291  948066   85779\ngetSeq(yeastGenome)  # all sequencies\n#> DNAStringSet object of length 17:\n#>        width seq                        names               \n#>  [1]  230218 CCACACCACACC...GTGTGTGTGGG chrI\n#>  [2]  813184 AAATAGCCCTCA...TGTGGGTGTGT chrII\n#>  [3]  316620 CCCACACACCAC...TGGTGTGTGTG chrIII\n#>  [4] 1531933 ACACCACACCCA...GTAGCTTTTGG chrIV\n#>  [5]  576874 CGTCTCCTCCAA...TTTTTTTTTTT chrV\n#>  ...     ... ...\n#> [13]  924431 CCACACACACAC...TGTGTGTGGGG chrXIII\n#> [14]  784333 CCGGCTTTCTGA...GTGGTGTGGGT chrXIV\n#> [15] 1091291 ACACCACACCCA...GTGTGGTGTGT chrXV\n#> [16]  948066 AAATAGCCCTCA...TCGGTCAGAAA chrXVI\n#> [17]   85779 TTCATAATTAAT...TAATATCCATA chrM\ngetSeq(yeastGenome, names=\"chrM\") # only one, chromosome M\n#> 85779-letter DNAString object\n#> seq: TTCATAATTAATTTTTTATATATATA...TGCTTAATTATAATATAATATCCATA\ngetSeq(yeastGenome, end=10) # selects first 10 base pairs of each chromosome\n#> DNAStringSet object of length 17:\n#>      width seq                          names               \n#>  [1]    10 CCACACCACA                   chrI\n#>  [2]    10 AAATAGCCCT                   chrII\n#>  [3]    10 CCCACACACC                   chrIII\n#>  [4]    10 ACACCACACC                   chrIV\n#>  [5]    10 CGTCTCCTCC                   chrV\n#>  ...   ... ...\n#> [13]    10 CCACACACAC                   chrXIII\n#> [14]    10 CCGGCTTTCT                   chrXIV\n#> [15]    10 ACACCACACC                   chrXV\n#> [16]    10 AAATAGCCCT                   chrXVI\n#> [17]    10 TTCATAATTA                   chrM\ngetSeq(yeastGenome, start=3, end=10) # 8 base pairs of of each chromosome\n#> DNAStringSet object of length 17:\n#>      width seq                          names               \n#>  [1]     8 ACACCACA                     chrI\n#>  [2]     8 ATAGCCCT                     chrII\n#>  [3]     8 CACACACC                     chrIII\n#>  [4]     8 ACCACACC                     chrIV\n#>  [5]     8 TCTCCTCC                     chrV\n#>  ...   ... ...\n#> [13]     8 ACACACAC                     chrXIII\n#> [14]     8 GGCTTTCT                     chrXIV\n#> [15]     8 ACCACACC                     chrXV\n#> [16]     8 ATAGCCCT                     chrXVI\n#> [17]     8 CATAATTA                     chrM\ngetSeq(yeastGenome, names=\"chrM\", start=3, end=10) # 8 base pairs of M chromosome\n#> 8-letter DNAString object\n#> seq: CATAATTA\n# The following example will select the bases of \"chrI\" from 100 to 150\ngetSeq(yeastGenome, names = \"chrI\", start = 100, end = 150)\n#> 51-letter DNAString object\n#> seq: GGCCAACCTGTCTCTCAACTTACCCTCCATTACCCTGCCTCCACTCGTTAC\n# chromosome M, alias chrM \nyeastGenome$chrM\n#> 85779-letter DNAString object\n#> seq: TTCATAATTAATTTTTTATATATATA...TGCTTAATTATAATATAATATCCATA\n\nnames(yeastGenome) # chromosome names\n#>  [1] \"chrI\"    \"chrII\"   \"chrIII\"  \"chrIV\"   \"chrV\"   \n#>  [6] \"chrVI\"   \"chrVII\"  \"chrVIII\" \"chrIX\"   \"chrX\"   \n#> [11] \"chrXI\"   \"chrXII\"  \"chrXIII\" \"chrXIV\"  \"chrXV\"  \n#> [16] \"chrXVI\"  \"chrM\"\nseqnames(yeastGenome) # chromosome names\n#>  [1] \"chrI\"    \"chrII\"   \"chrIII\"  \"chrIV\"   \"chrV\"   \n#>  [6] \"chrVI\"   \"chrVII\"  \"chrVIII\" \"chrIX\"   \"chrX\"   \n#> [11] \"chrXI\"   \"chrXII\"  \"chrXIII\" \"chrXIV\"  \"chrXV\"  \n#> [16] \"chrXVI\"  \"chrM\"\nseqlengths(yeastGenome) # length of chromosomes\n#>    chrI   chrII  chrIII   chrIV    chrV   chrVI  chrVII \n#>  230218  813184  316620 1531933  576874  270161 1090940 \n#> chrVIII   chrIX    chrX   chrXI  chrXII chrXIII  chrXIV \n#>  562643  439888  745751  666816 1078177  924431  784333 \n#>   chrXV  chrXVI    chrM \n#> 1091291  948066   85779\n\n# Get the head of seqnames and tail of seqlengths for yeastGenome\nhead(seqnames(yeastGenome))   \n#> [1] \"chrI\"   \"chrII\"  \"chrIII\" \"chrIV\"  \"chrV\"   \"chrVI\"\ntail(seqlengths(yeastGenome)) \n#>  chrXII chrXIII  chrXIV   chrXV  chrXVI    chrM \n#> 1078177  924431  784333 1091291  948066   85779\n\nnchar(yeastGenome$chrM)  # Count characters of the chrM sequence\n#> [1] 85779"},{"path":"bioconductor.html","id":"introduction-to-biostrings","chapter":"7 Bioconductor","heading":"7.5 Introduction to Biostrings","text":"Bioconductor handling biological datasets efficient way. get familiar biological project /experiment, notice big datasets can . Biostrings package came Bioconductor 13 years ago, implements algorithms fast manipulation large biological sequences. important, 200 Bioconductor packages depend . Hence, Biostrings top 5% Bioconductor downloads.","code":""},{"path":"bioconductor.html","id":"biological-string-containers","chapter":"7 Bioconductor","heading":"7.5.1 Biological string containers","text":"Biological datasets represented characters, sequences can extremely large. Biostrings useful package implements memory efficient containers, especially sub-setting matching. Also, containers can subclasses. example, BString subclass Big String can store big sequence strings single object collection. package Biostrings implements two generic containers, also known virtual classes; XString XStringSet, subclasses inherit. learn classes connect one another, use function showClass(), like example.","code":"\nlibrary(Biostrings)\n\nshowClass(\"XString\")\n#> Virtual Class \"XString\" [package \"Biostrings\"]\n#> \n#> Slots:\n#>                                           \n#> Name:             shared            offset\n#> Class:         SharedRaw           integer\n#>                                           \n#> Name:             length   elementMetadata\n#> Class:           integer DataFrame_OR_NULL\n#>                         \n#> Name:           metadata\n#> Class:              list\n#> \n#> Extends: \n#> Class \"XRaw\", directly\n#> Class \"XVector\", by class \"XRaw\", distance 2\n#> Class \"Vector\", by class \"XRaw\", distance 3\n#> Class \"Annotated\", by class \"XRaw\", distance 4\n#> Class \"vector_OR_Vector\", by class \"XRaw\", distance 4\n#> \n#> Known Subclasses: \"BString\", \"DNAString\", \"RNAString\", \"AAString\"\nshowClass(\"XStringSet\")\n#> Virtual Class \"XStringSet\" [package \"Biostrings\"]\n#> \n#> Slots:\n#>                                           \n#> Name:               pool            ranges\n#> Class:    SharedRaw_Pool    GroupedIRanges\n#>                                           \n#> Name:        elementType   elementMetadata\n#> Class:         character DataFrame_OR_NULL\n#>                         \n#> Name:           metadata\n#> Class:              list\n#> \n#> Extends: \n#> Class \"XRawList\", directly\n#> Class \"XVectorList\", by class \"XRawList\", distance 2\n#> Class \"List\", by class \"XRawList\", distance 3\n#> Class \"Vector\", by class \"XRawList\", distance 4\n#> Class \"list_OR_List\", by class \"XRawList\", distance 4\n#> Class \"Annotated\", by class \"XRawList\", distance 5\n#> Class \"vector_OR_Vector\", by class \"XRawList\", distance 5\n#> \n#> Known Subclasses: \n#> Class \"BStringSet\", directly\n#> Class \"DNAStringSet\", directly\n#> Class \"RNAStringSet\", directly\n#> Class \"AAStringSet\", directly\n#> Class \"QualityScaledXStringSet\", directly\n#> Class \"XStringQuality\", by class \"BStringSet\", distance 2\n#> Class \"PhredQuality\", by class \"BStringSet\", distance 3\n#> Class \"SolexaQuality\", by class \"BStringSet\", distance 3\n#> Class \"IlluminaQuality\", by class \"BStringSet\", distance 3\n#> Class \"QualityScaledBStringSet\", by class \"BStringSet\", distance 2\n#> Class \"QualityScaledDNAStringSet\", by class \"DNAStringSet\", distance 2\n#> Class \"QualityScaledRNAStringSet\", by class \"RNAStringSet\", distance 2\n#> Class \"QualityScaledAAStringSet\", by class \"AAStringSet\", distance 2\nshowClass(\"BString\")\n#> Class \"BString\" [package \"Biostrings\"]\n#> \n#> Slots:\n#>                                           \n#> Name:             shared            offset\n#> Class:         SharedRaw           integer\n#>                                           \n#> Name:             length   elementMetadata\n#> Class:           integer DataFrame_OR_NULL\n#>                         \n#> Name:           metadata\n#> Class:              list\n#> \n#> Extends: \n#> Class \"XString\", directly\n#> Class \"XRaw\", by class \"XString\", distance 2\n#> Class \"XVector\", by class \"XString\", distance 3\n#> Class \"Vector\", by class \"XString\", distance 4\n#> Class \"Annotated\", by class \"XString\", distance 5\n#> Class \"vector_OR_Vector\", by class \"XString\", distance 5\nshowClass(\"BStringSet\")\n#> Class \"BStringSet\" [package \"Biostrings\"]\n#> \n#> Slots:\n#>                                           \n#> Name:               pool            ranges\n#> Class:    SharedRaw_Pool    GroupedIRanges\n#>                                           \n#> Name:        elementType   elementMetadata\n#> Class:         character DataFrame_OR_NULL\n#>                         \n#> Name:           metadata\n#> Class:              list\n#> \n#> Extends: \n#> Class \"XStringSet\", directly\n#> Class \"XRawList\", by class \"XStringSet\", distance 2\n#> Class \"XVectorList\", by class \"XStringSet\", distance 3\n#> Class \"List\", by class \"XStringSet\", distance 4\n#> Class \"Vector\", by class \"XStringSet\", distance 5\n#> Class \"list_OR_List\", by class \"XStringSet\", distance 5\n#> Class \"Annotated\", by class \"XStringSet\", distance 6\n#> Class \"vector_OR_Vector\", by class \"XStringSet\", distance 6\n#> \n#> Known Subclasses: \n#> Class \"XStringQuality\", directly\n#> Class \"QualityScaledBStringSet\", directly\n#> Class \"PhredQuality\", by class \"XStringQuality\", distance 2\n#> Class \"SolexaQuality\", by class \"XStringQuality\", distance 2\n#> Class \"IlluminaQuality\", by class \"XStringQuality\", distance 2"},{"path":"bioconductor.html","id":"biostring-alphabets","chapter":"7 Bioconductor","heading":"7.5.2 Biostring alphabets","text":"BioStrings biology-oriented containers use predefined alphabet storing DNA sequence, RNA sequence, sequence amino acids. DNA_BASES alphabet four bases (, C, G T) RNA_BASES replace T U) Amoni Acid standard (AA_STANDARD) contains 20 Amino Acid letters, built 3 consecutive RNA bases. addition, Biostrings alphabets based two code representations: IUPAC_CODE_MAP AMINO_ACID_CODE contains bases plus extra characters symbols. important know code representations know kind string using need use depending sequence alphabet.information IUPAC DNA codes http://genome.ucsc.edu/goldenPath/help/iupac.html","code":"\nDNA_BASES     # DNA 4 bases\n#> [1] \"A\" \"C\" \"G\" \"T\"\nRNA_BASES     # RNA 4 bases\n#> [1] \"A\" \"C\" \"G\" \"U\"\nAA_STANDARD   # 20 Amino acids\n#>  [1] \"A\" \"R\" \"N\" \"D\" \"C\" \"Q\" \"E\" \"G\" \"H\" \"I\" \"L\" \"K\" \"M\" \"F\"\n#> [15] \"P\" \"S\" \"T\" \"W\" \"Y\" \"V\"\nDNA_ALPHABET  # IUPAC_CODE_MAP\n#>  [1] \"A\" \"C\" \"G\" \"T\" \"M\" \"R\" \"W\" \"S\" \"Y\" \"K\" \"V\" \"H\" \"D\" \"B\"\n#> [15] \"N\" \"-\" \"+\" \".\"\nRNA_ALPHABET  # IUPAC_CODE_MAP\n#>  [1] \"A\" \"C\" \"G\" \"U\" \"M\" \"R\" \"W\" \"S\" \"Y\" \"K\" \"V\" \"H\" \"D\" \"B\"\n#> [15] \"N\" \"-\" \"+\" \".\"\nAA_ALPHABET   # AMINO_ACID_CODE\n#>  [1] \"A\" \"R\" \"N\" \"D\" \"C\" \"Q\" \"E\" \"G\" \"H\" \"I\" \"L\" \"K\" \"M\" \"F\"\n#> [15] \"P\" \"S\" \"T\" \"W\" \"Y\" \"V\" \"U\" \"O\" \"B\" \"J\" \"Z\" \"X\" \"*\" \"-\"\n#> [29] \"+\" \".\""},{"path":"bioconductor.html","id":"transcription-and-translation","chapter":"7 Bioconductor","heading":"7.5.3 Transcription and translation","text":"Now now alphabets, let’s talk two processes convert sequences one alphabet . First, double-stranded DNA gets split. single strand gets transcribed RNA, complementing base. remember, RNA uses U instead T. Every three RNA bases translate new amino acid. translation follows genetic code table produce new molecules.","code":""},{"path":"bioconductor.html","id":"transcription-dna-to-rna","chapter":"7 Bioconductor","heading":"7.5.3.1 Transcription DNA to RNA","text":"Using BStrings start short DNA sequence saved DNAString object. , transcription process particular segment DNA copied RNA. Using RNAString, change T’s dna_seq U’s rna_seq, keeping sequence length.Remember, also begin Set want transcribe multiple sequences time.","code":"\nlibrary(Biostrings)\ndna_seq <- DNAString(\"ATGATCTCGTAA\") # DNA single string\ndna_seq\n#> 12-letter DNAString object\n#> seq: ATGATCTCGTAA\n# transcription DNA to RNA string\nrna_seq <- RNAString(dna_seq)   # T -> U\nrna_seq\n#> 12-letter RNAString object\n#> seq: AUGAUCUCGUAA"},{"path":"bioconductor.html","id":"translation-rna-to-amino-acids","chapter":"7 Bioconductor","heading":"7.5.3.2 Translation RNA to amino acids","text":"translate RNA sequences Amino Acid sequences, need translation codes stored RNA_GENETIC_CODE applied translate() function. example, rna_seq translated MIS*. three RNA bases return one Amino Acid. Hence, translation always returns shorter sequence.","code":"\nRNA_GENETIC_CODE\n#> UUU UUC UUA UUG UCU UCC UCA UCG UAU UAC UAA UAG UGU UGC UGA \n#> \"F\" \"F\" \"L\" \"L\" \"S\" \"S\" \"S\" \"S\" \"Y\" \"Y\" \"*\" \"*\" \"C\" \"C\" \"*\" \n#> UGG CUU CUC CUA CUG CCU CCC CCA CCG CAU CAC CAA CAG CGU CGC \n#> \"W\" \"L\" \"L\" \"L\" \"L\" \"P\" \"P\" \"P\" \"P\" \"H\" \"H\" \"Q\" \"Q\" \"R\" \"R\" \n#> CGA CGG AUU AUC AUA AUG ACU ACC ACA ACG AAU AAC AAA AAG AGU \n#> \"R\" \"R\" \"I\" \"I\" \"I\" \"M\" \"T\" \"T\" \"T\" \"T\" \"N\" \"N\" \"K\" \"K\" \"S\" \n#> AGC AGA AGG GUU GUC GUA GUG GCU GCC GCA GCG GAU GAC GAA GAG \n#> \"S\" \"R\" \"R\" \"V\" \"V\" \"V\" \"V\" \"A\" \"A\" \"A\" \"A\" \"D\" \"D\" \"E\" \"E\" \n#> GGU GGC GGA GGG \n#> \"G\" \"G\" \"G\" \"G\" \n#> attr(,\"alt_init_codons\")\n#> [1] \"UUG\" \"CUG\"\nrna_seq\n#> 12-letter RNAString object\n#> seq: AUGAUCUCGUAA\naa_seq <- translate(rna_seq)\naa_seq\n#> 4-letter AAString object\n#> seq: MIS*"},{"path":"bioconductor.html","id":"shortcut-translate-dna-to-amino-acids","chapter":"7 Bioconductor","heading":"7.5.3.3 Shortcut translate DNA to amino acids","text":"Transcription translation two separated processes real life. , coding, shortcut. function translate() also accepts DNA Strings automatically transcribes RNA translating sequence Amino Acids, providing results.","code":"\naa_seq <- translate(dna_seq)\naa_seq\n#> 4-letter AAString object\n#> seq: MIS*"},{"path":"bioconductor.html","id":"the-zika-virus","chapter":"7 Bioconductor","heading":"7.5.4 The Zika virus","text":"chapter, use Zika Virus genome interact package BStrings. Zika virus genome small, 10 thousand base pairs. virus needs host live . Zika virus common tropical areas around world spreads mosquitoes blood.","code":""},{"path":"bioconductor.html","id":"exploring-the-zika-virus-sequence","chapter":"7 Bioconductor","heading":"7.5.4.1 Exploring the Zika virus sequence","text":"explore Zika virus genome, loaded workspace zikaVirus. genome downloaded NCBI can apply BStrings functions learn .exploring Zika virus sequence, need asnwer question: store sequences? , using text. two main text formats fastQ fastA, main difference fastQ files include quality encoding per sequenced letter. formats used store DNA protein sequences together sequence names. Now, fasta file. fasta file contains two lines per sequence read. first line starts right arrow unique sequence identifier second line, raw sequence string. Common file extensions fasta, fa, seq.ShortRead package provides us readFasta() reads FASTA-formatted files directory Path followed pattern. can read compressed uncompressed files. returns single object representation class ShortRead. class stores manipulates uniform-length short read sequences identifiers. Use methods() class ShortRead get list accessors. Lastly, writeFasta() writes object single file given file name. can also compress fly.Start checking alphabet sequence.Remember alphabet corresponds specific BString container, alphabet usually extra code letters symbols.Call alphabet() attribute baseOnly = TRUE. difference see adding optional argument?’ve now discovered zikaVirus DNA sequence since contains 4 bases , C, T, G. zikaVirus read DNAStringSet.","code":"\n# BiocManager::install(\"ShortRead\")\nlibrary(ShortRead)\nzika <- readFasta(dirPath = \"data/zika_genomic.fa.txt\")\nzika\n#> class: ShortRead\n#> length: 1 reads; width: 10794 cycles\nclass(zika)\n#> [1] \"ShortRead\"\n#> attr(,\"package\")\n#> [1] \"ShortRead\"\nmethods(class = \"ShortRead\") # methods accessors\n#>  [1] [                 alphabetByCycle   append           \n#>  [4] clean             coerce            detail           \n#>  [7] dustyScore        id                length           \n#> [10] narrow            pairwiseAlignment show             \n#> [13] srdistance        srduplicated      sread            \n#> [16] srorder           srrank            srsort           \n#> [19] tables            trimEnds          trimLRPatterns   \n#> [22] width             writeFasta       \n#> see '?methods' for accessing help and source code\nzikaVirus <- sread(zika) # slots from object of class \"DNAStringSet\"\nzikaVirus\n#> DNAStringSet object of length 1:\n#>     width seq\n#> [1] 10794 AGTTGTTGATCTGTGTGAGTCAGA...GTGTGGGGAAATCCATGGTTTCT\nwriteFasta(object = zika, file = \"output/data/zv.fasta\")\nalphabet(zikaVirus) # Shows the letters included in the sequence\n#>  [1] \"A\" \"C\" \"G\" \"T\" \"M\" \"R\" \"W\" \"S\" \"Y\" \"K\" \"V\" \"H\" \"D\" \"B\"\n#> [15] \"N\" \"-\" \"+\" \".\"\nalphabetFrequency(zikaVirus) # Shows the counts per letter\n#>         A    C    G    T M R W S Y K V H D B N - + .\n#> [1,] 2991 2359 3139 2305 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n# Check alphabet of the zikaVirus using baseOnly = TRUE\nalphabet(zikaVirus, baseOnly = TRUE)\n#> [1] \"A\" \"C\" \"G\" \"T\""},{"path":"bioconductor.html","id":"manipulating-biostrings","chapter":"7 Bioconductor","heading":"7.5.4.2 Manipulating Biostrings","text":"Using short sequence (dna_seq) zikaVirus object, going two biological processes transcription translation.first two parts exercise, apply processes separately. using unlist() zikaVirus set select first 21 base pairs subseq(). resulting object “DNAString” object. transcribe dna_seq “RNAString” assign rna_seq. translate rna_seq “AAString” assign aa_seq.last part, ’ll apply one step. complete processes transcription translation “DNAString” object dna_seq one step, converting directly “AAString” object, aa_seq.used small sequence exercise, remember power BStrings comes light manipulating much larger sequences.","code":"\n# Unlist the set, select the first 21 letters, and assign to dna_seq\ndna_seq <- subseq(unlist(zikaVirus), end = 21)\ndna_seq\n#> 21-letter DNAString object\n#> seq: AGTTGTTGATCTGTGTGAGTC\n\n# Transcribe dna_seq into an RNAString object and print it\nrna_seq <- RNAString(dna_seq) \nrna_seq\n#> 21-letter RNAString object\n#> seq: AGUUGUUGAUCUGUGUGAGUC\n\n# Translate rna_seq into an AAString object and print it\naa_seq <- translate(rna_seq)\naa_seq\n#> 7-letter AAString object\n#> seq: SC*SV*V\n# Unlist the set, select the first 21 letters, and assign to dna_seq\ndna_seq <- subseq(unlist(zikaVirus), end = 21)\ndna_seq\n#> 21-letter DNAString object\n#> seq: AGTTGTTGATCTGTGTGAGTC\n\n# Transcribe and translate dna_seq into an AAString object and print it\naa_seq <- translate(dna_seq)\naa_seq\n#> 7-letter AAString object\n#> seq: SC*SV*V"},{"path":"rna-seq-an-example.html","id":"rna-seq-an-example","chapter":"8 RNA-Seq (an example)","heading":"8 RNA-Seq (an example)","text":"","code":""},{"path":"rna-seq-an-example.html","id":"introduction-2","chapter":"8 RNA-Seq (an example)","heading":"8.1 Introduction","text":"workflow based Mary Piper.1 analysis, used DESeq2 package2 also considered Michael . Love, Simon Anders, Wolfgang Huber3 description.research questions databases used workflow based publication Casimiro Gerarduzzi et al.4 RNA sequencing data can downloaded Gene Expression Omnibus (GEO) database (GEO accession: [GSE85209] (https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE85209)).","code":""},{"path":"rna-seq-an-example.html","id":"loading-packages","chapter":"8 RNA-Seq (an example)","heading":"8.2 Loading packages","text":"","code":"\n# Load library for DESeq2\n# if (!requireNamespace(\"BiocManager\", quietly = TRUE))\n#     install.packages(\"BiocManager\")\n# \n# .libPaths()\n# BiocManager::install(\"DESeq2\")\n# devtools::install_github(\"stephenturner/annotables\")\n\nlibrary(DESeq2)\n\n# Load library for RColorBrewer\nlibrary(RColorBrewer)\n\n# Load library for pheatmap\n# install.packages(\"pheatmap\")\nlibrary(pheatmap)\n\n# Load library for tidyverse\nlibrary(tidyverse)"},{"path":"rna-seq-an-example.html","id":"read-counts","chapter":"8 RNA-Seq (an example)","heading":"8.3 Read counts","text":"","code":"\nsmoc2_rawcounts <- read.csv(\"data/fibrosis_smoc2_rawcounts_unordered.csv\") \nrownames(smoc2_rawcounts) <- smoc2_rawcounts$X\nsmoc2_rawcounts$X <- NULL\n\n# Explore the first six observations of smoc2_rawcounts\nhead(smoc2_rawcounts)\n#>                    smoc2_fibrosis1 smoc2_fibrosis4\n#> ENSMUSG00000102693               0               0\n#> ENSMUSG00000064842               0               0\n#> ENSMUSG00000051951              72              30\n#> ENSMUSG00000102851               0               0\n#> ENSMUSG00000103377               0               0\n#> ENSMUSG00000104017               0               0\n#>                    smoc2_normal1 smoc2_normal3\n#> ENSMUSG00000102693             0             0\n#> ENSMUSG00000064842             0             0\n#> ENSMUSG00000051951             0             3\n#> ENSMUSG00000102851             0             0\n#> ENSMUSG00000103377             1             0\n#> ENSMUSG00000104017             0             0\n#>                    smoc2_fibrosis3 smoc2_normal4\n#> ENSMUSG00000102693               0             0\n#> ENSMUSG00000064842               0             0\n#> ENSMUSG00000051951              36             1\n#> ENSMUSG00000102851               0             0\n#> ENSMUSG00000103377               0             0\n#> ENSMUSG00000104017               0             0\n#>                    smoc2_fibrosis2\n#> ENSMUSG00000102693               0\n#> ENSMUSG00000064842               0\n#> ENSMUSG00000051951              51\n#> ENSMUSG00000102851               0\n#> ENSMUSG00000103377               0\n#> ENSMUSG00000104017               0\n\n# Explore the structure of smoc2_rawcounts\nstr(smoc2_rawcounts)\n#> 'data.frame':    47729 obs. of  7 variables:\n#>  $ smoc2_fibrosis1: int  0 0 72 0 0 0 0 0 0 1 ...\n#>  $ smoc2_fibrosis4: int  0 0 30 0 0 0 0 0 0 1 ...\n#>  $ smoc2_normal1  : int  0 0 0 0 1 0 0 0 0 1 ...\n#>  $ smoc2_normal3  : int  0 0 3 0 0 0 0 0 0 0 ...\n#>  $ smoc2_fibrosis3: int  0 0 36 0 0 0 0 0 0 1 ...\n#>  $ smoc2_normal4  : int  0 0 1 0 0 0 0 0 0 0 ...\n#>  $ smoc2_fibrosis2: int  0 0 51 0 0 0 0 0 0 1 ..."},{"path":"rna-seq-an-example.html","id":"distribution-of-counts","chapter":"8 RNA-Seq (an example)","heading":"8.4 Distribution of counts","text":"","code":"\nlibrary(ggplot2)\nggplot(smoc2_rawcounts) + \n  geom_histogram(aes(x=smoc2_fibrosis1), bins = 300)\nsummary(smoc2_rawcounts$smoc2_fibrosis1)\n#>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n#>      0.0      0.0      1.0    579.7    184.0 420026.0"},{"path":"rna-seq-an-example.html","id":"setting-of-metadata","chapter":"8 RNA-Seq (an example)","heading":"8.5 Setting of metadata","text":"","code":"\n# Create genotype vector\ngenotype <- c(\"smoc2_oe\", \"smoc2_oe\", \"smoc2_oe\", \"smoc2_oe\", \"smoc2_oe\", \"smoc2_oe\", \"smoc2_oe\")\n\n# Create condition vector\ncondition <- c(\"fibrosis\", \"fibrosis\", \"fibrosis\", \"fibrosis\", \"normal\", \"normal\", \"normal\")\n\n# Create data frame\nsmoc2_metadata <- data.frame(genotype, condition)\n\n# Assign the row names of the data frame\nrownames(smoc2_metadata) <- c(\"smoc2_fibrosis1\", \"smoc2_fibrosis2\", \"smoc2_fibrosis3\", \"smoc2_fibrosis4\", \"smoc2_normal1\", \"smoc2_normal3\", \"smoc2_normal4\")\n\nsmoc2_metadata\n#>                 genotype condition\n#> smoc2_fibrosis1 smoc2_oe  fibrosis\n#> smoc2_fibrosis2 smoc2_oe  fibrosis\n#> smoc2_fibrosis3 smoc2_oe  fibrosis\n#> smoc2_fibrosis4 smoc2_oe  fibrosis\n#> smoc2_normal1   smoc2_oe    normal\n#> smoc2_normal3   smoc2_oe    normal\n#> smoc2_normal4   smoc2_oe    normal"},{"path":"rna-seq-an-example.html","id":"matching-metadata-and-counts-data","chapter":"8 RNA-Seq (an example)","heading":"8.6 Matching metadata and counts data","text":"","code":"\n# Use the match() function to reorder the columns of the raw counts\nreorder_idx <- match(rownames(smoc2_metadata), colnames(smoc2_rawcounts))\n\n# Reorder the columns of the count data\nreordered_smoc2_rawcounts <- smoc2_rawcounts[ , reorder_idx]\n\nall(rownames(smoc2_metadata) == colnames(reordered_smoc2_rawcounts))\n#> [1] TRUE\n\n# Create a DESeq2 object\ndds_smoc2 <- DESeqDataSetFromMatrix(countData = reordered_smoc2_rawcounts,\n                              colData = smoc2_metadata,\n                              design = ~ condition)"},{"path":"rna-seq-an-example.html","id":"normalizing-counts","chapter":"8 RNA-Seq (an example)","heading":"8.7 Normalizing counts","text":"","code":"\n# Determine the size factors to use for normalization\ndds_smoc2 <- estimateSizeFactors(dds_smoc2)\n\nsizeFactors(dds_smoc2)\n#> smoc2_fibrosis1 smoc2_fibrosis2 smoc2_fibrosis3 \n#>       1.4319832       1.1189642       1.2480024 \n#> smoc2_fibrosis4   smoc2_normal1   smoc2_normal3 \n#>       1.0826799       0.7106482       0.7989734 \n#>   smoc2_normal4 \n#>       0.8482426\n\n# Extract the normalized counts\nsmoc2_normalized_counts <- counts(dds_smoc2, normalized=TRUE)\n# smoc2_normalized_counts"},{"path":"rna-seq-an-example.html","id":"quality-control---hierarchical-heatmap","chapter":"8 RNA-Seq (an example)","heading":"8.8 Quality control - Hierarchical heatmap","text":"","code":"\n# Transform the normalized counts \nvsd_smoc2 <- vst(dds_smoc2, blind = TRUE)\n\n# Extract the matrix of transformed counts\nvsd_mat_smoc2 <- assay(vsd_smoc2)\n\n# Compute the correlation values between samples\nvsd_cor_smoc2 <- cor(vsd_mat_smoc2) \n\n# Plot the heatmap\npheatmap(vsd_cor_smoc2, annotation = select(smoc2_metadata, condition))"},{"path":"rna-seq-an-example.html","id":"quality-control---principal-component-analysis","chapter":"8 RNA-Seq (an example)","heading":"8.9 Quality control - Principal component analysis","text":"","code":"\n# Transform the normalized counts \nvsd_smoc2 <- vst(dds_smoc2, blind = TRUE)\n\n# Plot the PCA of PC1 and PC2\nplotPCA(vsd_smoc2, intgroup=\"condition\")"},{"path":"rna-seq-an-example.html","id":"creating-the-deseq2-object","chapter":"8 RNA-Seq (an example)","heading":"8.10 Creating the DeSeq2 object","text":"","code":"\n# Create DESeq2 object\ndds_smoc2 <- DESeqDataSetFromMatrix(countData = reordered_smoc2_rawcounts,\n                              colData = smoc2_metadata,\n                              design = ~ condition)\n\n# Run the DESeq2 analysis\ndds_smoc2 <- DESeq(dds_smoc2)"},{"path":"rna-seq-an-example.html","id":"deseq2-model---dispersion","chapter":"8 RNA-Seq (an example)","heading":"8.11 DESeq2 model - dispersion","text":"Dispersion formula: \\(Var=\\mu+\\alpha\\times\\mu^2\\)\\(Var\\): variance\\(\\mu\\): mean\\(\\alpha\\): dispersion","code":"\nmean_counts <- apply(smoc2_rawcounts, 1, mean)\nvariance_counts <- apply(smoc2_rawcounts, 1, var)\ndf <- data.frame(mean_counts, variance_counts)\nggplot(df) + geom_point(aes(x=mean_counts, y=variance_counts)) + \n  scale_y_log10() + \n  scale_x_log10() +\n  labs(x=\"Mean counts per gene\", y=\"Vaiance per gene\") \n# Plot dispersions\nplotDispEsts(dds_smoc2)"},{"path":"rna-seq-an-example.html","id":"deseq2-model---contrasts","chapter":"8 RNA-Seq (an example)","heading":"8.12 DESeq2 model - contrasts","text":"DESeq2 Negative Binomial Model:\\[K_{ij} \\sim NB(\\mu_{ij},\\alpha_i)\\]\n\\[\\mu_{ij}=s_{j}q_{ij}\\]\\[log_2(q_{ij})=x_j\\beta_j\\]\\(K_{ij}\\) - raw count gene , samle j\\(s_{ij}\\) - size factor\\(g_{ij}\\) - normalized count","code":"\n# Extract the results of the differential expression analysis\nsmoc2_res <- results(dds_smoc2, \n                contrast = c(\"condition\", \"fibrosis\", \"normal\"), \n                alpha = 0.05)\nplotMA(smoc2_res)"},{"path":"rna-seq-an-example.html","id":"deseq2-rsults---lfc-shrinkage","chapter":"8 RNA-Seq (an example)","heading":"8.12.1 DESeq2 rsults - LFC shrinkage","text":"","code":"\n# Shrink the log2 fold change estimates to be more accurate\nsmoc2_res <- lfcShrink(dds_smoc2,\n                    contrast = c(\"condition\", \"fibrosis\", \"normal\"),\n                    res = smoc2_res, type = \"ashr\")\nplotMA(smoc2_res)"},{"path":"rna-seq-an-example.html","id":"deseq2-results","chapter":"8 RNA-Seq (an example)","heading":"8.13 DESeq2 results","text":"","code":"\nmcols(smoc2_res)\n#> DataFrame with 5 rows and 2 columns\n#>                        type            description\n#>                 <character>            <character>\n#> baseMean       intermediate mean of normalized c..\n#> log2FoldChange      results log2 fold change (MM..\n#> lfcSE               results posterior SD: condit..\n#> pvalue              results Wald test p-value: c..\n#> padj                results   BH adjusted p-values\nhead(smoc2_res)\n#> log2 fold change (MMSE): condition fibrosis vs normal \n#> Wald test p-value: condition fibrosis vs normal \n#> DataFrame with 6 rows and 5 columns\n#>                     baseMean log2FoldChange     lfcSE\n#>                    <numeric>      <numeric> <numeric>\n#> ENSMUSG00000102693  0.000000       0.000000  1.317258\n#> ENSMUSG00000064842  0.000000       0.000000  1.317258\n#> ENSMUSG00000051951 22.478090       3.830238  0.789374\n#> ENSMUSG00000102851  0.000000       0.000000  1.317258\n#> ENSMUSG00000103377  0.201024      -0.144713  1.160598\n#> ENSMUSG00000104017  0.000000       0.000000  1.317258\n#>                         pvalue        padj\n#>                      <numeric>   <numeric>\n#> ENSMUSG00000102693          NA          NA\n#> ENSMUSG00000064842          NA          NA\n#> ENSMUSG00000051951 5.82520e-08 2.54201e-07\n#> ENSMUSG00000102851          NA          NA\n#> ENSMUSG00000103377 6.76672e-01          NA\n#> ENSMUSG00000104017          NA          NA\nsummary(smoc2_res)\n#> \n#> out of 29556 with nonzero total read count\n#> adjusted p-value < 0.05\n#> LFC > 0 (up)       : 5776, 20%\n#> LFC < 0 (down)     : 5332, 18%\n#> outliers [1]       : 15, 0.051%\n#> low counts [2]     : 7207, 24%\n#> (mean count < 1)\n#> [1] see 'cooksCutoff' argument of ?results\n#> [2] see 'independentFiltering' argument of ?results\n# Extract results\nsmoc2_res <- results(dds_smoc2, \n                contrast = c(\"condition\", \"fibrosis\", \"normal\"), \n                alpha = 0.05, \n                lfcThreshold = 0.32)\n\n# Shrink the log2 fold changes\nsmoc2_res <- lfcShrink(dds_smoc2, \n                    contrast = c(\"condition\", \"fibrosis\", \"normal\"), \n                    res = smoc2_res, type = \"ashr\")\n# Get an overview of the results    \nsummary(smoc2_res)\n#> \n#> out of 29556 with nonzero total read count\n#> adjusted p-value < 0.05\n#> LFC > 0 (up)       : 3716, 13%\n#> LFC < 0 (down)     : 3322, 11%\n#> outliers [1]       : 15, 0.051%\n#> low counts [2]     : 7207, 24%\n#> (mean count < 1)\n#> [1] see 'cooksCutoff' argument of ?results\n#> [2] see 'independentFiltering' argument of ?results"},{"path":"rna-seq-an-example.html","id":"deseq2-significant-results","chapter":"8 RNA-Seq (an example)","heading":"8.14 DESeq2 significant results","text":"","code":"\n# Save results as a data frame\nsmoc2_res_all <- data.frame(smoc2_res)\n\n# Subset the results to only return the significant genes with p-adjusted values less than 0.05\nsmoc2_res_sig <- subset(smoc2_res_all, padj < 0.05)\nhead(smoc2_res_sig)\n#>                      baseMean log2FoldChange      lfcSE\n#> ENSMUSG00000051951   22.47809      3.8302376 0.78937355\n#> ENSMUSG00000025900   12.06950     -2.0769846 0.62565698\n#> ENSMUSG00000033845 1380.35712     -0.8819001 0.09788832\n#> ENSMUSG00000025903 2522.97515     -1.8975565 0.15007654\n#> ENSMUSG00000002459   11.55182      1.9315914 0.74833900\n#> ENSMUSG00000033793 1921.19192     -0.8971164 0.08467708\n#>                          pvalue         padj\n#> ENSMUSG00000051951 4.698974e-07 2.829520e-06\n#> ENSMUSG00000025900 5.479409e-04 2.278479e-03\n#> ENSMUSG00000033845 3.838750e-09 2.815588e-08\n#> ENSMUSG00000025903 1.242343e-26 2.749899e-25\n#> ENSMUSG00000002459 3.154811e-03 1.160401e-02\n#> ENSMUSG00000033793 3.841942e-12 3.594718e-11"},{"path":"rna-seq-an-example.html","id":"visualization-of-results---ma-és-vulcano-plots","chapter":"8 RNA-Seq (an example)","heading":"8.15 Visualization of results - MA és Vulcano plots","text":"","code":"\n# Create MA plot\nplotMA(smoc2_res)\n\n# Generate logical column \nsmoc2_res_all <- data.frame(smoc2_res) %>% mutate(threshold = padj < 0.05)\n              \n# Create the volcano plot\nggplot(smoc2_res_all) + \n        geom_point(aes(x = log2FoldChange, y = -log10(padj), color = threshold)) + \n        xlab(\"log2 fold change\") + \n        ylab(\"-log10 adjusted p-value\") + \n        theme(legend.position = \"none\", \n              plot.title = element_text(size = rel(1.5), hjust = 0.5), \n              axis.title = element_text(size = rel(1.25)))"},{"path":"rna-seq-an-example.html","id":"visualization-of-results---heatmap","chapter":"8 RNA-Seq (an example)","heading":"8.16 Visualization of results - heatmap","text":"","code":"\n# Subset normalized counts to significant genes\nsig_norm_counts_smoc2 <- smoc2_normalized_counts[rownames(smoc2_res_sig), ]\n\n# Choose heatmap color palette\nheat_colors <- brewer.pal(n = 6, name = \"YlOrRd\")\n\n# Plot heatmap\npheatmap(sig_norm_counts_smoc2, \n         color = heat_colors, \n         cluster_rows = TRUE, \n         show_rownames = FALSE,\n         annotation = select(smoc2_metadata, condition), \n         scale = \"row\")"},{"path":"rna-seq-an-example.html","id":"significant-genes","chapter":"8 RNA-Seq (an example)","heading":"8.17 Significant genes","text":"","code":"\nlibrary(annotables)\nhead(grcm38)\n#> # A tibble: 6 x 9\n#>   ensgene  entrez symbol chr     start    end strand biotype\n#>   <chr>     <int> <chr>  <chr>   <int>  <int>  <int> <chr>  \n#> 1 ENSMUSG~  14679 Gnai3  3      1.08e8 1.08e8     -1 protei~\n#> 2 ENSMUSG~  54192 Pbsn   X      7.78e7 7.79e7     -1 protei~\n#> 3 ENSMUSG~  12544 Cdc45  16     1.88e7 1.88e7     -1 protei~\n#> 4 ENSMUSG~     NA H19    7      1.43e8 1.43e8     -1 lincRNA\n#> 5 ENSMUSG~ 107815 Scml2  X      1.61e8 1.61e8      1 protei~\n#> 6 ENSMUSG~  11818 Apoh   11     1.08e8 1.08e8      1 protei~\n#> # ... with 1 more variable: description <chr>\n\nsmoc2_res_all <- data.frame(smoc2_res) %>% \n  rownames_to_column(var=\"ensgene\") %>% \n  left_join(, y=grcm38[, c(\"ensgene\", \"symbol\", \"description\")],\n            by=\"ensgene\")\n\nhead(smoc2_res_all)\n#>              ensgene   baseMean log2FoldChange     lfcSE\n#> 1 ENSMUSG00000102693  0.0000000      0.0000000 1.3172581\n#> 2 ENSMUSG00000064842  0.0000000      0.0000000 1.3172581\n#> 3 ENSMUSG00000051951 22.4780900      3.8302376 0.7893735\n#> 4 ENSMUSG00000102851  0.0000000      0.0000000 1.3172581\n#> 5 ENSMUSG00000103377  0.2010237     -0.1447134 1.1605983\n#> 6 ENSMUSG00000104017  0.0000000      0.0000000 1.3172581\n#>         pvalue        padj        symbol\n#> 1           NA          NA 4933401J01Rik\n#> 2           NA          NA       Gm26206\n#> 3 4.698974e-07 2.82952e-06          Xkr4\n#> 4           NA          NA       Gm18956\n#> 5 7.390045e-01          NA       Gm37180\n#> 6           NA          NA       Gm37363\n#>                                                             description\n#> 1        RIKEN cDNA 4933401J01 gene [Source:MGI Symbol;Acc:MGI:1918292]\n#> 2             predicted gene, 26206 [Source:MGI Symbol;Acc:MGI:5455983]\n#> 3 X-linked Kx blood group related 4 [Source:MGI Symbol;Acc:MGI:3528744]\n#> 4             predicted gene, 18956 [Source:MGI Symbol;Acc:MGI:5011141]\n#> 5             predicted gene, 37180 [Source:MGI Symbol;Acc:MGI:5610408]\n#> 6             predicted gene, 37363 [Source:MGI Symbol;Acc:MGI:5610591]\n\nsmoc2_res_sig <- subset(smoc2_res_all, padj < 0.05)\nsmoc2_res_sig <- smoc2_res_sig %>% arrange(padj)\nhead(smoc2_res_sig)\n#>              ensgene  baseMean log2FoldChange      lfcSE\n#> 1 ENSMUSG00000029811  8710.652       5.593885 0.11145593\n#> 2 ENSMUSG00000027896  3819.931      -3.523220 0.09295523\n#> 3 ENSMUSG00000062908 24293.902      -3.507301 0.11564406\n#> 4 ENSMUSG00000028222  5848.681      -4.496932 0.16082443\n#> 5 ENSMUSG00000032332  5162.864       4.557115 0.16437178\n#> 6 ENSMUSG00000036887  3638.590       3.859276 0.13865758\n#>          pvalue          padj  symbol\n#> 1  0.000000e+00  0.000000e+00    Aoc1\n#> 2 4.544391e-261 5.074721e-257 Slc16a4\n#> 3 4.634505e-168 3.450235e-164   Acadm\n#> 4 4.327404e-150 2.416206e-146   Calb1\n#> 5 6.044426e-148 2.699924e-144 Col12a1\n#> 6 1.030528e-144 3.835968e-141    C1qa\n#>                                                                                                 description\n#> 1                                    amine oxidase, copper-containing 1 [Source:MGI Symbol;Acc:MGI:1923757]\n#> 2 solute carrier family 16 (monocarboxylic acid transporters), member 4 [Source:MGI Symbol;Acc:MGI:2385183]\n#> 3                             acyl-Coenzyme A dehydrogenase, medium chain [Source:MGI Symbol;Acc:MGI:87867]\n#> 4                                                             calbindin 1 [Source:MGI Symbol;Acc:MGI:88248]\n#> 5                                             collagen, type XII, alpha 1 [Source:MGI Symbol;Acc:MGI:88448]\n#> 6               complement component 1, q subcomponent, alpha polypeptide [Source:MGI Symbol;Acc:MGI:88223]"},{"path":"rna-seq-an-example.html","id":"top-20-genes","chapter":"8 RNA-Seq (an example)","heading":"8.18 Top 20 genes","text":"","code":"\ntop_20 <- data.frame(sig_norm_counts_smoc2)[1:20, ] %>% \n  rownames_to_column(var=\"ensgene\")\n\ntop_20 <- top_20 %>% pivot_longer(cols = 2:8, values_to = \"normalized_counts\", names_to=\"samplename\")\n\nhead(top_20)\n#> # A tibble: 6 x 3\n#>   ensgene            samplename      normalized_counts\n#>   <chr>              <chr>                       <dbl>\n#> 1 ENSMUSG00000051951 smoc2_fibrosis1             50.3 \n#> 2 ENSMUSG00000051951 smoc2_fibrosis2             45.6 \n#> 3 ENSMUSG00000051951 smoc2_fibrosis3             28.8 \n#> 4 ENSMUSG00000051951 smoc2_fibrosis4             27.7 \n#> 5 ENSMUSG00000051951 smoc2_normal1                0   \n#> 6 ENSMUSG00000051951 smoc2_normal3                3.75\n\ntop_20 <- inner_join(top_20, \n                     rownames_to_column(smoc2_metadata, var=\"samplename\"),\n                     by=\"samplename\")\n# write.table(x = top_20, file = \"tmp.csv\", sep=\";\", dec=\",\", row.names = F, quote = T)\nggplot(top_20) + \n  geom_point(aes(x=ensgene, y=normalized_counts, color=condition)) +\n  scale_y_log10() +\n  labs(title = \"Top 20 genes\", x=\"Genes\", y=\"Normalized counts\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle=45, hjust=1))"},{"path":"summary.html","id":"summary","chapter":"9 Summary","heading":"9 Summary","text":"","code":""},{"path":"summary.html","id":"rmarkdown-2","chapter":"9 Summary","heading":"9.1 RMarkdown","text":"R markdown, easy reproduce analysis used, also entire report. advantage using R markdown (versus script) can combine computation explanation. words, can weave outputs R code, like figures tables, text create report.","code":""},{"path":"summary.html","id":"advanced-data-manipulation-1","chapter":"9 Summary","heading":"9.2 Advanced data manipulation","text":"read.table() rio::import()Linkreadr::read_delim()Linkwrite.table() rio::export()Linkreadr::write_delim()Linkstr()Linkdplyr::glimpse()Linkfactor()Linkforcats::fct_infreq()Linkpaste()Linkstringr::str_c()Linknames()Linkdplyr::rename()Linkrownames()Linktibble::rowid_to_column()Link[]Linkdplyr::select()Link[]Linkdplyr::filter()Link[]Linkdplyr::arrange()Linkcut()Linkdplyr::mutate()Linkaggregate()Linkdplyr::summarise()Linkmerge()Linkdplyr::left_join()Linkreshape2::melt() reshape2::dcast()Linktidyr::pivot_longer() tidyr::pivot_wider()Link","code":""},{"path":"summary.html","id":"modern-graphics-in-r---ggplot2","chapter":"9 Summary","heading":"9.3 Modern graphics in R - ggplot2","text":"","code":""},{"path":"summary.html","id":"the-grammar-of-graphics","chapter":"9 Summary","heading":"9.3.1 The grammar of graphics","text":"grammar graphics lies heart ggplot2 also lies heart define data visualizations.5Table 9.1:  Grammar Graphics","code":"\nlibrary(tidyverse)\n# a tibble for data, 3 rows, 4 columns\nd.tbl <- tribble(\n  ~group, ~score.1, ~score.2, ~score.3,\n  \"AA\", 15, 42, 12, \n  \"BB\", 20, 28, 18,\n  \"CC\", 35, 12, 21\n)\n# Scatterplot\n#   Data: d.tbl\n#   Geometry: point\n#   Aesthetics: x, y\n#   Mapping: x=score.1, y=score.2\nggplot(data=d.tbl, mapping=aes(x=score.1, y=score.2)) + geom_point()\n# Column Graph\n#   Data: d.tbl\n#   Geometry: column\n#   Aesthetics: x, y\n#   Mapping: x=score.1, y=score.2\nggplot(data=d.tbl, mapping=aes(x=score.1, y=score.2)) + geom_col()\n# Line Graph\n#   Data: d.tbl\n#   Geometry: line\n#   Aesthetics: x, y\n#   Mapping: x=score.1, y=score.2\nggplot(data=d.tbl, mapping=aes(x=score.1, y=score.2)) + geom_line()\n# all in one\nggplot(data=d.tbl, mapping=aes(x=score.1, y=score.2)) + \n  geom_point() + geom_col() + geom_line()\n# Scatterplot\n#   Data: d.tbl\n#   Geometry: point\n#   Aesthetics: x, y, size, color\n#   Mapping: x=score.1, y=score.2, size=score.3, color=group\nggplot(data=d.tbl, \n       mapping=aes(x=score.1, y=score.2, size=score.3, color=group)) + \n  geom_point()\n# Column Graph\n#   Data: d.tbl\n#   Geometry: column\n#   Aesthetics: x, y, fill\n#   Mapping: x=score.1, y=score.2, fill=score.3\nggplot(data=d.tbl, mapping=aes(x=score.1, y=score.2, fill=group)) + \n  geom_col()"},{"path":"summary.html","id":"geometries-with-required-and-optional-aesthetics.","chapter":"9 Summary","heading":"9.3.2 Geometries with required and optional aesthetics.","text":"","code":""},{"path":"summary.html","id":"plot-types","chapter":"9 Summary","heading":"9.3.3 Plot types","text":"\nFigure 9.1: Plot types geometries\n","code":""},{"path":"summary.html","id":"themes","chapter":"9 Summary","heading":"9.3.4 Themes","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
